<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于 Ubuntu 24.04 的 Hexo 博客搭建</title>
      <link href="/2024/12/01/%E5%9F%BA%E4%BA%8E%20Ubuntu%2024.04%20%E7%9A%84%20Hexo%20%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2024/12/01/%E5%9F%BA%E4%BA%8E%20Ubuntu%2024.04%20%E7%9A%84%20Hexo%20%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="基于-Ubuntu-24-04-的-Hexo-博客搭建"><a href="#基于-Ubuntu-24-04-的-Hexo-博客搭建" class="headerlink" title="基于 Ubuntu 24.04 的 Hexo 博客搭建"></a>基于 Ubuntu 24.04 的 Hexo 博客搭建</h1><h2 id="一、安装基础框架"><a href="#一、安装基础框架" class="headerlink" title="一、安装基础框架"></a>一、安装基础框架</h2><p><a href="https://hexo.io/">Hexo</a> 博客框架基于<code>Node.js</code> 。因此首先要安装<code>nodejs</code>和 <code>npm</code>，然后再进行<code>hexo</code> 的安装。</p><h3 id="1-1-安装-nodejs-和-npm"><a href="#1-1-安装-nodejs-和-npm" class="headerlink" title="1.1 安装 nodejs 和 npm"></a>1.1 安装 nodejs 和 npm</h3><p>打开<code>nodejs</code>官网 <a href="https://nodejs.org/en/download/，按照如下操作安装`">https://nodejs.org/en/download/，按照如下操作安装`</a> nodejs<code>和</code>npm`</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># installs fnm (Fast Node Manager)</span></span><br><span class="line">curl -fsSL https://fnm.vercel.app/install | bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># activate fnm</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># download and install Node.js</span></span><br><span class="line">fnm use --install-if-missing 22</span><br><span class="line"></span><br><span class="line"><span class="comment"># verifies the right Node.js version is in the environment</span></span><br><span class="line">node -v <span class="comment"># should print `v22.11.0`</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># verifies the right npm version is in the environment</span></span><br><span class="line">npm -v <span class="comment"># should print `10.9.0`</span></span><br></pre></td></tr></table></figure><h3 id="1-2-改npm源"><a href="#1-2-改npm源" class="headerlink" title="1.2 改npm源"></a>1.2 改npm源</h3><p>npm下载各种模块，默认是从国处服务器下载，速度较慢，建议配置成淘宝镜像。打开CMD窗口，运行如下命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shell</span><br><span class="line">复制成功npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="1-3-安装-hexo"><a href="#1-3-安装-hexo" class="headerlink" title="1.3 安装 hexo"></a>1.3 安装 hexo</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 安装hexo</span><br><span class="line">npm install hexo-cli g</span><br></pre></td></tr></table></figure><p>此时使用hexo应该可以使用了，如果提示找不到hexo命令，可以尝试链接hexo到可执行文件目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 链接hexo</span><br><span class="line">sudo ln -s /home/xulouzhe/nodejs/node-v16.15.0-linux-x64/bin/hexo   /usr/local/bin/hexo</span><br></pre></td></tr></table></figure><h3 id="1-4-hexo的使用方法"><a href="#1-4-hexo的使用方法" class="headerlink" title="1.4 hexo的使用方法"></a>1.4 hexo的使用方法</h3><p>进入想生成博客目录的路径，执行init命令生成博客文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd 网站目录</span><br><span class="line">hexo init 目录名</span><br></pre></td></tr></table></figure><p>会生成如下所示的目录结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p>其中 _config.yml 为网站配置文件，title 属性为博客标题， language 设置为 zh-CN 可将博客变为中文主题， description 属性为博客描述。详细配置方法可以见 <a href="https://hexo.io/zh-cn/docs/configuration">https://hexo.io/zh-cn/docs/configuration</a><br>其他路径中 source/_posts 目录存放文章， source/_drafts 目录存放草稿。 _posts 目录内会生成一篇默认文章，指导 hexo 的简单用法。<br>此时，执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>就可以在 ip:4000 地址看到你的博客了。<br>以下是一些 hexo 常用的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 在 source/_posts 路径内生成生成 文章标题.md 的空白文章</span><br><span class="line">hexo new &quot;文章标题&quot;</span><br><span class="line"></span><br><span class="line"># 生成网页静态文件，可以简写为 hexo g</span><br><span class="line">hexo generate</span><br><span class="line"></span><br><span class="line"># 部署之前生成的静态文件至 public 文件夹，可以简写为 hexo d</span><br><span class="line">hexo deploy</span><br><span class="line"></span><br><span class="line"># 清除缓存和静态文件，一般装插件出现问题时使用</span><br><span class="line">hexo clean</span><br></pre></td></tr></table></figure><h2 id="二、使用-Nginx-部署-Hexo-博客"><a href="#二、使用-Nginx-部署-Hexo-博客" class="headerlink" title="二、使用 Nginx 部署 Hexo 博客"></a>二、使用 Nginx 部署 Hexo 博客</h2><h3 id="2-1-安装-Nginx"><a href="#2-1-安装-Nginx" class="headerlink" title="2.1 安装 Nginx"></a>2.1 安装 Nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install nginx</span><br></pre></td></tr></table></figure><h3 id="2-2-Nginx-配置"><a href="#2-2-Nginx-配置" class="headerlink" title="2.2 Nginx 配置"></a>2.2 Nginx 配置</h3><p>打开<code>Nginx</code> 配置文件，一般是<code>/etc/nginx/sites-available/default</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    listen [::]:80;</span><br><span class="line"></span><br><span class="line">    # 下面的 root 后路径修改为 Hexo 博客 public 目录所在路径</span><br><span class="line">    root /var/hexo/public;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-重启-Nginx"><a href="#2-3-重启-Nginx" class="headerlink" title="2.3 重启 Nginx"></a>2.3 重启 Nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx.service</span><br></pre></td></tr></table></figure><h3 id="2-4-使用-pm2-自动监控文件变化并自动生成和部署网页"><a href="#2-4-使用-pm2-自动监控文件变化并自动生成和部署网页" class="headerlink" title="2.4 使用 pm2 自动监控文件变化并自动生成和部署网页"></a>2.4 使用 pm2 自动监控文件变化并自动生成和部署网页</h3><ul><li>安装 pm2</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g pm2</span><br></pre></td></tr></table></figure><ul><li>在博客路径的 source 文件夹内新建 start.js 文件，内容如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var process = require(&#x27;child_process&#x27;);</span><br><span class="line"></span><br><span class="line">process.exec(&#x27; hexo g -d&#x27;, function (error, stdout, stderr) &#123;</span><br><span class="line">    if (error !== null) &#123;</span><br><span class="line">      console.log(&#x27;exec error: &#x27; + error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>在 source 文件夹内再新建 watch.json 文件，内容如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;apps&quot; : [&#123;</span><br><span class="line">    &quot;name&quot;       : &quot;blog&quot;,</span><br><span class="line">    &quot;script&quot;     : &quot;./start.js&quot;,</span><br><span class="line">    &quot;exec_interpreter&quot;: &quot;node&quot;,</span><br><span class="line">    &quot;exec_mode&quot;  : &quot;fork_mode&quot;,</span><br><span class="line">    &quot;watch&quot;      : &quot;_posts&quot;</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在 source 目录内使用 pm2 命令进行监控：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start watch.json</span><br></pre></td></tr></table></figure><h3 id="2-5-Hexo-博客-Markdown-文档内插入图片"><a href="#2-5-Hexo-博客-Markdown-文档内插入图片" class="headerlink" title="2.5 Hexo 博客 Markdown 文档内插入图片"></a>2.5 Hexo 博客 Markdown 文档内插入图片</h3><p>先修改博客配置文件 _config.yml 内的 post_asset_folder 属性为 true</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure><p>然后，在博客文件夹内安装插件 hexo-asset-link</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -s hexo-asset-link</span><br></pre></td></tr></table></figure><p>在开启了 post_asset_folder 选项后，在生成新 md 文档时会在同一目录生成同名文件夹，将图片文件移动至文件夹内，然后在 Markdown 文档内使用如下格式即可插入图片。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![名称](图片所在文件夹/图片文件名) </span><br></pre></td></tr></table></figure><h3 id="2-6-其他小坑"><a href="#2-6-其他小坑" class="headerlink" title="2.6 其他小坑"></a>2.6 其他小坑</h3><p>装插件后显示出现错误，使用 hexo clean 命令清除缓存后再生成静态文件解决~</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言学习笔记</title>
      <link href="/2024/12/01/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/12/01/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="C-语言学习笔记-🍒"><a href="#C-语言学习笔记-🍒" class="headerlink" title="C 语言学习笔记 🍒"></a>C 语言学习笔记 🍒</h1><hr><h2 id="一、方法类"><a href="#一、方法类" class="headerlink" title="一、方法类"></a>一、方法类</h2><h3 id="1-字符串翻转实现方法"><a href="#1-字符串翻转实现方法" class="headerlink" title="1. 字符串翻转实现方法"></a>1. 字符串翻转实现方法</h3><blockquote><p>方法 1：</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 构造函数1，传入字符串指针，计算字符串长度，通过暂存变量c将第一个和最后一个、第二个和倒数第二个...进行交换。 如果是字符长度是偶数，交换1/2的长度刚好；如果是奇数，也是交换1/2的长度，最中间的字符无需调换 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">function1</span><span class="params">(<span class="type">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line"><span class="type">int</span> j = len - <span class="number">1</span>; <span class="comment">// 取len-1的原因是，数组下标索引从0开始，到len-1结束</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; len / <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">c = str[i];</span><br><span class="line">str[i] = str[j];</span><br><span class="line">str[j] = c;</span><br><span class="line">i++;</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>方法 2：</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 构造函数2，传入字符串指针，计算字符串长度，通过暂存变量c将第一个和最后一个、第二个和倒数第二个...进行交换。用i代表开始索引角标，j代表索引末尾角标，只要i小于j就将对应的值进行互换，同样实现翻转 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">function2</span><span class="params">(<span class="type">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line"><span class="type">int</span> j = len - <span class="number">1</span>; <span class="comment">// 取len-1的原因是，数组下标索引从0开始，到len-1结束</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line">c = *(str + i);</span><br><span class="line">*(str + i) = *(str + j);</span><br><span class="line">*(str + j) = c;</span><br><span class="line">i++;</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-自建方法实现大整数求和"><a href="#2-自建方法实现大整数求和" class="headerlink" title="2. 自建方法实现大整数求和"></a>2. 自建方法实现大整数求和</h3><blockquote><p>初级版</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">//定义最大值函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x &gt;= y) ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义最小值函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x &lt;= y) ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义字符串翻转函数</span></span><br><span class="line"><span class="function"><span class="type">char</span> *<span class="title">reverseStr</span><span class="params">(<span class="type">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="built_in">strlen</span>(str) - <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> temp;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = *(str + i);</span><br><span class="line">        *(str + i) = *(str + j);</span><br><span class="line">        *(str + j) = temp;</span><br><span class="line">        i++;</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>;</span><br><span class="line">    <span class="type">char</span> m[<span class="number">99</span>], n[<span class="number">99</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请随意输入两个大的整数进行求和：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>, m, n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;你输入的两个数为：\nNum1=%s\nNum2=%s\n求和值为：&quot;</span>, m, n);</span><br><span class="line">    <span class="comment">//求两个字符串长度,长度差及最大长度</span></span><br><span class="line">    <span class="type">int</span> x = <span class="built_in">strlen</span>(m), y = <span class="built_in">strlen</span>(n);</span><br><span class="line">    <span class="type">int</span> z = <span class="built_in">Max</span>(x, y) - <span class="built_in">Min</span>(x, y);</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">Max</span>(x, y);</span><br><span class="line">    <span class="comment">//字符串翻转</span></span><br><span class="line">    <span class="built_in">reverseStr</span>(m);</span><br><span class="line">    <span class="built_in">reverseStr</span>(n);</span><br><span class="line">    <span class="comment">//将翻转后的字符串转换成整型数组，并对长度较短的数组后面补0</span></span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="type">int</span> num_m[<span class="number">99</span>] = &#123;<span class="number">0</span>&#125;, num_n[<span class="number">99</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            num_m[i] = m[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            num_n[i] = n[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (j = len - <span class="number">1</span>; j &gt;= len - z; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            num_m[j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            num_m[i] = m[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            num_n[i] = n[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (j = len - <span class="number">1</span>; j &gt;= len - z; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            num_n[j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            num_m[i] = m[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            num_n[i] = n[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="comment">//从第一位遍历两个数组，并相加</span></span><br><span class="line">    <span class="type">int</span> sum[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> temp[<span class="number">100</span>];</span><br><span class="line">    <span class="type">int</span> carry = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp[i] = num_m[i] + num_n[i] + carry; <span class="comment">//两数相加后进行暂存</span></span><br><span class="line">        carry = temp[i] / <span class="number">10</span>; <span class="comment">//对暂存值除10，如果大于10，则下个暂存值+1，否则+0</span></span><br><span class="line">        <span class="keyword">if</span> (temp[i] &gt;= <span class="number">10</span>)<span class="comment">//如果暂存值&gt;=10，则对暂存值取模赋给最终值，否则直接赋值</span></span><br><span class="line">        &#123;</span><br><span class="line">            sum[i] = temp[i] % <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            sum[i] = temp[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 逆序输出</span></span><br><span class="line">    <span class="keyword">if</span> (sum[len] == <span class="number">0</span>) <span class="comment">//如果最后一位为0，则在翻转输出时不取最后一位，否则取最后一位</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sum[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = len; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sum[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>进阶版</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">overturn</span><span class="params">(<span class="type">char</span> *string, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> temp;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; len - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = string[left];</span><br><span class="line">        string[left] = string[len - <span class="number">1</span>];</span><br><span class="line">        string[len - <span class="number">1</span>] = temp;</span><br><span class="line">        left++;</span><br><span class="line">        len--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt;= b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">min</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt;= b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">overturn</span><span class="params">(<span class="type">char</span> *string, <span class="type">int</span> len)</span></span>;</span><br><span class="line">    <span class="comment">// 声明和输入字符串</span></span><br><span class="line">    <span class="type">char</span> a[<span class="number">100</span>], b[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>, a, b);</span><br><span class="line">    <span class="comment">// 字符串翻转</span></span><br><span class="line">    <span class="type">int</span> len_a = <span class="built_in">strlen</span>(a);</span><br><span class="line">    <span class="type">int</span> len_b = <span class="built_in">strlen</span>(b);</span><br><span class="line">    <span class="built_in">overturn</span>(a, len_a);</span><br><span class="line">    <span class="built_in">overturn</span>(b, len_b);</span><br><span class="line">    <span class="comment">// 字符串转数组，较短一个数组补全0</span></span><br><span class="line">    <span class="type">int</span> num_a[<span class="number">100</span>], num_b[<span class="number">100</span>];</span><br><span class="line">    <span class="type">int</span> len_num = <span class="built_in">max</span>(len_a, len_b);</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len_num; i++) <span class="comment">// 字符串转数组</span></span><br><span class="line">    &#123;</span><br><span class="line">        num_a[i] = a[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        num_b[i] = b[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">max</span>(len_a, len_b) - <span class="built_in">min</span>(len_a, len_b) != <span class="number">0</span>) <span class="comment">// 计算长度差，用于计补全0的个数</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="built_in">min</span>(len_a, len_b); i &lt; len_num; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (len_a &gt; len_b)</span><br><span class="line">            &#123;</span><br><span class="line">                num_b[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                num_a[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> sum[<span class="number">101</span>];  <span class="comment">// 声明和数组，多一位是以防最后进位多一位</span></span><br><span class="line">    <span class="type">int</span> temp = <span class="number">0</span>;  <span class="comment">// 暂存每位数相加之和，便于后续处理</span></span><br><span class="line">    <span class="type">int</span> carry = <span class="number">0</span>; <span class="comment">// 进位值</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len_num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = num_a[i] + num_b[i] + carry;</span><br><span class="line">        carry = temp / <span class="number">10</span>;</span><br><span class="line">        sum[i] = temp % <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (carry != <span class="number">0</span>) <span class="comment">// 判断进位值是否携带值，如果携带的话，需在输出的时候多进一位且值为1</span></span><br><span class="line">    &#123;</span><br><span class="line">        sum[len_num] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = len_num; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sum[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = len_num - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sum[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-取一个多位数的每位上数值的方法"><a href="#3-取一个多位数的每位上数值的方法" class="headerlink" title="3. 取一个多位数的每位上数值的方法"></a>3. 取一个多位数的每位上数值的方法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> m;<span class="comment">//假如m是一个五位数</span></span><br><span class="line"><span class="type">int</span> g, s, b, q, w;</span><br><span class="line">g = m / <span class="number">1</span> % <span class="number">10</span>;<span class="comment">//个位</span></span><br><span class="line">s = m / <span class="number">10</span> % <span class="number">10</span>;<span class="comment">//十位</span></span><br><span class="line">b = m / <span class="number">100</span> % <span class="number">10</span>;<span class="comment">//百位</span></span><br><span class="line">q = m / <span class="number">1000</span> % <span class="number">10</span>;<span class="comment">//千位</span></span><br><span class="line">w = m / <span class="number">10000</span> % <span class="number">10</span>;<span class="comment">//万位</span></span><br><span class="line"><span class="comment">//....以此类推 </span></span><br></pre></td></tr></table></figure><h3 id="4-递归生成斐波那契数列"><a href="#4-递归生成斐波那契数列" class="headerlink" title="4. 递归生成斐波那契数列"></a>4. 递归生成斐波那契数列</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fibonacci</span><span class="params">(<span class="type">int</span> index)</span>    <span class="comment">// index 表示求数列中第 index 个位置上的数的值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 设置结束递归的限制条件(即，递归的出口)</span></span><br><span class="line">    <span class="keyword">if</span> (index == <span class="number">1</span> || index == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// F(index) = F(index-1) + F(index-2)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fibonacci</span>(index - <span class="number">1</span>) + <span class="built_in">fibonacci</span>(index - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fibonacci</span><span class="params">(<span class="type">int</span> index)</span></span>;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)    <span class="comment">// 输出前 10 个数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, <span class="built_in">fibonacci</span>(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-计算字符串（长字符串）中子串（即短字符串）出现的次数"><a href="#4-计算字符串（长字符串）中子串（即短字符串）出现的次数" class="headerlink" title="4. 计算字符串（长字符串）中子串（即短字符串）出现的次数"></a>4. 计算字符串（长字符串）中子串（即短字符串）出现的次数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">(<span class="type">char</span> *str1, <span class="type">int</span> len1, <span class="type">char</span> *str2, <span class="type">int</span> len2)</span></span>;</span><br><span class="line">    <span class="type">char</span> str1[<span class="number">100</span>];</span><br><span class="line">    <span class="type">char</span> str2[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入两个字符串：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>, str1, str2);</span><br><span class="line">    <span class="type">int</span> len1 = <span class="built_in">strlen</span>(str1), len2 = <span class="built_in">strlen</span>(str2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;子串出现了%d次\n&quot;</span>, <span class="built_in">count</span>(str1, len1, str2, len2));</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">(<span class="type">char</span> *str1, <span class="type">int</span> len1, <span class="type">char</span> *str2, <span class="type">int</span> len2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (len1 &gt;= len2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len1; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len2; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (*(str1 + i) != *(str2 + i)) <span class="comment">// 遍历子串与父串一一比较，只要有不同就进入下一次循环</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == len2) <span class="comment">// 如果子串遍历的循环完整完成一轮，代表符合题目条件，则计数一次</span></span><br><span class="line">            &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len2; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len1; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (*(str2 + i) != *(str1 + i))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == len1)</span><br><span class="line">            &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-不使用第三个变量的情况下，交换变量-a-和变量-b-的值"><a href="#5-不使用第三个变量的情况下，交换变量-a-和变量-b-的值" class="headerlink" title="5. 不使用第三个变量的情况下，交换变量 a 和变量 b 的值"></a>5. 不使用第三个变量的情况下，交换变量 a 和变量 b 的值</h3><blockquote><p>方法 1：使用异或 “^”</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;你输入的a=%d, b=%d\n&quot;</span>, a, b);</span><br><span class="line">    a = a ^ b;</span><br><span class="line">    b = a ^ b; <span class="comment">// =&gt; b = a^b^b = a^0 = a</span></span><br><span class="line">    a = a ^ b; <span class="comment">// =&gt; a = a^b^b(等于最开始的a) = a^b^a = a^a^b = 0^b = b</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换后的a=%d, b=%d\n&quot;</span>, a, b);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>方法 2：求和后相减</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;你输入的a=%d, b=%d\n&quot;</span>, a, b);</span><br><span class="line">    a = a + b;</span><br><span class="line">    b = a - b; <span class="comment">// =&gt; b = a+b-b = a</span></span><br><span class="line">    a = a - b; <span class="comment">// =&gt; a = a+b-b(等于最开始的a) = a+b-a = b</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换后的a=%d, b=%d\n&quot;</span>, a, b);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>方法 3：宏定义</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OVERTURN(a, b) \</span></span><br><span class="line"><span class="meta">    &#123;                  \</span></span><br><span class="line"><span class="meta">        a = a + b;     \</span></span><br><span class="line"><span class="meta">        b = a - b;     \</span></span><br><span class="line"><span class="meta">        a = a - b;     \</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="built_in">OVERTURN</span>(a, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, a, b);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-删除字符串中的特定字符"><a href="#6-删除字符串中的特定字符" class="headerlink" title="6. 删除字符串中的特定字符"></a>6. 删除字符串中的特定字符</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DeleteChar</span><span class="params">(<span class="type">char</span> *str, <span class="type">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> str_len = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; str_len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] != c) <span class="comment">//遍历字符串，当未遇到想要删除的字符时，将字符串重新依次排序（即i和j同时自增）；反之，如果遇到，则选择跳过（即i自增，j不变）</span></span><br><span class="line">        &#123;</span><br><span class="line">            str[j] = str[i];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    str[j] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DeleteChar</span><span class="params">(<span class="type">char</span> *str, <span class="type">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)<span class="built_in">strlen</span>(str); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] == c)  <span class="comment">//遍历字符串，当遇到想要删除的字符时，将字符后面的所有字符向前挪一位实现删除效果</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = i; j &lt; (<span class="type">int</span>)<span class="built_in">strlen</span>(str); j++)</span><br><span class="line">            &#123;</span><br><span class="line">                str[j] = str[j + <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">1024</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入一段字符串:&quot;</span>);</span><br><span class="line">    <span class="built_in">gets</span>(str); <span class="comment">//不用scanf，是为了防止出现“为什么用`strlen()`不能算出空格”同类问题出现</span></span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入你想在字符串中删除的某一个字符:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;c);</span><br><span class="line">    <span class="built_in">DeleteChar</span>(str, c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-应用枚举变量输出星期一～星期日"><a href="#7-应用枚举变量输出星期一～星期日" class="headerlink" title="7. 应用枚举变量输出星期一～星期日"></a>7. 应用枚举变量输出星期一～星期日</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">week</span></span><br><span class="line">&#123;</span><br><span class="line">    Mon = <span class="number">1</span>,</span><br><span class="line">    Tue,</span><br><span class="line">    Wed,</span><br><span class="line">    Thu,</span><br><span class="line">    Fri,</span><br><span class="line">    Sat,</span><br><span class="line">    Sun</span><br><span class="line">&#125; day;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;day);</span><br><span class="line">    <span class="keyword">switch</span> (day)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> Mon:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Monday&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> Tue:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Tuesday&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> Wed:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Wednesday&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> Thu:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Thursday&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> Fri:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Friday&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> Sat:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Saturday&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> Sun:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Sunday&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Error!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-结构体和结构体指针"><a href="#8-结构体和结构体指针" class="headerlink" title="8. 结构体和结构体指针"></a>8. 结构体和结构体指针</h3><blockquote><p>结构体声明和初始化方法 1–在主函数内直接赋值</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Fruit</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">char</span> colour[<span class="number">20</span>];</span><br><span class="line">    <span class="type">float</span> price;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Fruit</span> fruit;</span><br><span class="line">    <span class="built_in">strcpy</span>(fruit.name, <span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(fruit.colour, <span class="string">&quot;Red&quot;</span>);</span><br><span class="line">    fruit.price = <span class="number">2.5</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;name: %s,colur: %s,price:%.2f\n&quot;</span>, fruit.name, fruit.colour, fruit.price);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结构体声明和初始化方法 2–直接在主函数声明处初始化</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Fruit</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">char</span> colour[<span class="number">20</span>];</span><br><span class="line">    <span class="type">float</span> price;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Fruit</span> fruit = &#123;<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Red&quot;</span>, <span class="number">2.5</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;name: %s,colur: %s,price:%.2f\n&quot;</span>, fruit.name, fruit.colour, fruit.price);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结构体声明和初始化方法 3–应用结构体指针构造输入输出函数实现结构体的数组化输入和输出</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUM 3  <span class="comment">//定义需要输入的数量</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span>  <span class="comment">//声明结构体</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">char</span> sex[<span class="number">5</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Input</span><span class="params">(<span class="keyword">struct</span> student *stu)</span>  <span class="comment">//构造输入函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NUM; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s%s%d&quot;</span>, stu[i].name, stu[i].sex, &amp;stu[i].age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Output</span><span class="params">(<span class="keyword">struct</span> student *stu)</span>  <span class="comment">//构造输出函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NUM; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;姓名:%s  性别:%s  年龄:%d\n&quot;</span>, stu[i].name, stu[i].sex, stu[i].age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">student</span> stu[NUM];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Input</span><span class="params">(<span class="keyword">struct</span> student * stu)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Output</span><span class="params">(<span class="keyword">struct</span> student * stu)</span></span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入学生姓名、性别和年龄：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">Input</span>(stu);</span><br><span class="line">    <span class="built_in">Output</span>(stu);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结构体声明和初始化方法 4–直接在结构体声明处初始化</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">stu</span> <span class="comment">// 自定义结构体包含姓名和分数；</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> grades;</span><br><span class="line">&#125; stu[<span class="number">3</span>] = &#123;<span class="string">&quot;张三&quot;</span>, <span class="number">65</span>, <span class="string">&quot;李四&quot;</span>, <span class="number">75</span>, <span class="string">&quot;王麻子&quot;</span>, <span class="number">90</span>&#125;; <span class="comment">// 初始化3个人和各自得分</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">stu</span> *p = stu;  <span class="comment">// 声明指针p指向stu</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">stu</span> *q = <span class="literal">NULL</span>; <span class="comment">// 声明指针q,赋予空值</span></span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">int</span> max_grades = <span class="number">0</span>;<span class="comment">// 声明一个最高分数赋初值为0</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) <span class="comment">// 遍历结构体中每个人的分数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;grades &gt; max_grades) <span class="comment">// 如果后一个人分数比假定的最大值大的话就赋值给最大值</span></span><br><span class="line">&#123;</span><br><span class="line">max_grades = p-&gt;grades;</span><br><span class="line">q = p; <span class="comment">// 当找到最大值时，将对应的地址赋给指针q</span></span><br><span class="line">&#125;</span><br><span class="line">p++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;姓名：%s 得分：%d\n&quot;</span>, q-&gt;name, q-&gt;grades);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结构体应用实例–景区门票案例：</p><ul><li>一个景区根据游人的年龄收取不一样价格的门票</li><li>请根据游人结构体（Visitor）, 根据年龄段决定可以购买的门票价格并输出</li><li>规则：年龄 &gt; 18, 门票为 20 元，其余状况免费</li><li>能够循环从控制台输入名字和年龄，打印门票收费状况，若是名字输入 n，则退出程序</li></ul></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Visitor</span> <span class="comment">// 定义结构体</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">int</span> price;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">visitor_ticket</span><span class="params">(<span class="keyword">struct</span> Visitor *visitor)</span> <span class="comment">// 定义票价判断函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (visitor-&gt;age &gt; <span class="number">18</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        visitor-&gt;price = <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        visitor-&gt;price = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Visitor</span> visitor;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入姓名：&quot;</span>);</span><br><span class="line">        <span class="built_in">gets</span>(visitor.name);             <span class="comment">// 用gets而不用scanf是为了防止用户在输入空格时，scanf不能完全读取输入内容</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(visitor.name, <span class="string">&quot;n&quot;</span>)) <span class="comment">// 如果输入“n”，则strcmp(visitor.name, &quot;n&quot;)结果为0，判断&quot;!0&quot;即为真，则退出程序</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;退出程序\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入年龄：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;visitor.age);</span><br><span class="line">        <span class="built_in">visitor_ticket</span>(&amp;visitor); <span class="comment">// 注意，自定义的票价判断函数形参是结构体指针，因此在此处需要取地址</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;票价为%d元\n&quot;</span>, visitor.price);</span><br><span class="line">        <span class="built_in">getchar</span>(); <span class="comment">// 吸收掉printf函数的换行符</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>很多时候，在对结构体进行相应的编码时，时而发现是用点运算符 (.)，时而是用箭头运算符 ( -&gt; )；那么这两者之间的使用有什么区别么？</p></blockquote><ul><li>相同点：两者都是二元操作符，而且右边的操作数都是成员的名称。</li><li>不同点：点运算符 (.) 的左边操作数是一个结果为结构的表达式； 箭头运算符 ( -&gt; ) 的左边的操作数是一个指向结构体的指针。</li></ul><p>例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>          <span class="comment">// 定义一个结构体类型：DATA</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> key[<span class="number">10</span>];       <span class="comment">// 结构体成员：key</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];      <span class="comment">// 结构体成员：name</span></span><br><span class="line">    <span class="type">int</span> age;            <span class="comment">// 结构体成员：age</span></span><br><span class="line">&#125;DATA;</span><br><span class="line">    </span><br><span class="line">DATA data;              <span class="comment">// 声明一个结构体变量</span></span><br><span class="line">DATA *pdata;            <span class="comment">// 声明一个指向结构体的指针</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 访问数据操作如下：</span></span><br><span class="line">data.age = <span class="number">24</span>;          <span class="comment">// 结构体变量通过点运算符( . )访问</span></span><br><span class="line">pdata-&gt;age = <span class="number">24</span>;        <span class="comment">// 指向结构体的指针通过箭头运算符( -&gt; )访问</span></span><br></pre></td></tr></table></figure><h3 id="9-共用体"><a href="#9-共用体" class="headerlink" title="9. 共用体"></a>9. 共用体</h3><blockquote><p>共用体的声明方法和结构体类似，具体如下：</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="title class_">data</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="type">double</span> f;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">union</span> <span class="title class_">data</span> a,b,c;</span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> <span class="title class_">data</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="type">double</span> f;</span><br><span class="line">&#125;a,b,c;</span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="type">double</span> f;</span><br><span class="line">&#125;a,b,c;</span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> <span class="title class_">data</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;   <span class="comment">// 占用4个字节的内存空间</span></span><br><span class="line">    <span class="type">char</span> ch; <span class="comment">// 占用1个字节的内存空间</span></span><br><span class="line">    <span class="type">short</span> m; <span class="comment">// 占用2个字节的内存空间</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">union</span> <span class="title class_">data</span> a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%llu,%llu\n&quot;</span>, <span class="built_in">sizeof</span>(a), <span class="built_in">sizeof</span>(<span class="keyword">union</span> data));</span><br><span class="line">    a.n = <span class="number">0x40</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%c,%d\n&quot;</span>, a.n, a.ch, a.m);</span><br><span class="line">    a.ch = <span class="string">&#x27;9&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%c,%d\n&quot;</span>, a.n, a.ch, a.m);</span><br><span class="line">    a.m = <span class="number">0x2059</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%c,%d\n&quot;</span>, a.n, a.ch, a.m);</span><br><span class="line">    a.n = <span class="number">0x3E25AD54</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%c,%d\n&quot;</span>, a.n, a.ch, a.m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面定义的共用体输出结果为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span>,<span class="number">4</span></span><br><span class="line"><span class="number">64</span>,@,64</span><br><span class="line"><span class="number">57</span>,<span class="number">9</span>,<span class="number">57</span></span><br><span class="line"><span class="number">8281</span>,Y,<span class="number">8281</span></span><br><span class="line"><span class="number">1042656596</span>,T,-<span class="number">21164</span></span><br></pre></td></tr></table></figure><p><strong>出现上述输出结果的原因是：成员 n,ch,m, 在内存中 “对齐” 到一头，对 ch 赋值修改的是前一个字节，对 m 赋值修改的是前两个字节，对 n 赋值修改的是所有字节。也就是说，ch,m 会影响到 n 的一部分数据，而 n 会影响到 ch,m 的所有数据。</strong></p><h3 id="10-共用体和结构体的区别"><a href="#10-共用体和结构体的区别" class="headerlink" title="10. 共用体和结构体的区别"></a>10. 共用体和结构体的区别</h3><ul><li><strong>变量长度不同</strong></li></ul><p>结构体变量所占内存长度是各成员占的内存长度之和，每个成员分别占有其自己的内存单元。</p><p>共用体变量所占的内存长度等于最长的成员的长度。</p><ul><li><strong>占用空间不同</strong></li></ul><p>结构体是同时存在的，并一次占用一段连续的内存空间；</p><p>而共用体则是多个共用成员占用同一个开始的内存地址，同时他们只能存在一各，所以空间大小就是最大那个所需的空间，如果单从一个共用体来讲，我们是不知道里面存的是什么内容，需要根据程序上下文才能确定。</p><p><img src="https://pic.imgdb.cn/item/64072fedf144a01007971290.png" alt=""></p><ul><li><strong>分配储存空间不同</strong></li></ul><p>结构体是由一系列具有相同类型或不同类型的数据构成的数据集合，简称结构。在 C 语言中，可以定义结构体类型，将多个相关的变量包装成为一个整体来使用。在结构体中的变量，可以是相同、部分相同，或完全不同的数据类型。</p><p>结构体类型的定义只是由用户构造了一个结构体，但定义结构体类型时系统并不为其分配存储空间。</p><ul><li><strong>修改某一成员后造成的结果不同</strong></li></ul><p>结构体的各个成员会占用不一样的内存，互相之间没有影响；而共用体的全部成员占用同一段内存，修改一个成员会影响其他全部成员。</p><blockquote><p>共用体和结构体共同应用实例：</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUM 2 <span class="comment">// 人员总数</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Person</span> <span class="comment">// 定义一个结构体Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="type">char</span> sex;</span><br><span class="line">    <span class="type">char</span> profession;</span><br><span class="line">    <span class="keyword">union</span> <span class="title class_">Union</span> <span class="comment">// 定义一个共用体Union</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">float</span> score;</span><br><span class="line">        <span class="type">char</span> course[<span class="number">20</span>];</span><br><span class="line">    &#125; sc; <span class="comment">// sc是一个共用体变量</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Person</span> person[NUM]; <span class="comment">// 定义一个结构体数组</span></span><br><span class="line">    <span class="comment">// 输入人员信息</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; NUM; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n按照姓名 编号 性别(男为m，女为f) 职业(学生为s，老师为t)的顺序输入相关信息:\n&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s %d %c %c&quot;</span>, person[i].name, &amp;(person[i].num), &amp;(person[i].sex), &amp;(person[i].profession));</span><br><span class="line">        <span class="keyword">if</span> (person[i].profession == <span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;请输入该学生成绩：&quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;person[i].sc.score);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (person[i].profession == <span class="string">&#x27;t&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;请输入该老师课程：&quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, person[i].sc.course);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">fflush</span>(stdin); <span class="comment">// 清空输入缓冲区，通常是为了确保不影响后面的数据读取</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 输出人员信息</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n姓名\t编号\t性别\t职业\t得分\t课程\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; NUM; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (person[i].profession == <span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\t%d\t%c\t%c\t%.2f\n&quot;</span>, person[i].name, person[i].num, person[i].sex, person[i].profession, person[i].sc.score);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (person[i].profession == <span class="string">&#x27;t&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\t%d\t%c\t%c\t\t%s\n&quot;</span>, person[i].name, person[i].num, person[i].sex, person[i].profession, person[i].sc.course);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">按照姓名 编号 性别(男为m，女为f) 职业(学生为s，老师为t)的顺序输入相关信息:</span><br><span class="line">张三 <span class="number">03</span> m s</span><br><span class="line">请输入该学生成绩：<span class="number">95</span></span><br><span class="line"></span><br><span class="line">按照姓名 编号 性别(男为m，女为f) 职业(学生为s，老师为t)的顺序输入相关信息:</span><br><span class="line">李四 <span class="number">02</span> f t</span><br><span class="line">请输入该老师课程：语文</span><br><span class="line"></span><br><span class="line">姓名    编号    性别    职业    得分    课程</span><br><span class="line">张三    <span class="number">3</span>       m       s     <span class="number">95.00</span></span><br><span class="line">李四    <span class="number">2</span>       f       t            语文</span><br></pre></td></tr></table></figure><h2 id="二、问题类"><a href="#二、问题类" class="headerlink" title="二、问题类"></a>二、问题类</h2><h3 id="1-为什么用-strlen-不能算出空格"><a href="#1-为什么用-strlen-不能算出空格" class="headerlink" title="1. 为什么用 strlen() 不能算出空格"></a>1. 为什么用 <code>strlen()</code> 不能算出空格</h3><p> 问题出在 <code>scanf()</code>。<code>scanf()</code> 开始读取输入以后，会在遇到的第一个空白字符空格（blank）、制表符（tab）或者换行符（newline）处停止读取。可以使用 <code>scanf(&quot;%[^\n]s&quot;,a);</code> 来解决问题。其中 <code>%[^\n]</code> 是说明只有在读入回车符时才终止读取。用 <code>getchar()</code> 在一个循环中不断读取字符缓冲区中的字符直到 <code>\n</code> 为止也可以实现类似功能，就是麻烦了些。</p><h3 id="2-vscode-引用自建头文件问题"><a href="#2-vscode-引用自建头文件问题" class="headerlink" title="2. vscode 引用自建头文件问题"></a>2. <code>vscode</code> 引用自建头文件问题</h3><p>vscode 在引用自建头文件时可能会出现 <code>Cannot open include file: &#39;Function.h&#39;: No such file or directory</code> 的提示，解决方法如下：在引用头文件时，将<code>#include &lt;Function.h&gt;</code> 改成<code>#include &quot;Function.h&quot;</code> 即可。</p><h2 id="三、编译错误和警告类"><a href="#三、编译错误和警告类" class="headerlink" title="三、编译错误和警告类"></a>三、编译错误和警告类</h2><h3 id="错误类"><a href="#错误类" class="headerlink" title="错误类"></a>错误类</h3><h5 id="1-Segmentation-fault"><a href="#1-Segmentation-fault" class="headerlink" title="1. Segmentation fault"></a>1. <code>Segmentation fault</code></h5><p>意思为<strong>段错误</strong>，所谓的段错误就是指访问的内存超过了系统所给这个程序的内存空间，通常这个值是由 <code>gdtr</code> 来保存的，他是一个 48 位的寄存器，其中的 32 位是保存由它指向的 <code>gdt</code> 表，后 13 位保存相应于 <code>gdt</code> 的下标，最后 3 位包括了程序是否在内存中以及程序的在 <code>CPU</code> 中的运行级别，指向的 <code>gdt</code> 是由以 64 位为一个单位的表，在这张表中就保存着程序运行的代码段以及数据段的起始地址以及相应的断限和页面交换还有程序运行级别和内存粒度等信息，一旦一个程序发生了越界访问，CPU 就会产生相应的异常保护，于是 <code>segmentation fault</code> 就出现了。</p><h5 id="2-no-39-operator-int-39-declared-for-postfix-39-39-fpermissive"><a href="#2-no-39-operator-int-39-declared-for-postfix-39-39-fpermissive" class="headerlink" title="2.no &#39;operator++(int)&#39; declared for postfix &#39;++&#39; [-fpermissive]"></a>2.<code>no &#39;operator++(int)&#39; declared for postfix &#39;++&#39; [-fpermissive]</code></h5><p>意思就是自增运算没有声明对应的整型变量。此报错是按照菜鸟教程在遍历枚举元素时出现的，定义 day 是枚举对象，不允许 ++ 操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">days</span></span><br><span class="line">&#123;</span><br><span class="line">    Mon = <span class="number">1</span>,</span><br><span class="line">    Tue,</span><br><span class="line">    Wed,</span><br><span class="line">    Thu,</span><br><span class="line">    Fri,</span><br><span class="line">    Sat,</span><br><span class="line">    Sun</span><br><span class="line">&#125; day;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (day = Mon; day &lt;= Sun; day++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;枚举元素：%d \n&quot;</span>, day);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修正方法，重新声明新的变量 <code>i</code>，再进行遍历：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">days</span></span><br><span class="line">&#123;</span><br><span class="line">    Mon = <span class="number">1</span>,</span><br><span class="line">    Tue,</span><br><span class="line">    Wed,</span><br><span class="line">    Thu,</span><br><span class="line">    Fri,</span><br><span class="line">    Sat,</span><br><span class="line">    Sun</span><br><span class="line">&#125; day;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = Mon; i &lt;= Sun; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;枚举元素：%d \n&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="警告类"><a href="#警告类" class="headerlink" title="警告类"></a>警告类</h3><h5 id="1-warning-control-reaches-end-of-non-void-function-Wreturn-type"><a href="#1-warning-control-reaches-end-of-non-void-function-Wreturn-type" class="headerlink" title="1. warning: control reaches end of non-void function [-Wreturn-type]"></a>1. <code>warning: control reaches end of non-void function [-Wreturn-type]</code></h5><p>这个是非常正经的分析，用 <code>gcc</code> 编译一个程序的时候出现这样的警告：<code>warning: control reaches end of non-void function</code>. 它的意思是：控制到达非 <code>void</code> 函数的结尾。就是说你的一些本应带有返回值的函数到达结尾后可能并没有返回任何值。这时候，最好检查一下是否每个控制流都会有返回值。</p><h5 id="2-warning-ISO-C-forbids-converting-a-string-constant-to-‘char-’-Wwrite-strings"><a href="#2-warning-ISO-C-forbids-converting-a-string-constant-to-‘char-’-Wwrite-strings" class="headerlink" title="2. warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]"></a>2. <code>warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]</code></h5><p>在 C++ 中，如果像如下初始化指针变量，会跳出警告：<code>warning: ISO C++ forbids converting a string constant to &#39;char*&#39; [-Wwrite-strings]</code>:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* p = <span class="string">&quot;abc&quot;</span>;　　<span class="comment">// valid in C, invalid in C++</span></span><br></pre></td></tr></table></figure><p>改成下面会通过 warning:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* p = (<span class="type">char</span>*)<span class="string">&quot;abc&quot;</span>;  <span class="comment">// pass</span></span><br></pre></td></tr></table></figure><p>或者改成下面:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="type">const</span> *p = <span class="string">&quot;abc&quot;</span>;　　<span class="comment">// pass</span></span><br></pre></td></tr></table></figure><h5 id="原因解析："><a href="#原因解析：" class="headerlink" title="原因解析："></a>原因解析：</h5><p>学习 <code>c</code> 或者 <code>c++</code> 的时候都知道，如果在赋值操作的时候，等号两边的变量类型不一样，那么编译器会进行一种叫做 <code>implicit conversion</code>（隐含转换）的操作来使得变量可以被赋值。</p><p>在上面的表达式中等号右边的 <code>&quot;abc&quot;</code> 是一个不变常量，在 c++ 中叫做 <code>string literal</code>，type 是 <code>const char *</code>，而 <code>p</code> 则是一个 <code>char</code> 指针。如果强行赋值会发生什么呢？没错，就是将右边的常量强制类型转换成一个指针，结果就是我们在修改一个 <code>const</code> 常量。编译运行的结果会因编译器和操作系统共同决定，有的编译器会通过，有的会抛异常，就算过了也可能因为操作系统的敏感性而被杀掉。</p><p>像这种直接将字符串赋值给指针的操作被开发者们认为是 <code>deprecated</code>(极力反对的)，只不过由于以前很多代码都有这种习惯，为了兼容，就保留下来了。</p><h5 id="3-warning-cast-to-pointer-from-integer-of-different-size-Wint-to-pointer-cast"><a href="#3-warning-cast-to-pointer-from-integer-of-different-size-Wint-to-pointer-cast" class="headerlink" title="3. warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]"></a>3. <code>warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]</code></h5><p><strong>警告：从不同大小的整数 [-Wint-to-pointer-cast] 转换为指针</strong></p><h5 id="原因解析：-1"><a href="#原因解析：-1" class="headerlink" title="原因解析："></a>原因解析：</h5><ul><li>创建子线程时因为最后一个参数需要是指向子线程的文件描述符<code>（int类型）</code>的指针，因此调用时我们会将文件描述符强转为 <code>(void *)类型</code>，可能是系统不同的原因在 <code>int类型</code>强转为 <code>void类型</code>指针会出现上述警告。</li><li>通过 <code>sizeof(void *)</code> 和 <code>sizeof(int)</code> 的输出它们的大小分别为 <strong>8</strong> 和 <strong>4</strong>(不同的操作系统不一样) 所以编译后才出现 <code>int</code> 到 <code>(void *)</code> 转换大小不匹配。</li><li>解决办法根据实际需求，可以在声明变量时将 <code>int</code> 型改为 <code>long</code> 型，或者可以将 <code>(void *)</code> 改为 <code>&amp;</code>。</li></ul><h2 id="四、常用语法类"><a href="#四、常用语法类" class="headerlink" title="四、常用语法类"></a>四、常用语法类</h2><h3 id="1-C-语言中常见的动态内存申请函数（malloc、calloc、realloc）"><a href="#1-C-语言中常见的动态内存申请函数（malloc、calloc、realloc）" class="headerlink" title="1.C 语言中常见的动态内存申请函数（malloc、calloc、realloc）"></a>1.C 语言中常见的动态内存申请函数（malloc、calloc、realloc）</h3><p>malloc 的定义：</p><blockquote><p>该函数有一个参数 size，通过此参数向堆区申请 size 大小字节的连续空间（该函数不对申请的空间的数值做初始化）。<br>返回一个指向该空间起始处的 void * 类型的指针，当空间申请失败时会返回一个空指针。<br>如果 size 为 0，malloc 的行为是不确定的，取决于编译器。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="number">40</span>);  <span class="comment">//固定长度</span></span><br><span class="line"><span class="type">int</span> *p = (<span class="type">int</span> *)<span class="built_in">malloc</span>(n*<span class="built_in">sizeof</span>(<span class="type">int</span>));  <span class="comment">//动态长度，与变量n有关</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu常用设置和命令</title>
      <link href="/2024/12/01/Ubuntu%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE%E5%92%8C%E5%91%BD%E4%BB%A4/"/>
      <url>/2024/12/01/Ubuntu%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE%E5%92%8C%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu常用设置和命令-📃"><a href="#Ubuntu常用设置和命令-📃" class="headerlink" title="Ubuntu常用设置和命令 📃"></a>Ubuntu常用设置和命令 📃</h1><hr><h2 id="一、更换镜像源为阿里镜像源"><a href="#一、更换镜像源为阿里镜像源" class="headerlink" title="一、更换镜像源为阿里镜像源"></a>一、更换镜像源为阿里镜像源</h2><h3 id="换源步骤-阿里源"><a href="#换源步骤-阿里源" class="headerlink" title="换源步骤 (阿里源)"></a>换源步骤 (阿里源)</h3><p>在 Ubuntu 24.04 之前，Ubuntu 的软件源配置文件使用传统的 One-Line-Style，路径为 <code>/etc/apt/sources.list</code>；从 Ubuntu 24.04 开始，Ubuntu 的软件源配置文件变更为 DEB822 格式，路径为 <code>/etc/apt/sources.list.d/ubuntu.sources</code>。</p><p><strong>注意：</strong> 24.04 源文件地址 已经更换为 <code>/etc/apt/sources.list.d/ubuntu.sources</code><br>以更换阿里源为例，受限打开终端，输入以下命令，备份当前的源列表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list.d/ubuntu.sources  /etc/apt/sources.list.d/ubuntu.sources.bak</span><br></pre></td></tr></table></figure><p>打开文本编辑器，输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list.d/ubuntu.sources</span><br></pre></td></tr></table></figure><p>在文本编辑器中粘贴以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 阿里云</span><br><span class="line">Types: deb</span><br><span class="line">URIs: http://mirrors.aliyun.com/ubuntu/</span><br><span class="line">Suites: noble noble-updates noble-security</span><br><span class="line">Components: main restricted universe multiverse</span><br><span class="line">Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg</span><br></pre></td></tr></table></figure><p>保存并关闭文本编辑器。</p><p>更新源列表，输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>如果需要，可以更新系统软件包，输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><p>其他几份国内源如下：</p><h3 id="清华源"><a href="#清华源" class="headerlink" title="清华源"></a>清华源</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br><span class="line">Types: deb</span><br><span class="line">URIs: http://mirrors.tuna.tsinghua.edu.cn/ubuntu/</span><br><span class="line">Suites: noble noble-updates noble-security</span><br><span class="line">Components: main restricted universe multiverse</span><br><span class="line">Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg</span><br></pre></td></tr></table></figure><h3 id="中科大源"><a href="#中科大源" class="headerlink" title="中科大源"></a>中科大源</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Types: deb</span><br><span class="line">URIs: http://mirrors.ustc.edu.cn/ubuntu/</span><br><span class="line">Suites: noble noble-updates noble-security</span><br><span class="line">Components: main restricted universe multiverse</span><br><span class="line">Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg</span><br></pre></td></tr></table></figure><h3 id="网易163源"><a href="#网易163源" class="headerlink" title="网易163源"></a>网易163源</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Types: deb</span><br><span class="line">URIs: http://mirrors.163.com/ubuntu/</span><br><span class="line">Suites: noble noble-updates noble-security</span><br><span class="line">Components: main restricted universe multiverse</span><br><span class="line">Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg</span><br></pre></td></tr></table></figure><h2 id="二、开启ssh服务，配置root远程登录"><a href="#二、开启ssh服务，配置root远程登录" class="headerlink" title="二、开启ssh服务，配置root远程登录"></a>二、开启ssh服务，配置root远程登录</h2><blockquote><p>注：自己根据自身情况决定加不加sudo </p></blockquote><h3 id="一、开启ssh服务"><a href="#一、开启ssh服务" class="headerlink" title="一、开启ssh服务"></a>一、开启ssh服务</h3><h4 id="1、先更新下载源"><a href="#1、先更新下载源" class="headerlink" title="1、先更新下载源"></a>1、先更新下载源</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt <span class="keyword">update</span></span><br></pre></td></tr></table></figure><blockquote><p>注：<code>apt upgrade</code>这个命令，会把本地已安装的软件，与刚下载的软件列表里对应软件地址的软件进行对比，如果发现已安装的软件版本太低，就会提示你更新。</p></blockquote><h4 id="2-安装ssh服务器"><a href="#2-安装ssh服务器" class="headerlink" title="2.安装ssh服务器"></a>2.安装ssh服务器</h4><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install openssh-<span class="built_in">server</span></span><br></pre></td></tr></table></figure><h4 id="3-启动ssh服务"><a href="#3-启动ssh服务" class="headerlink" title="3.启动ssh服务"></a>3.启动ssh服务</h4><h4 id="（1-输入下面的命令启动ssh服务"><a href="#（1-输入下面的命令启动ssh服务" class="headerlink" title="（1)输入下面的命令启动ssh服务"></a>（1)输入下面的命令启动ssh服务</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service ssh <span class="keyword">start</span></span><br></pre></td></tr></table></figure><h4 id="2-查看ssh服务是否开启"><a href="#2-查看ssh服务是否开启" class="headerlink" title="(2)查看ssh服务是否开启"></a>(2)查看ssh服务是否开启</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -e |<span class="keyword">grep</span> ssh</span><br></pre></td></tr></table></figure><p><strong>还可以通过下面这个命令查看ssh状态</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service ssh <span class="built_in">status</span></span><br></pre></td></tr></table></figure><p><strong>running即已启动</strong>，至此SSH服务已开启。</p><h3 id="二、修改root用户登录桌面权限"><a href="#二、修改root用户登录桌面权限" class="headerlink" title="二、修改root用户登录桌面权限"></a>二、修改root用户登录桌面权限</h3><blockquote><p>在Ubuntu 24.04桌面版中，开启root用户登录并启用远程SSH连接可以按照以下步骤进行操作：</p></blockquote><h5 id="1-设置root用户密码"><a href="#1-设置root用户密码" class="headerlink" title="1. 设置root用户密码"></a>1. 设置root用户密码</h5><p>使用如下命令设置root用户密码，执行命令后，依次输入当前登录用户密码，要设置的root密码，确认root密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> passwd root</span><br></pre></td></tr></table></figure><h5 id="2-注释如下两个文件的对应行"><a href="#2-注释如下两个文件的对应行" class="headerlink" title="2. 注释如下两个文件的对应行"></a>2. 注释如下两个文件的对应行</h5><p>文件为<code>/etc/pam.d/gdm-password和/etc/pam.d/gdm-autologin</code>，找到如下代码后在文件前面加入#注释，代码为<code>auth required pam_succeed_if.so user != root quiet_success</code>。编辑文件代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/pam.d/gdm-autologin</span><br><span class="line"><span class="built_in">sudo</span> nano /etc/pam.d/gdm-password</span><br></pre></td></tr></table></figure><h5 id="3-修改profile文件"><a href="#3-修改profile文件" class="headerlink" title="3. 修改profile文件"></a>3. 修改profile文件</h5><p>修改<code>/root/.profile</code>文件，编辑代码如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /root/.profile</span><br><span class="line"><span class="comment"># 注释掉或者删除行</span></span><br><span class="line">mesg n 2＞ /dev/null || <span class="literal">true</span></span><br><span class="line"><span class="comment"># 插入新行</span></span><br><span class="line"><span class="built_in">tty</span> -s &amp;&amp; mesg n || <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>注意：当没有执行第一步“设置root用户密码”时，<code>/root/.profile</code>文件是不存在的所以对于新安装的系统来说，第一步是非常重要的。</p><h5 id="4-修改配置文件安装完成后修改配置文件-etc-ssh-sshd-config，命令如下"><a href="#4-修改配置文件安装完成后修改配置文件-etc-ssh-sshd-config，命令如下" class="headerlink" title="4. 修改配置文件安装完成后修改配置文件/etc/ssh/sshd_config，命令如下"></a>4. 修改配置文件安装完成后修改配置文件/etc/ssh/sshd_config，命令如下</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/ssh/sshd_config</span><br><span class="line">将\#PermitRootLogin prohibit-password改成</span><br><span class="line">PermitRootLogin <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><h5 id="5-重启服务"><a href="#5-重启服务" class="headerlink" title="5. 重启服务"></a>5. 重启服务</h5><p>使用如下命令程序ssh服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart ssh</span><br></pre></td></tr></table></figure><blockquote><p>现在，你已经成功开启了root用户登录并启用了远程SSH连接。你可以使用root用户登录桌面版，或者通过SSH客户端使用root用户进行远程连接。请确保在远程连接时保持安全性，并仅授权受信任的用户使用root权限。</p></blockquote><h2 id="三、添加系统字体"><a href="#三、添加系统字体" class="headerlink" title="三、添加系统字体"></a>三、添加系统字体</h2><blockquote><p>系统字体保存路径在<code>/usr/share/fonts</code>下，如果此目录下缺少字体，则使用其他可视化api（如Python的pygame库）的默认配置时可能会出现乱码问题。</p></blockquote><h3 id="方法一：手动添加字体文件"><a href="#方法一：手动添加字体文件" class="headerlink" title="方法一：手动添加字体文件"></a>方法一：手动添加字体文件</h3><ul><li>下载字体文件：从互联网下载你需要的字体文件（例如，.ttf 或 .otf 文件）。</li><li>复制字体文件到 /usr/local/share/fonts：将下载的字体文件复制到 /usr/local/share/fonts 目录。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /path/to/downloaded/font.ttf /usr/local/share/fonts/</span><br></pre></td></tr></table></figure><ul><li>更新字体缓存：添加字体后，运行 fc-cache 命令来更新字体缓存。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo fc-cache -fv</span><br></pre></td></tr></table></figure><h3 id="方法二：通过系统包管理器安装字体"><a href="#方法二：通过系统包管理器安装字体" class="headerlink" title="方法二：通过系统包管理器安装字体"></a>方法二：通过系统包管理器安装字体</h3><p>Ubuntu 提供了多种字体包，可以通过 apt 包管理器安装。以下是一些常见的字体包：</p><ul><li>安装 Microsoft 字体：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install ttf-mscorefonts-installer</span><br></pre></td></tr></table></figure><ul><li>安装 Google 字体：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install fonts-noto</span><br></pre></td></tr></table></figure><ul><li>安装其他常用字体：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install fonts-dejavu</span><br><span class="line">sudo apt install fonts-liberation</span><br><span class="line">sudo apt install fonts-ubuntu</span><br></pre></td></tr></table></figure><p>安装这些字体包后，系统会自动将字体文件添加到合适的目录（通常是 <code>/usr/share/fonts</code>或<code>/usr/local/share/fonts</code>），并更新字体缓存。</p><h3 id="方法三：使用-fontconfig-来查找现有系统字体"><a href="#方法三：使用-fontconfig-来查找现有系统字体" class="headerlink" title="方法三：使用 fontconfig 来查找现有系统字体"></a>方法三：使用 fontconfig 来查找现有系统字体</h3><p>即使 <code>/usr/local/share/fonts</code> 目录中没有字体文件，系统其他位置仍然可能有字体文件。你可以使用 fontconfig 来查找这些字体。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fc-list</span><br></pre></td></tr></table></figure><p>此命令会列出系统中所有可用的字体及其路径。你可以使用 grep 来查找特定的字体。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fc-list | grep -i &quot;arial&quot;</span><br></pre></td></tr></table></figure><h2 id="四、切换默认sh为bash或者dash"><a href="#四、切换默认sh为bash或者dash" class="headerlink" title="四、切换默认sh为bash或者dash"></a>四、切换默认sh为bash或者dash</h2><h3 id="1-bash与dash"><a href="#1-bash与dash" class="headerlink" title="1 bash与dash"></a>1 bash与dash</h3><hr><p>从Ubuntu 6.10开始，默认使用dash(theDebian Almquist Shell)而不是bash(the GNUBourne-Again Shell).</p><p>但Login Shell还是bash. 原因是dash更快、更高效，而且它符合POSIX规范。Ubuntu在启动的时候会运行很多shell脚本，使用dash可以加快启动速度。</p><h3 id="2-切换bash和dash"><a href="#2-切换bash和dash" class="headerlink" title="2 ﻿切换bash和dash"></a>2 ﻿切换bash和dash</h3><hr><h4 id="2-1-查看与使用"><a href="#2-1-查看与使用" class="headerlink" title="2.1 查看与使用"></a>2.1 查看与使用</h4><hr><p>先用命令<code>ls -l /bin/sh</code>看看</p><blockquote><p>/bin/sh -&gt; dash</p></blockquote><p>我们会发现Ubuntu默认采用的是 dash</p><h4 id="2-2-切换sh为bash"><a href="#2-2-切换sh为bash" class="headerlink" title="2.2 切换sh为bash"></a>2.2 切换sh为bash</h4><hr><p>查看shell是否为bash，在终端运行如下命令</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l /bin/sh</span><br></pre></td></tr></table></figure><p>如果显示为“/bin/sh -&gt; bash”则为正常，否则请按以下方式修改：</p><p><strong>方法一</strong>：在终端运行如下命令，然后选择 no。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg-reconfigure dash</span><br></pre></td></tr></table></figure><p><strong>方法二</strong>：先删除sh，再创建软链接。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /bin/sh</span><br><span class="line">sudo ln -s /bin/bash /bin/sh</span><br></pre></td></tr></table></figure><h4 id="2-3-切换sh为dash"><a href="#2-3-切换sh为dash" class="headerlink" title="2.3 切换sh为dash"></a>2.3 切换sh为dash</h4><hr><p>当然我们也可以使用</p><blockquote><p>sudo dpkg-reconfigure dash</p></blockquote><p>把sh修改回去</p><h3 id="3-美化bash"><a href="#3-美化bash" class="headerlink" title="3.美化bash"></a>3.美化bash</h3><blockquote><p>默认用户和root用户分别进行如下操作</p></blockquote><h4 id="3-1打开配置文件"><a href="#3-1打开配置文件" class="headerlink" title="3.1打开配置文件"></a>3.1打开配置文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><h4 id="3-2编辑配置文件"><a href="#3-2编辑配置文件" class="headerlink" title="3.2编辑配置文件"></a>3.2编辑配置文件</h4><p>打开后按i键，在文件最后添加如下美化代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PS1=&#x27;\[\e[37;1m\][\[\e[31;1m\]\u\[\e[34;1m\]@\[\e[32;1m\]\h \[\e[31;1m\]\w \[\e[33;1m\]\t\[\e[37;1m\]]\[\e[32;1m\]\$\[\e[m\]&#x27;</span><br></pre></td></tr></table></figure><p>PS1具体对应的美化教程参考：<a href="https://blog.csdn.net/kim5659/article/details/104514814">https://blog.csdn.net/kim5659/article/details/104514814</a></p><h4 id="3-3保存并应用配置文件"><a href="#3-3保存并应用配置文件" class="headerlink" title="3.3保存并应用配置文件"></a>3.3保存并应用配置文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><h2 id="五、开启-关闭防火墙"><a href="#五、开启-关闭防火墙" class="headerlink" title="五、开启/关闭防火墙"></a>五、开启/关闭防火墙</h2><ol><li>Ctrl+Alt+T打开终端或者ssh登录，输入<code>sudo ufw status</code>回车，<a href="https://so.csdn.net/so/search?q=查看防火墙状态&amp;spm=1001.2101.3001.7020">查看防火墙状态</a>：inactive是关闭，active是开启。</li><li>使用<code>sudo ufw enable</code>开启防火墙。</li><li>使用<code>sudo ufw disable</code><a href="https://so.csdn.net/so/search?q=关闭防火墙&amp;spm=1001.2101.3001.7020">关闭防火墙</a>。</li></ol><h2 id="六、安装1Panel"><a href="#六、安装1Panel" class="headerlink" title="六、安装1Panel"></a>六、安装1Panel</h2><blockquote><p>官方文档：<a href="https://1panel.cn/docs/installation/online_installation/">https://1panel.cn/docs/installation/online_installation/</a></p></blockquote><p>使用一键安装命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh &amp;&amp; sudo bash quick_start.sh</span><br></pre></td></tr></table></figure><p>安装成功后，控制台会打印面板访问信息，可通过浏览器访问 1Panel：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://目标服务器 IP 地址:目标端口/安全入口</span><br></pre></td></tr></table></figure><ul><li><strong>如果使用的是云服务器，请至安全组开放目标端口。</strong></li><li><strong>ssh 登录 1Panel 服务器后，执行 1pctl user-info 命令可获取安全入口（entrance）</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言刷题笔记</title>
      <link href="/2023/02/11/C%E8%AF%AD%E8%A8%80%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/02/11/C%E8%AF%AD%E8%A8%80%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言刷题笔记🦆"><a href="#C语言刷题笔记🦆" class="headerlink" title="C语言刷题笔记🦆"></a>C语言刷题笔记🦆</h1><blockquote><p><a href="https://www.runoob.com/"><br><img src="https://img.shields.io/badge/%E9%A2%98%E7%9B%AE%E6%9D%A5%E6%BA%90-RUNOOB-greenyellow.svg?logo=Notist&amp;label=%E9%A2%98%E7%9B%AE%E6%9D%A5%E6%BA%90&amp;logoColor=greenyellow&amp;" alt="img"></a><a href="https://www.dotcpp.com/"><img src="https://img.shields.io/badge/%E9%A2%98%E7%9B%AE%E6%9D%A5%E6%BA%90-%20C%20%E8%AF%AD%E8%A8%80%E7%BD%91-purple.svg?logo=Notist&amp;label=%E9%A2%98%E7%9B%AE%E6%9D%A5%E6%BA%90&amp;logoColor=purple&amp;" alt="img"></a></p><p>本文题目转载自<a href="https://www.runoob.com/">菜鸟教程网</a>和 <a href="https://www.dotcpp.com/">C 语言网</a>，欢迎编程初学者访问学习！🌼</p></blockquote><h3 id="例题-1-约瑟夫生者死者小游戏"><a href="#例题-1-约瑟夫生者死者小游戏" class="headerlink" title="例题 1. 约瑟夫生者死者小游戏"></a>例题 1. <a href="https://www.runoob.com/cprogramming/c-examples-joseph-life-dead-game.html">约瑟夫生者死者小游戏</a></h3><p><code>题目描述：</code>30 个人在一条船上，超载，需要 15 人下船。于是人们排成一队，排队的位置即为他们的编号。报数，从 1 开始，数到 9 的人下船。如此循环，直到船上仅剩 15 人为止，问都有哪些编号的人下船了呢？</p><p><code>解题关键：</code></p><ul><li><p>转变思路，对在船上和下船的赋予状态，例如：在船上的人的状态为 0，下船的人的状态为 1；</p></li><li><p>报数到第 10 个人时，报数重新变为 1，这是循环初始化的一个过程；</p></li><li><p>每个人所在的位置（或编号）是固定不变的，即使某个人下船了，他所在的位置在计数时也要算上，这样计数到 31 时，重新初始化为 1，所有人的编号不会发生变化，实现船头和船尾的人连接。</p></li></ul><p><code>示例代码：</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> state[<span class="number">30</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 将每个人状态初始化为0，表示在船上</span></span><br><span class="line">    <span class="type">int</span> count = <span class="number">1</span>;       <span class="comment">// 报数</span></span><br><span class="line">    <span class="type">int</span> down = <span class="number">0</span>;        <span class="comment">// 计下船的人数</span></span><br><span class="line">    <span class="type">int</span> people = <span class="number">1</span>;      <span class="comment">// 人的编号</span></span><br><span class="line">    <span class="keyword">while</span> (down &lt; <span class="number">15</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (people == <span class="number">31</span>) <span class="comment">// 计数到31时,重新初始化为1，所有人的编号在进行到下一轮时将不会发生变化</span></span><br><span class="line">        &#123;</span><br><span class="line">            people = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (state[people - <span class="number">1</span>] == <span class="number">0</span>) <span class="comment">// 减1是因为索引值是从0开始，且这个人仍在船上时参与报数</span></span><br><span class="line">        &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">10</span>) <span class="comment">// 报数到第10个人时，重新初始化为1进行下一轮报数</span></span><br><span class="line">            &#123;</span><br><span class="line">                count = <span class="number">1</span>;</span><br><span class="line">                state[people - <span class="number">1</span>] = <span class="number">1</span>; <span class="comment">// 报9的倍数的那个人的状态变为1，不参与下次报数，下船人数+1</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;第%d号下船了\n&quot;</span>, people);</span><br><span class="line">                down++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        people++; <span class="comment">// 不管这个人是否还在船上，每个人的位置固定不变，编号是从1~30递增的</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;留在船上的人的编号为：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) <span class="comment">// 遍历30个人的状态，当为0的时候，表示还在船上，依次输出</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (state[i] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%-3d&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果：</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">第<span class="number">9</span>号下船了</span><br><span class="line">第<span class="number">18</span>号下船了</span><br><span class="line">第<span class="number">27</span>号下船了</span><br><span class="line">第<span class="number">6</span>号下船了</span><br><span class="line">第<span class="number">16</span>号下船了</span><br><span class="line">第<span class="number">26</span>号下船了</span><br><span class="line">第<span class="number">7</span>号下船了</span><br><span class="line">第<span class="number">19</span>号下船了</span><br><span class="line">第<span class="number">30</span>号下船了</span><br><span class="line">第<span class="number">12</span>号下船了</span><br><span class="line">第<span class="number">24</span>号下船了</span><br><span class="line">第<span class="number">8</span>号下船了</span><br><span class="line">第<span class="number">22</span>号下船了</span><br><span class="line">第<span class="number">5</span>号下船了</span><br><span class="line">第<span class="number">23</span>号下船了</span><br><span class="line">留在船上的人的编号为：<span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">10</span> <span class="number">11</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">17</span> <span class="number">20</span> <span class="number">21</span> <span class="number">25</span> <span class="number">28</span> <span class="number">29</span> </span><br></pre></td></tr></table></figure><h3 id="例题-2-计算字符串中子串出现的次数"><a href="#例题-2-计算字符串中子串出现的次数" class="headerlink" title="例题 2. 计算字符串中子串出现的次数"></a>例题 2. <a href="https://www.runoob.com/cprogramming/c-exercise-example96.html">计算字符串中子串出现的次数</a></h3><p><code>题目描述：</code>输入一个长字符串（即<strong>父串</strong>）和一个短字符串（即<strong>子串</strong>，可与父串等长），计算子串在父串中出现的次数？</p><p><code>示例代码：</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">(<span class="type">char</span> *str1, <span class="type">int</span> len1, <span class="type">char</span> *str2, <span class="type">int</span> len2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (len1 &gt;= len2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;父串为%s\n子串为%s\n&quot;</span>, str1, str2);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= len1 - len2; i++) <span class="comment">// i最大取len1-len2是防止当i取到len1-1且j取到len2-1时，str[i+j]已经超出str1的范围</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len2; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (str1[i + j] != str2[j]) <span class="comment">// 遍历子串与父串一一比较，只要有不同就进入下一次循环</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == len2) <span class="comment">// 如果子串遍历的循环完整完成一轮，代表符合题目条件，则计数一次</span></span><br><span class="line">            &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;父串为%s\n子串为%s\n&quot;</span>, str2, str1);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= len2 - len1; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len1; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (str2[i + j] != str1[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == len1)</span><br><span class="line">            &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">(<span class="type">char</span> *str1, <span class="type">int</span> len1, <span class="type">char</span> *str2, <span class="type">int</span> len2)</span></span>;</span><br><span class="line">    <span class="type">char</span> str1[<span class="number">100</span>];</span><br><span class="line">    <span class="type">char</span> str2[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入两个字符串：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>, str1, str2);</span><br><span class="line">    <span class="type">int</span> len1 = <span class="built_in">strlen</span>(str1), len2 = <span class="built_in">strlen</span>(str2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;子串出现了%d次\n&quot;</span>, <span class="built_in">count</span>(str1, len1, str2, len2));</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果：</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">请输入两个字符串：</span><br><span class="line"><span class="number">12123112312231233</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line">父串为<span class="number">12123112312231233</span></span><br><span class="line">子串为<span class="number">123</span></span><br><span class="line">子串出现了<span class="number">3</span>次</span><br></pre></td></tr></table></figure><h3 id="例题-3-无重复数字"><a href="#例题-3-无重复数字" class="headerlink" title="例题 3. 无重复数字"></a>例题 3. <a href="https://www.runoob.com/cprogramming/c-exercise-example1.html">无重复数字</a></h3><p><code>题目描述：</code>有 <strong>1、2、3、4</strong> 四个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？</p><p><code>示例代码：</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i, j, k, num, count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= <span class="number">4</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (k = <span class="number">1</span>; k &lt;= <span class="number">4</span>; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i != j &amp;&amp; j != k &amp;&amp; k != i)</span><br><span class="line">                &#123;</span><br><span class="line">                    num = i * <span class="number">100</span> + j * <span class="number">10</span> + k;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%-5d&quot;</span>, num);</span><br><span class="line">                    count++;</span><br><span class="line">                    <span class="keyword">if</span> (count % <span class="number">10</span> == <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n共有%d个数\n&quot;</span>, count);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果：</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span>  <span class="number">124</span>  <span class="number">132</span>  <span class="number">134</span>  <span class="number">142</span>  <span class="number">143</span>  <span class="number">213</span>  <span class="number">214</span>  <span class="number">231</span>  <span class="number">234</span></span><br><span class="line"><span class="number">241</span>  <span class="number">243</span>  <span class="number">312</span>  <span class="number">314</span>  <span class="number">321</span>  <span class="number">324</span>  <span class="number">341</span>  <span class="number">342</span>  <span class="number">412</span>  <span class="number">413</span></span><br><span class="line"><span class="number">421</span>  <span class="number">423</span>  <span class="number">431</span>  <span class="number">432</span></span><br><span class="line">共有<span class="number">24</span>个数</span><br></pre></td></tr></table></figure><h3 id="例题-4-计算提成"><a href="#例题-4-计算提成" class="headerlink" title="例题 4. 计算提成"></a>例题 4. <a href="https://www.runoob.com/cprogramming/c-exercise-example2.html">计算提成</a></h3><p><code>题目描述：</code>企业发放的奖金根据利润提成。</p><ul><li>利润 (I) 低于或等于 10 万元时，奖金可提 10%；</li><li>利润高于 10 万元，低于 20 万元时，低于 10 万元的部分按 10% 提成，高于 10 万元的部分，可提成 7.5%；</li><li>20 万到 40 万之间时，高于 20 万元的部分，可提成 5%；</li><li>40 万到 60 万之间时高于 40 万元的部分，可提成 3%；</li><li>60 万到 100 万之间时，高于 60 万元的部分，可提成 1.5%；</li><li>高于 100 万元时，超过 100 万元的部分按 1% 提成。</li></ul><p>从键盘输入当月利润 I，求应发放奖金总数？</p><p><code>示例代码：</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">float</span> profit;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;input your profits:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;profit);</span><br><span class="line">    <span class="type">float</span> bonus, bonus1, bonus2, bonus3, bonus4, bonus5;</span><br><span class="line">    bonus1 = <span class="number">100000</span> * <span class="number">0.1</span>;</span><br><span class="line">    bonus2 = bonus1 + <span class="number">100000</span> * <span class="number">0.075</span>;</span><br><span class="line">    bonus3 = bonus2 + <span class="number">200000</span> * <span class="number">0.05</span>;</span><br><span class="line">    bonus4 = bonus3 + <span class="number">200000</span> * <span class="number">0.03</span>;</span><br><span class="line">    bonus5 = bonus4 + <span class="number">400000</span> * <span class="number">0.015</span>;</span><br><span class="line">    <span class="keyword">if</span> (profit &lt;= <span class="number">100000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        bonus = profit * <span class="number">0.1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (profit &lt;= <span class="number">200000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        bonus = bonus1 + (profit - <span class="number">100000</span>) * <span class="number">0.075</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (profit &lt;= <span class="number">400000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        bonus = bonus2 + (profit - <span class="number">200000</span>) * <span class="number">0.05</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (profit &lt;= <span class="number">600000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        bonus = bonus3 + (profit - <span class="number">400000</span>) * <span class="number">0.03</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (profit &lt;= <span class="number">1000000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        bonus = bonus4 + (profit - <span class="number">600000</span>) * <span class="number">0.015</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        bonus = bonus5 + (profit - <span class="number">1000000</span>) * <span class="number">0.01</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;bonus is %f\n&quot;</span>, bonus);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果：</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span> your profits:<span class="number">120000</span></span><br><span class="line">bonus is <span class="number">11500.000000</span></span><br></pre></td></tr></table></figure><h3 id="例题-5-百鸡百钱问题"><a href="#例题-5-百鸡百钱问题" class="headerlink" title="例题 5. 百鸡百钱问题"></a>例题 5. 百鸡百钱问题</h3><p><code>题目描述：</code>中国古代数学家张丘建在他的《算经》中提出了一个著名的 “百钱百鸡问题”：一只公鸡（cock）值五钱，一只母鸡（hen）值三钱，三只小鸡（chick）值一钱，现在要用百钱买百鸡，请问公鸡、母鸡、小鸡各多少只？</p><p><code>示例代码：</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> cock, hen, chick;</span><br><span class="line">    <span class="keyword">for</span> (cock = <span class="number">0</span>; cock &lt;= <span class="number">20</span>; cock++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (hen = <span class="number">0</span>; hen &lt;= <span class="number">33</span>; hen++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (chick = <span class="number">3</span>; chick &lt;= <span class="number">99</span>; chick++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (cock + hen + chick == <span class="number">100</span> &amp;&amp; <span class="number">5</span> * cock + <span class="number">3</span> * hen + chick / <span class="number">3</span> == <span class="number">100</span> &amp;&amp; chick % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;cock=%2d只, hen=%2d只, chick=%2d只\n&quot;</span>, cock, hen, chick);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果：</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cock= <span class="number">0</span>只, hen=<span class="number">25</span>只, chick=<span class="number">75</span>只</span><br><span class="line">cock= <span class="number">4</span>只, hen=<span class="number">18</span>只, chick=<span class="number">78</span>只</span><br><span class="line">cock= <span class="number">8</span>只, hen=<span class="number">11</span>只, chick=<span class="number">81</span>只</span><br><span class="line">cock=<span class="number">12</span>只, hen= <span class="number">4</span>只, chick=<span class="number">84</span>只</span><br></pre></td></tr></table></figure><h3 id="例题-6-水仙花数"><a href="#例题-6-水仙花数" class="headerlink" title="例题 6. 水仙花数"></a>例题 6. 水仙花数</h3><p><code>题目描述：</code>水仙花数（Narcissistic number）是指一个 n 位数 (n≥3)，它的每个位上的数字的 n 次幂之和等于它本身。例如 153 就是一个水仙花数，因为 153=13 + 53 + 33。求出 3 位数中的水仙花数是哪几个？</p><p><code>示例代码：</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="type">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">for</span> (num = <span class="number">100</span>; num &lt; <span class="number">1000</span>; num++)</span><br><span class="line">    &#123;</span><br><span class="line">        i = num / <span class="number">1</span> % <span class="number">10</span>;   <span class="comment">// 取个位</span></span><br><span class="line">        j = num / <span class="number">10</span> % <span class="number">10</span>;  <span class="comment">// 取十位</span></span><br><span class="line">        k = num / <span class="number">100</span> % <span class="number">10</span>; <span class="comment">// 取百位</span></span><br><span class="line">        <span class="keyword">if</span> (i * i * i + j * j * j + k * k * k == num)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;num=%d\n&quot;</span>, num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果：</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num=<span class="number">153</span></span><br><span class="line">num=<span class="number">370</span></span><br><span class="line">num=<span class="number">371</span></span><br><span class="line">num=<span class="number">407</span></span><br></pre></td></tr></table></figure><h3 id="例题-7-自定义函数之字符串连接"><a href="#例题-7-自定义函数之字符串连接" class="headerlink" title="例题 7. 自定义函数之字符串连接"></a>例题 7. <a href="https://www.dotcpp.com/oj/problem1032.html">自定义函数之字符串连接</a></h3><p><code>题目描述：</code>写一函数，将两个字符串连接。</p><p><code>解题思路：</code></p><blockquote><p>首先，我想说既然题目中给出自己写一个函数将两个字符串连接，那么出题人的意图应该就是要考生自己编写一个函数实现与 <code>strcat</code> 函数同样的效果，而不是直接引用 <code>strcat</code> 函数，如果直接引用 <code>strcat</code> 函数，那么本题目将毫无测试价值。</p></blockquote><p><strong>我的思路大致如下：</strong></p><ul><li>输入两个字符串 <code>str_1</code> 和 <code>str_2</code>，且要求声明字符数组长度时 <code>str_1</code> 的长度大于和等于输入字符串后的 <code>str_1+str_2</code> 的长度。</li><li>构建函数传入两个字符串 <code>void montage_string(char *string_1, char *string_2)</code>，在函数内部声明 i = strlen (string_1), k = 0, j = strlen (string_1) + strlen (string_2)，其中 i 等于字符串 1 的长度，j 等于字符串 1 和字符串 2 长度的和。</li><li>从字符串 1 的最后一个字符 string_1 [i]（即’\0’）开始，将字符串 2 的第一个字符 string_2 [k] 赋值给字符串 1 的最后一个字符 string_1 [i]（即’\0’），实现拼接效果，即 string_1 [i++] = string_2 [k++]。while (i &lt;= j) 时，在赋值运算结束以后，i 和 k 自增，当 i 增加到大于 j (即符串 1 和字符串 2 长度的和) 时，跳出循环。</li></ul><p><code>注意事项:</code></p><p>在输入字符串时，<code>str_1+str_2</code> 的长度必须小于声明的 <code>str_1</code> 的长度，例如：最开始声明了 <code>str_1[7]</code>，那么输入的两端字符串可以是 <code>abc</code> 和 <code>123</code>，但不能是 <code>abcd</code> 和 <code>123</code> 或者 <code>abc</code> 和 <code>1234</code>，不然字符数组会溢出出现错误。</p><p><code>示例代码:</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">montage_string</span><span class="params">(<span class="type">char</span> *string_1, <span class="type">char</span> *string_2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="built_in">strlen</span>(string_1), k = <span class="number">0</span>, j = <span class="built_in">strlen</span>(string_1) + <span class="built_in">strlen</span>(string_2);</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= j)</span><br><span class="line">    &#123;</span><br><span class="line">        string_1[i++] = string_2[k++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> str_1[<span class="number">1024</span>], str_2[<span class="number">512</span>];</span><br><span class="line">    <span class="built_in">gets</span>(str_1);</span><br><span class="line">    <span class="built_in">gets</span>(str_2);</span><br><span class="line">    <span class="built_in">montage_string</span>(str_1, str_2);</span><br><span class="line">    <span class="built_in">puts</span>(str_1);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果：</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">abcd</span><br><span class="line"><span class="number">1356</span>wd</span><br><span class="line">abcd1356wd</span><br></pre></td></tr></table></figure><h3 id="例题-8-三个字符串的排序"><a href="#例题-8-三个字符串的排序" class="headerlink" title="例题 8. 三个字符串的排序"></a>例题 8. <a href="https://www.dotcpp.com/oj/problem1044.html">三个字符串的排序</a></h3><p><code>题目描述：</code>输入三个字符串，按由小到大的顺序输出</p><p><code>解题思路：</code></p><blockquote><p>重点知识点：<strong>二维数组</strong>、<strong>指针数组</strong>、<strong>二级指针</strong>、<strong>strcmp 函数</strong></p></blockquote><ol><li>声明一个二维字符数组 <code>char string[i][j]</code>；</li><li>声明一个字符型指针数组 <code>char *p_str[i]</code>，数组内的每个指针先后指向二维字符数组每行的首地址，即 <code>p_str[i]=string[i]</code>；</li><li>声明一个字符型二级指针 <code>**p</code>，指向指针数组的首地址，即 <code>p=p_str</code>；</li><li>声明一个排序函数 <code>void sort</code>，分别传入字符型二级指针变量 <code>char **p</code> 和整型变量 <code>int n</code>，利用 <code>strcmp(str1,str2)</code> 函数两两比较字符串的大小从而进行排序。这里顺带提一下 <code>strcmp</code> 函数的知识点，该函数主要是根据字符串中字符对应的 ASCII 码值对字符串进行判断，然后通过返回函数值体现字符串的大小，不同的函数值对应字符串大小如下：</li></ol><ul><li>如果返回值为<strong>正数</strong>，则 <strong>str1 &gt; str2</strong>；</li><li>如果返回值为 <strong>0</strong>，则 <strong>str1 = str2</strong>；</li><li>如果返回值为<strong>负数</strong>，则 <strong>str1 &lt; str2</strong>。</li></ul><ol><li>在利用 <code>strcmp</code> 函数进行比较排序时，需要声明一个字符型指针 <code>char *temp</code> 作为中间变量，然后通过双重循环和条件 <code>if (strcmp(p[i], p[j]) &gt; 0)&#123;char *temp = p[i];p[i] = p[j];p[j] = temp;&#125;</code> 交换指针数组的值，最终实现字符串从小到大的排序。</li></ol><p><code>注意事项：</code></p><p>需要明确的一个知识点是，利用二级指针比较字符串大小然后进行交换，其实本质上交换的是指针数组的值，也就是指向字符串的地址，而字符串源数据本身不会发生交换。因此，在输出的时候应该输出一级指针 <code>p_str[i]</code> 而不是 <code>string[i]</code>。</p><p><code>示例代码：</code><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE 3 <span class="comment">// 通过宏定义二维数组的行数</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(<span class="type">char</span> **p, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> *temp;                 <span class="comment">// 声明一个作为中间变量的指针</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="comment">// 遍历每个指针数组内的指针</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) <span class="comment">// 从第二个开始与第一个进行比较</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(p[i], p[j]) &gt; <span class="number">0</span>) <span class="comment">// 比较两个字符串的值，如果前面的大于后面的就进行交换（实际交换的是指向字符串的地址）</span></span><br><span class="line">            &#123;</span><br><span class="line">                temp = p[i];</span><br><span class="line">                p[i] = p[j];</span><br><span class="line">                p[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> string[SIZE][<span class="number">1024</span>]; <span class="comment">// 声明二维数组</span></span><br><span class="line">    <span class="type">char</span> *p_str[SIZE];       <span class="comment">// 声明指针数组</span></span><br><span class="line">    <span class="type">char</span> **p;                <span class="comment">// 声明二级指针</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; SIZE; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*  利用gets函数进行输入，相比较于scanf函数的优点就是gets函数会将空格等字符读取而不截断字符串，缺点就是输入一个字符串必须要按一次回车。使用scanf函数，可以使用scanf(&quot;%[^\n]s&quot;,string);语句来解决遇到空格时截断字符串的问题（%[^\n]是说明只有在读入回车符时才终止读取） */</span></span><br><span class="line">        <span class="built_in">gets</span>(string[i]);</span><br><span class="line">        p_str[i] = string[i]; <span class="comment">// 将每个字符串的首地址赋值给指针数组内的元素</span></span><br><span class="line">    &#125;</span><br><span class="line">    p = p_str;     <span class="comment">// 将指针数组的首地址赋值给二级指针</span></span><br><span class="line">    <span class="built_in">sort</span>(p, SIZE); <span class="comment">// 进行排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; SIZE; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(p_str[i]); <span class="comment">// 循环输出字符指针（因为对指针进行了交换，所以输出的值即为排序后的结果）</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>运行结果：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 排序前</span><br><span class="line">cde</span><br><span class="line">afg</span><br><span class="line">abc</span><br><span class="line">// 排序后</span><br><span class="line">abc</span><br><span class="line">afg</span><br><span class="line">cde</span><br></pre></td></tr></table></figure></p><p><code>补充：</code>对于 <code>if (strcmp(p[i], p[j]) &gt; 0)&#123;char *temp = p[i];p[i] = p[j];p[j] = temp;&#125;</code> 存在疑虑（是交换的字符串还是字符串对应的地址），可以试试如下的代码，加深理解：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> **x, <span class="type">int</span> **y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> *temp;</span><br><span class="line">    <span class="keyword">if</span> (**x &lt; **y)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = *x;</span><br><span class="line">        *x = *y;</span><br><span class="line">        *y = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="type">int</span> *pa = &amp;a, *pb = &amp;b;</span><br><span class="line">    <span class="type">int</span> **p_a = &amp;pa, **p_b = &amp;pb;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换前a和b的值为：a=%d, b=%d\n&quot;</span>, a, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换前pa和pb的值为：pa=%x, pb=%x\n&quot;</span>, pa, pb);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换前*pa和*pb的值为：*pa=%d, *pb=%d\n&quot;</span>, *pa, *pb);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换前p_a和p_b的值为：p_a=%x, p_b=%x\n&quot;</span>, p_a, p_b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换前*p_a和*p_b的值为：*p_a=%x, *p_b=%x\n&quot;</span>, *p_a, *p_b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换前**p_a和**p_b的值为：**p_a=%d, **p_b=%d\n&quot;</span>, **p_a, **p_b);</span><br><span class="line">    <span class="built_in">swap</span>(p_a, p_b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------------------------------------------------------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换后a和b的值为：a=%d, b=%d\n&quot;</span>, a, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换后pa和pb的值为：pa=%x, pb=%x\n&quot;</span>, pa, pb);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换后*pa和*pb的值为：*pa=%d, *pb=%d\n&quot;</span>, *pa, *pb);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换后p_a和p_b的值为：p_a=%x, p_b=%x\n&quot;</span>, p_a, p_b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换后*p_a和*p_b的值为：*p_a=%x, *p_b=%x\n&quot;</span>, *p_a, *p_b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换后**p_a和**p_b的值为：**p_a=%d, **p_b=%d\n&quot;</span>, **p_a, **p_b);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果：</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line">交换前<span class="selector-tag">a</span>和<span class="selector-tag">b</span>的值为：<span class="selector-tag">a</span>=<span class="number">2</span>, <span class="selector-tag">b</span>=<span class="number">3</span></span><br><span class="line">交换前pa和pb的值为：pa=<span class="number">855</span>ff8fc, pb=<span class="number">855</span>ff8f8</span><br><span class="line">交换前*pa和*pb的值为：*pa=<span class="number">2</span>, *pb=<span class="number">3</span></span><br><span class="line">交换前p_a和p_b的值为：p_a=<span class="number">855</span>ff8f0, p_b=<span class="number">855</span>ff8e8</span><br><span class="line">交换前*p_a和*p_b的值为：*p_a=<span class="number">855</span>ff8fc, *p_b=<span class="number">855</span>ff8f8</span><br><span class="line">交换前**p_a和**p_b的值为：**p_a=<span class="number">2</span>, **p_b=<span class="number">3</span></span><br><span class="line">-------------------------------------------------------</span><br><span class="line">交换后<span class="selector-tag">a</span>和<span class="selector-tag">b</span>的值为：<span class="selector-tag">a</span>=<span class="number">2</span>, <span class="selector-tag">b</span>=<span class="number">3</span></span><br><span class="line">交换后pa和pb的值为：pa=<span class="number">855</span>ff8f8, pb=<span class="number">855</span>ff8fc</span><br><span class="line">交换后*pa和*pb的值为：*pa=<span class="number">3</span>, *pb=<span class="number">2</span></span><br><span class="line">交换后p_a和p_b的值为：p_a=<span class="number">855</span>ff8f0, p_b=<span class="number">855</span>ff8e8</span><br><span class="line">交换后*p_a和*p_b的值为：*p_a=<span class="number">855</span>ff8f8, *p_b=<span class="number">855</span>ff8fc</span><br><span class="line">交换后**p_a和**p_b的值为：**p_a=<span class="number">3</span>, **p_b=<span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="例题-9-自定义函数之数字后移"><a href="#例题-9-自定义函数之数字后移" class="headerlink" title="例题 9. 自定义函数之数字后移"></a>例题 9. <a href="https://www.dotcpp.com/oj/problem1046.html">自定义函数之数字后移</a></h3><p><code>题目描述：</code>有 n 个整数，使前面各数顺序向后移 m 个位置，最后 m 个数变成前面 m 个数。写一函数：实现以上功能，在主函数中输入 n 个数和输出调整后的 n 个数。</p><p><code>解题思路:</code></p><blockquote><p>重点知识点：<strong>malloc 函数和 free 函数</strong></p></blockquote><ol><li>声明两个指针 <code>a</code> 和 <code>b</code>，应用 <code>int *a = (int *)malloc(sizeof(int) * n)</code> 和 <code>int *b = (int *)malloc(sizeof(int) * n)</code> 在堆上动态分配两块能够容纳 <code>n</code> 个整数的内存，并将该内存块的起始地址赋给指针 <code>a</code> 和 <code>b</code>。其中 <code>a</code> 存放输入的源数据地址，<code>b</code> 存放调整后的数据地址。</li><li>构建一个函数 <code>moveNum</code>，传入 4 个参数，分别是 <code>int *a, int *b, int n, int m</code>，<code>n</code> 为数组长度，<code>m</code> 为移动位置的数值。</li><li>在函数内部，遍历数组 <code>a</code>，根据题目要求，假定 <code>n=10,m=2</code> 时，通过观察发现，数组 <code>a</code> 和数组 <code>b</code> 的之间的关系如下图：</li></ol><p><img src="https://pic.imgdb.cn/item/674c56b5d0e0a243d4dba213.png" alt="例题9示例图"></p><p>遍历完数组 <code>a</code> 后，调整后的数都保存在数组 <code>b</code> 中，在主函数输出 <code>b</code> 即可。</p><p><code>注意事项:</code></p><p>输出后，使用 <code>free(a)</code> 和 <code>free(b)</code> 来释放这两块内存，以防止内存泄漏。</p><p><code>示例代码:</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数用于将数组元素向右移动 m 位</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">moveNum</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b, <span class="type">int</span> n, <span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; m)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 遍历数组a，当i小于移动的长度的数值时，将a[n - m + i]赋值给b[i],元素向右移动 m 位</span></span><br><span class="line">            b[i] = a[n - m + i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 当i大于等于移动的长度的数值时，将a[i - m]赋值给b[i],元素向右移动 m 位</span></span><br><span class="line">            b[i] = a[i - m];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    <span class="comment">// 用户输入数组大小 n</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="comment">// 动态分配内存并创建数组 a</span></span><br><span class="line">    <span class="type">int</span> *a = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>) * n);</span><br><span class="line">    <span class="comment">// 动态分配内存并创建数组 b</span></span><br><span class="line">    <span class="type">int</span> *b = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>) * n);</span><br><span class="line">    <span class="comment">// 用户输入 n 个整数，存储在数组 a 中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 用户输入右移的位数 m</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">    <span class="comment">// 调用函数进行右移操作</span></span><br><span class="line">    <span class="built_in">moveNum</span>(a, b, n, m);</span><br><span class="line">    <span class="comment">// 打印右移后的数组 b 中的元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="comment">// 释放动态分配的内存</span></span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line">    <span class="built_in">free</span>(b);</span><br><span class="line">    <span class="comment">// 暂停程序以查看输出（特定于某些编译器/操作系统）</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果：</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">9</span> <span class="number">10</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span></span><br></pre></td></tr></table></figure><h3 id="例题-10-亲密数"><a href="#例题-10-亲密数" class="headerlink" title="例题 10. 亲密数"></a>例题 10. <a href="https://www.dotcpp.com/oj/problem1122.html">亲密数</a></h3><p><code>题目描述：</code>两个不同的自然数 A 和 B，如果整数 A 的全部因子 (包括 1，不包括 A 本身) 之和等于 B；且整数 B 的全部因子 (包括 1，不包括 B 本身) 之和等于 A，则将整数 A 和 B 称为亲密数。求 3000 以内的全部亲密数。</p><p><code>解题思路：</code></p><ul><li>创建 <code>SumOfFactors</code> 函数：计算一个数的因子和。通过遍历找到所有因子并求和。</li><li>在 <code>main</code> 函数中，创建数组 <code>array</code>，并通过循环计算 3000 以内每个数的因子和，存储在数组 <code>array</code> 中。</li><li>接着，再次循环遍历 <code>array</code> 数组，利用 <code>array[array[i]] == i</code> 条件寻找满足亲和数条件的组合。</li></ul><p><code>注意事项：</code></p><ul><li>计算因子和时，循环的范围可以优化为 <code>i &lt;= num / 2</code>，减少不必要的遍历。</li><li>在数组访问时，要确保不越界，应确保数组下标在有效范围内。</li></ul><p><code>参考代码：</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算一个数的因子和</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SumOfFactors</span><span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">1</span>;  <span class="comment">// 初始化因子和，1是任何数的因子</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= num / <span class="number">2</span>; i++)  <span class="comment">// 从2开始遍历到num的一半，因为大于num的因子不可能了</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (num % i == <span class="number">0</span>)  <span class="comment">// 如果i是num的因子</span></span><br><span class="line">        &#123;</span><br><span class="line">            sum += i;  <span class="comment">// 累加因子</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;  <span class="comment">// 返回因子和</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> array[<span class="number">3001</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">3000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        array[i] = <span class="built_in">SumOfFactors</span>(i);  <span class="comment">// 计算每个数的因子和并存储在数组中</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">3000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (array[i] &lt;= <span class="number">3000</span> &amp;&amp; array[array[i]] == i &amp;&amp; array[i] != i &amp;&amp; array[i] &gt; i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;(%d,%d)&quot;</span>, i, array[i]);  <span class="comment">// 输出亲和数的组合</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);  <span class="comment">// 暂停，等待用户输入后结束程序</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果：</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">220</span>,<span class="number">284</span>)(<span class="number">1184</span>,<span class="number">1210</span>)(<span class="number">2620</span>,<span class="number">2924</span>)</span><br></pre></td></tr></table></figure><h3 id="例题-11-列出最简真分数序列"><a href="#例题-11-列出最简真分数序列" class="headerlink" title="例题 11. 列出最简真分数序列"></a>例题 11. <a href="https://www.dotcpp.com/oj/problem1123.html">列出最简真分数序列</a></h3><p><code>题目描述：</code>按递增顺序依次列出所有分母为 40，分子小于 40 的最简分数。</p><p><code>解题思路：</code></p><p>理解题目含义，可知所有偶数和 5 的倍数都需要进行化简，因此只需要通过循环输出除 1 之外的奇数但不是 5 的倍数的数与 40 的比值即可。以下是解题的思路：</p><ol><li>使用 <code>for</code> 循环，从 1 开始，每次递增 2，直到 <code>i</code> 大于 40，这样可以确保 <code>i</code> 的取值都是奇数。</li><li>在循环中使用条件语句进行判断：<ul><li>如果 <code>i</code> 等于 1，输出 <code>i</code> 和 40 的比值，并以逗号结尾。</li><li>如果 <code>i</code> 不等于 1 且 <code>i</code> 除以 5 的余数不为 0，输出 <code>i</code> 和 40 的比值，并以逗号结尾。</li></ul></li></ol><p><code>注意事项：</code></p><p>在阅读和理解代码的过程中，需要注意以下几点：</p><ol><li>循环条件：理解 <code>for</code> 循环的控制条件，确保循环在正确的范围内运行。</li><li>条件语句：理解条件语句中的逻辑，特别是对奇数和不是 5 的倍数的判断。</li></ol><p><code>参考代码：</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 循环，i从1开始，每次递增2，直到i大于40</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">40</span>; i = i + <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 判断i是否等于1</span></span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果i等于1，打印输出i和40的比值，并以逗号结尾</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d/%d,&quot;</span>, i, <span class="number">40</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果i不等于1且i除以5的余数不为0</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">5</span> != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 打印输出i和40的比值，并以逗号结尾</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d/%d,&quot;</span>, i, <span class="number">40</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打印输出换行符</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 暂停控制台以查看输出结果</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回0，表示程序正常结束</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果：</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>/<span class="number">40</span>,<span class="number">3</span>/<span class="number">40</span>,<span class="number">7</span>/<span class="number">40</span>,<span class="number">9</span>/<span class="number">40</span>,<span class="number">11</span>/<span class="number">40</span>,<span class="number">13</span>/<span class="number">40</span>,<span class="number">17</span>/<span class="number">40</span>,<span class="number">19</span>/<span class="number">40</span>,<span class="number">21</span>/<span class="number">40</span>,<span class="number">23</span>/<span class="number">40</span>,<span class="number">27</span>/<span class="number">40</span>,<span class="number">29</span>/<span class="number">40</span>,<span class="number">31</span>/<span class="number">40</span>,<span class="number">33</span>/<span class="number">40</span>,<span class="number">37</span>/<span class="number">40</span>,<span class="number">39</span>/<span class="number">40</span>,</span><br></pre></td></tr></table></figure><h3 id="例题-12-自定义函数之字符串连接"><a href="#例题-12-自定义函数之字符串连接" class="headerlink" title="例题 12. 自定义函数之字符串连接"></a>例题 12. <a href="https://www.dotcpp.com/oj/problem1032.html">自定义函数之字符串连接</a></h3><p><code>题目描述：</code>写一函数，将两个字符串连接。</p><p><code>解题思路：</code></p><blockquote><p>首先，我想说既然题目中给出自己写一个函数将两个字符串连接，那么出题人的意图应该就是要考生自己编写一个函数实现与 <code>strcat</code> 函数同样的效果，而不是直接引用 <code>strcat</code> 函数，如果直接引用 <code>strcat</code> 函数，那么本题目将毫无测试价值。</p></blockquote><p>我的思路大致如下：</p><ul><li><p>输入两个字符串 <code>str_1</code> 和 <code>str_2</code>，且要求声明字符数组长度时 <code>str_1</code> 的长度大于和等于输入字符串后的 <code>str_1+str_2</code> 的长度。</p></li><li><p>构建函数传入两个字符串 <code>void montage_string(char *string_1, char *string_2)</code>，在函数内部实现如下效果：</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="type">int</span> i = <span class="built_in">strlen</span>(string_1), k = <span class="number">0</span>, j = <span class="built_in">strlen</span>(string_1) + <span class="built_in">strlen</span>(string_2);</span><br><span class="line"><span class="comment">//i等于字符串1的长度，j等于字符串1和字符串2长度的和，从字符串1的最后一个字符string_1[i]（即&#x27;\0&#x27;）开始，将字符串2的第一个字符string_2[k]赋值给字符串1的最后一个字符string_1[i]（即&#x27;\0&#x27;），实现拼接效果</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= j)</span><br><span class="line">    &#123;</span><br><span class="line">        string_1[i++] = string_2[k++];</span><br><span class="line"><span class="comment">//在赋值运算结束以后，i和k自增，当i增加到大于j(即符串1和字符串2长度的和)时，跳出循环</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>运行结果：</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span></span><br><span class="line">abc</span><br><span class="line"><span class="number">123</span>abc</span><br></pre></td></tr></table></figure><h3 id="例题-13-Minesweeper–扫雷"><a href="#例题-13-Minesweeper–扫雷" class="headerlink" title="例题 13. Minesweeper–扫雷"></a>例题 13. <a href="https://www.dotcpp.com/oj/problem1096.html">Minesweeper–扫雷</a></h3><p><code>题目描述：</code>扫雷员你玩过扫雷吗？这个可爱的小游戏附带了一个我们记不起名字的操作系统。游戏的目标是找到所有地雷在一个 <code>MxN</code> 场地内的位置。游戏显示了一个正方形中的数字，它告诉你这个正方形附近有多少地雷。每个正方形最多有八个相邻的正方形。左侧的 <code>4x4</code> 字段包含两个地雷，每个地雷由一个 <code>*</code> 字符表示。如果我们用上面描述的提示数字来表示同一个字段，我们最终得到下边的字段：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*...</span><br><span class="line">....</span><br><span class="line">.*..</span><br><span class="line">....</span><br><span class="line">*<span class="number">100</span></span><br><span class="line"><span class="number">2210</span></span><br><span class="line"><span class="number">1</span>*<span class="number">10</span></span><br><span class="line"><span class="number">1110</span></span><br></pre></td></tr></table></figure><p><code>解题思路：</code></p><ul><li>使用二维字符数组存储地雷信息，<code>*</code> 表示有地雷，<code>.</code> 表示安全。</li><li>确定了行列数后，声明两个二位数组（分别用于存储地雷信息和地雷数量），且在原来的行列数上增加两行两列，确保计算地雷周围数量时不越界。</li><li>读取二位字符数组，将地雷信息转换为二维数组，其中地雷表示为 <code>1</code>，安全表示为 <code>0</code>，然后计算每个格子周围的地雷数量。</li><li>输出每个格子的地雷数量，如果格子本身是地雷就输出 <code>*</code> 表示有地雷。</li></ul><p><code>注意事项：</code></p><ul><li>在计算地雷周围数量时，注意处理边缘情况，确保不越界。</li><li>使用 <code>memset</code> 初始化数组，避免脏数据影响计算。</li><li>在输入中添加判断条件，以确保满足输入条件。</li></ul><p><code>参考代码：</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> M, N, count = <span class="number">0</span>; <span class="comment">// M和N分别表示行数和列数，count用于记录场地数量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环读取输入，直到输入不符合条件</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;M, &amp;N) == <span class="number">2</span> &amp;&amp; M &amp;&amp; N)</span><br><span class="line">    &#123;</span><br><span class="line">        count++; <span class="comment">// 场地数量加一</span></span><br><span class="line">    </span><br><span class="line">        <span class="type">char</span> input[M][N + <span class="number">1</span>];            <span class="comment">// 二维字符数组用于存储输入的地雷信息</span></span><br><span class="line">        <span class="built_in">memset</span>(input, <span class="number">0</span>, <span class="built_in">sizeof</span>(input)); <span class="comment">// 将字符数组初始化为0</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 循环读取每一行地雷信息</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, input[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 增加两行两列，确保了在计算地雷周围的地雷数量时，不会出现数组越界的情况，且能够正确处理地雷场地的边缘情况</span></span><br><span class="line">        <span class="type">int</span> row = M + <span class="number">2</span>, col = N + <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> array[row][col], result[row][col]; <span class="comment">// 二维数组存储地雷信息和地雷数量</span></span><br><span class="line">        <span class="built_in">memset</span>(array, <span class="number">0</span>, <span class="built_in">sizeof</span>(array));       <span class="comment">// 将数组初始化为0</span></span><br><span class="line">        <span class="built_in">memset</span>(result, <span class="number">0</span>, <span class="built_in">sizeof</span>(result));     <span class="comment">// 将数组初始化为0</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 将地雷信息转换为二维数组，1表示有地雷</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (input[i][j] == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    array[i + <span class="number">1</span>][j + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 遍历数组，如果数组元素值为0（取反为真），则计算每个格子周围的地雷数量，即格子周围（左上方=array[i - 1][j - 1]，正上方=array[i - 1][j]，右上方=array[i - 1][j + 1]，左方=array[i][j - 1]，右方=array[i][j + 1]，左下方=array[i + 1][j - 1]，正下方=array[i + 1][j]，右下方=array[i + 1][j + 1]）和格子本身=array[i][j]（值为0）地雷的数量</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= M; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= N; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!array[i][j])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> p = i - <span class="number">1</span>; p &lt;= i + <span class="number">1</span>; p++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> q = j - <span class="number">1</span>; q &lt;= j + <span class="number">1</span>; q++)</span><br><span class="line">                        &#123;</span><br><span class="line">                            result[i][j] += array[p][q];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Field #%d:\n&quot;</span>, count);</span><br><span class="line">        <span class="comment">// 输出每个格子的地雷数量或者 &#x27;*&#x27; 表示有地雷</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= M; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= N; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[i][j])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, result[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果：</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span> <span class="number">4</span></span><br><span class="line">*...</span><br><span class="line">....</span><br><span class="line">.*..</span><br><span class="line">....</span><br><span class="line">Field <span class="selector-id">#1</span>:</span><br><span class="line">*<span class="number">100</span></span><br><span class="line"><span class="number">2210</span></span><br><span class="line"><span class="number">1</span>*<span class="number">10</span></span><br><span class="line"><span class="number">1110</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span> <span class="number">5</span></span><br><span class="line">**...</span><br><span class="line">.....</span><br><span class="line">.*...</span><br><span class="line">Field #<span class="number">2</span>:</span><br><span class="line">**<span class="number">100</span></span><br><span class="line"><span class="number">33200</span></span><br><span class="line"><span class="number">1</span>*<span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span> <span class="number">0</span></span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><h3 id="例题-14-DNA"><a href="#例题-14-DNA" class="headerlink" title="例题 14. DNA"></a>例题 14. <a href="https://www.dotcpp.com/oj/problem1115.html">DNA</a></h3><p><code>题目描述：</code>小强从小就喜欢生命科学，他总是好奇花草鸟兽从哪里来的。终于，小强上中学了，接触到了神圣的名词–<code>DNA</code>. 它有一个双螺旋的结构。这让一根筋的小强抓破头皮，“要是能画出来就好了” 小强喊道。现在就请你帮助他吧。</p><p>解题思路：</p><ul><li>使用嵌套循环遍历每个测试用例。</li><li>在每个测试用例中，使用两层循环分别控制图案的行和列。</li><li>判断当前位置是否应该打印 <code>X</code> 或空格，根据条件确定输出。</li></ul><p><code>示例图解：</code></p><p>通过阅读题目可知，<code>DNA</code> 中 <code>X</code> 刚好出现在对角线上，如果用 <code>a</code> 表示一个单位的 <code>DNA</code> 串的行数，用 <code>i</code> 表示行，用 <code>j</code> 表示列，则是在 <code>j==i</code> 或者 <code>j == a - i - 1</code> 时需要绘制 <code>X</code>。假如生成 3 行重复 1 次，具体如下图所示：</p><p><img src="https://pic.imgdb.cn/item/674c588fd0e0a243d4dba257.png" alt=""></p><p><code>注意事项：</code></p><ul><li>确保输入的测试用例数量在有效范围内。</li><li>注意循环的边界条件，防止数组越界。</li><li>在进行 1 次以上重复绘制的时候，从第二次开始数组索引是从 <code>array[1][1]</code> 开始遍历的。</li><li>在每个测试用例之间用换行符分隔。</li></ul><p><code>参考代码：</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// N: 测试用例数量</span></span><br><span class="line">    <span class="type">int</span> N;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N) == <span class="number">1</span> &amp;&amp; N &gt; <span class="number">0</span> &amp;&amp; N &lt;= <span class="number">15</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 遍历每个测试用例</span></span><br><span class="line">        <span class="keyword">while</span> (N-- &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> a, b;</span><br><span class="line">            <span class="comment">// a: 图案宽度, b: 图案高度</span></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">            <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 循环打印图案的每一行</span></span><br><span class="line">            <span class="keyword">while</span> (b-- &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = flag; i &lt; a; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 循环打印图案的每一列</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; a; j++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 如果 j 等于 i 或者等于 a - i - 1，则打印 &quot;X&quot;，否则打印空格</span></span><br><span class="line">                        <span class="keyword">if</span> (j == i || j == a - i - <span class="number">1</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">&quot;X&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 在每个测试用例之间用换行符分隔</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果：</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="attribute">X</span> <span class="attribute">X</span></span><br><span class="line"> <span class="attribute">X</span></span><br><span class="line"><span class="attribute">X</span> <span class="attribute">X</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span> <span class="number">4</span></span><br><span class="line"><span class="attribute">X</span>   <span class="attribute">X</span></span><br><span class="line"> <span class="attribute">X</span> <span class="attribute">X</span></span><br><span class="line">  <span class="attribute">X</span></span><br><span class="line"> <span class="attribute">X</span> <span class="attribute">X</span></span><br><span class="line"><span class="attribute">X</span>   <span class="attribute">X</span></span><br><span class="line"> <span class="attribute">X</span> <span class="attribute">X</span></span><br><span class="line">  <span class="attribute">X</span></span><br><span class="line"> <span class="attribute">X</span> <span class="attribute">X</span></span><br><span class="line"><span class="attribute">X</span>   <span class="attribute">X</span></span><br><span class="line"> <span class="attribute">X</span> <span class="attribute">X</span></span><br><span class="line">  <span class="attribute">X</span></span><br><span class="line"> <span class="attribute">X</span> <span class="attribute">X</span></span><br><span class="line"><span class="attribute">X</span>   <span class="attribute">X</span></span><br><span class="line"> <span class="attribute">X</span> <span class="attribute">X</span></span><br><span class="line">  <span class="attribute">X</span></span><br><span class="line"> <span class="attribute">X</span> <span class="attribute">X</span></span><br><span class="line"><span class="attribute">X</span>   <span class="attribute">X</span></span><br></pre></td></tr></table></figure><h3 id="例题-15-自守数问题"><a href="#例题-15-自守数问题" class="headerlink" title="例题 15. 自守数问题"></a>例题 15. <a href="https://www.dotcpp.com/oj/problem1144.html">自守数问题</a></h3><p><code>题目描述：</code>自守数是指一个数的平方的尾数等于该数自身的自然数。例如：25^2=625， 76^2=5776， 9376^2=87909376。请求出 200000 以内的自守数？</p><p><code>解题思路：</code></p><p>从 0 开始遍历到 200000，然后设计一个判断自守数函数 <code>IsAutomorphicNumber</code> ，将遍历的每个数字 <code>num</code> 作为参数输入，在函数内部进行判断，将判断结果返回一个整型值，1 表示是自守数，0 表示不是自守数。函数内部具体实现：</p><ul><li><strong>初始化标志 <code>flag</code> 为 1：</strong> 表示一开始默认是自守数。</li><li><strong>计算传入数字的平方：</strong> 将输入数字 <code>num</code> 的平方存储在 <code>square</code> 中。</li><li>循环判断每一位数字：<ul><li>通过 <code>while (num)</code> 循环，用 <code>t_num = num % 10</code> 取数字的末位，用 <code>t_square = square % 10</code> 取平方的末位</li><li>如果 <code>t_num</code> 不等于 <code>t_square</code>，将标志 <code>flag</code> 设为 <code>0</code>，表示不是自守数，然后跳出循环。</li><li>如果未跳出循环，继续将 <code>num</code> 和 <code>square</code> 向右移动一位（通过 <code>num /= 10</code> 和 <code>square /= 10</code> 实现），以处理下一位数字。</li><li>如果循环一直进行，直到传入的数字 <code>num</code> 为 <code>0</code> 时，循环停止，此时 <code>flag</code> 仍然为 <code>1</code>，则表示 <code>num</code> 为自守数。</li></ul></li><li><strong>返回标志 <code>flag</code>：</strong> 标志最终表示是否为自守数。</li></ul><p>注意事项：</p><ul><li><strong>数据类型：</strong> 使用 <code>long long int</code> 数据类型，因为计算数字平方可能会导致溢出，尤其是对于较大的数字。</li><li><strong>循环范围：</strong> 注意循环的范围，确保在合适的范围内检查自守数。</li></ul><p><code>参考代码：</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数：判断是否为自守数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">IsAutomorphicNumber</span><span class="params">(<span class="type">long</span> <span class="type">long</span> <span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">1</span>;                     <span class="comment">// 初始化标志为1，表示是自守数</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> square = num * num; <span class="comment">// 计算数字的平方</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环判断每一位数字</span></span><br><span class="line">    <span class="keyword">while</span> (num)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> t_num = num % <span class="number">10</span>;       <span class="comment">// 取数字的个位</span></span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> t_square = square % <span class="number">10</span>; <span class="comment">// 取平方的个位</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 判断个位数字是否相同</span></span><br><span class="line">        <span class="keyword">if</span> (t_num != t_square)</span><br><span class="line">        &#123;</span><br><span class="line">            flag = <span class="number">0</span>; <span class="comment">// 如果个位数字不同，将标志设置为0，表示不是自守数</span></span><br><span class="line">            <span class="keyword">break</span>;    <span class="comment">// 跳出循环</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 缩小范围，处理下一位数字</span></span><br><span class="line">        num /= <span class="number">10</span>;</span><br><span class="line">        square /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag; <span class="comment">// 返回判断结果</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 循环检查0到200000之间的数字</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">200000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 调用自守数判断函数，如果是自守数则输出</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">IsAutomorphicNumber</span>(i))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld  &quot;</span>, i); <span class="comment">// 输出自守数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果：</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">25</span>  <span class="number">76</span>  <span class="number">376</span>  <span class="number">625</span>  <span class="number">9376</span>  <span class="number">90625</span>  <span class="number">109376</span>  请按任意键继续. . .</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
          <category> 刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 刷题笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法学习笔记</title>
      <link href="/2023/01/26/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/01/26/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="算法学习笔记🐌"><a href="#算法学习笔记🐌" class="headerlink" title="算法学习笔记🐌"></a>算法学习笔记🐌</h1><hr><p><span style="color:#FF3333;">算法</span>一词代指解决问题的方法，换句话说，算法提供了一整套解决问题的方案或者思路，即先做什么，再做什么，最后做什么。学习算法，可以短时间内快速提升我们“遇到问题，解决问题”的能力。</p><blockquote><p>笔记大部分内容和图例转载自<a href="http://c.biancheng.net/">C语言中文网</a>，感谢站长的付出。</p></blockquote><h2 id="一、基础算法"><a href="#一、基础算法" class="headerlink" title="一、基础算法"></a>一、基础算法</h2><h3 id="（一）二分查找"><a href="#（一）二分查找" class="headerlink" title="（一）二分查找"></a>（一）二分查找</h3><ul><li><code>定义</code>：二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。但是，折半查找要求线性表必须采用<a href="https://baike.baidu.com/item/顺序存储结构/1347176?fromModule=lemma_inlink">顺序存储结构</a>，而且表中元素按索引有序排列。</li><li><code>局限性</code>：1. Sorted（单调递增或者递减）；2. Bounded（存在上下边界）；3. Accessible by index（能够通过索引访问）。</li><li><code>算法复杂度</code>：二分查找的基本思想是将n个元素分成大致相等的两部分，取a[n/2]与x(目标值)做比较，如果x=a[n/2],则找到x,算法中止；如果x<a[n/2],则只要在数组a的左半部分继续搜索x,如果x>a[n/2],则只要在数组a的右半部搜索x。</li><li><code>伪代码</code>：如下用给大家展示了二分查找算法的具体实现过程：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入 arr<span class="punctuation">[</span><span class="punctuation">]</span>                                    <span class="comment">// 输入有序序列</span></span><br><span class="line">binary_search( arr <span class="punctuation">,</span> begin <span class="punctuation">,</span> end <span class="punctuation">,</span> target)<span class="punctuation">:</span>  <span class="comment">// [begin,end]指定搜索区域，target为要搜索的目标元素</span></span><br><span class="line">    if begin &gt; end<span class="punctuation">:</span>                          <span class="comment">// [begin,end]不存在时，返回一个错误值（比如-1）</span></span><br><span class="line">        return <span class="number">-1</span></span><br><span class="line">    mid &lt;- ⌊ begin+(end-begin)/<span class="number">2</span> ⌋           <span class="comment">// 找到[begin,end]区域内中间元素所在位置的下标</span></span><br><span class="line">    if target == arr<span class="punctuation">[</span>mid<span class="punctuation">]</span><span class="punctuation">:</span>                   <span class="comment">// 递归的出口，即target和中间元素的值相等</span></span><br><span class="line">        return mid</span><br><span class="line">    if target ＜ arr<span class="punctuation">[</span>mid<span class="punctuation">]</span><span class="punctuation">:</span>                   <span class="comment">// 比较target和中间元素的值，进一步缩小搜索区域</span></span><br><span class="line">        return binary_search(arr <span class="punctuation">,</span> begin <span class="punctuation">,</span> mid<span class="number">-1</span> <span class="punctuation">,</span> target)</span><br><span class="line">    else<span class="punctuation">:</span></span><br><span class="line">        return binary_search(arr <span class="punctuation">,</span> mid+<span class="number">1</span> <span class="punctuation">,</span> end <span class="punctuation">,</span> target)</span><br></pre></td></tr></table></figure><ul><li><code>示例代码</code>:C语言用二分查找算法找出目标值索引的示例代码如下：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">binary_search</span><span class="params">(<span class="type">int</span> *arr, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> mid = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (left &gt; right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 如果[left,right] 不存在，返回 -1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 找到中间元素所在的位置,使用(left+right)/2会有整数溢出的问题问题会出现在当left+right的结果大于表达式结果类型所能表示的最大值时，这样，产生溢出后再除2是不会产生正确结果的，而left + (right - left) / 2不存在这个问题 */</span></span><br><span class="line">mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (target == arr[mid])  <span class="comment">// 递归的出口</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (target &lt; arr[mid])  <span class="comment">// 比较 target 和 arr[mid] 的值，缩小 target 可能存在的区域</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">binary_search</span>(arr, left, mid - <span class="number">1</span>, target);  <span class="comment">// 新的搜索区域为 [left,mid-1]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">binary_search</span>(arr, mid + <span class="number">1</span>, right, target);  <span class="comment">// 新的搜索区域为 [mid+1,right]</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">binary_search</span><span class="params">(<span class="type">int</span> *arr, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> target)</span></span>;</span><br><span class="line"><span class="type">int</span> Array[<span class="number">10</span>] = &#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">19</span>&#125;;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">sizeof</span>(Array) / <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line"><span class="type">int</span> left = <span class="number">0</span>, right = len - <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> target;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Array[10] = &#123;1, 4, 7, 8, 9, 12, 13, 16, 18, 19&#125;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;在上面数组中挑一个数输入按回车键，可查找其索引值：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;target);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;索引值为%d\n&quot;</span>, <span class="built_in">binary_search</span>(Array, left, right, target));</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（二）分治算法"><a href="#（二）分治算法" class="headerlink" title="（二）分治算法"></a>（二）分治算法</h3><ul><li><p><code>定义</code>：“分治”即“分而治之”的意思。分治算法解决问题的思路是：先将整个问题拆分成多个相互独立且数据量更少的小问题，通过逐一解决这些简单的小问题，最终找到解决整个问题的方案。</p><blockquote><p>所谓问题间相互独立，简单理解就是每个问题都可以单独处理，不存在“谁先处理，谁后处理”的次序问题。</p></blockquote></li><li><p><code>局限性</code>:使用分治算法解决的问题都具备这样的特征，当需要处理的数据量很少时，问题很容易就能解决，随着数据量增多，问题的解决难度也随之增大。</p><p>分治算法的弊端也很明显，该算法经常和递归算法搭配使用，整个解决问题的过程会耗费较多的时间和内存空间，严重时还可能导致程序运行崩溃。</p></li><li><p><code>示例图</code>：分治算法找数组的最大值和最小值：不断地等分数组中的元素，直至各个分组中元素的个数 ≤2。由于每个分组内的元素最多有 2 个，很容易就可以找出其中的最值（最大值或最小值），然后这些最值再进行两两比较，最终找到的最值就是整个数组中的最值。下图展示了用分治算法查找 {3, 7, 2, 1} 中最大值的实现过程：</p><p><img src="https://pic.imgdb.cn/item/674c5986d0e0a243d4dba26d.gif" alt=""></p></li><li><code>伪代码</code>：如下是分治算法求数组中最大值的:</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入 arr<span class="punctuation">[</span><span class="number">1.</span>..n<span class="punctuation">]</span>            <span class="comment">// 输入n个数字</span></span><br><span class="line">arr_max(x <span class="punctuation">,</span> y) <span class="punctuation">:</span>          <span class="comment">// 设计一个递归函数，[x,y] 用来限定查找最大数的范围</span></span><br><span class="line">    if y-x ≤ <span class="number">1</span> <span class="punctuation">:</span>          <span class="comment">// 如果y-x的值小于等于1，则比较 arr[x]和arr[y]的值，大的就是最大值 </span></span><br><span class="line">        return max(arr<span class="punctuation">[</span>x<span class="punctuation">]</span> <span class="punctuation">,</span> arr<span class="punctuation">[</span>y<span class="punctuation">]</span>)</span><br><span class="line">    else <span class="punctuation">:</span></span><br><span class="line">    <span class="comment">// 将[x,y]区域划分为[x,⌊(x+y)/2⌋ ]和[⌊(x+y)/2+1⌋,y] 两个区域，求出两个区域内各自的最大值</span></span><br><span class="line">        max1 = arr_max(x <span class="punctuation">,</span> ⌊(x+y)/<span class="number">2</span>⌋ )  </span><br><span class="line">        max2 = arr_max( ⌊(x+y)/<span class="number">2</span>+<span class="number">1</span>⌋ <span class="punctuation">,</span> y)</span><br><span class="line">    return max(max1 <span class="punctuation">,</span> max2)   <span class="comment">// 比较两个区域的最大值，最终找出[x,y] 中的最大值</span></span><br></pre></td></tr></table></figure><ul><li><code>示例代码</code>：C语言用分治算法实现“求数组中最大值”的代码如下：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_max</span><span class="params">(<span class="type">int</span> *arr, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> max_left = <span class="number">0</span>, max_right = <span class="number">0</span>, middle = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 如果数组不存在</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (right - left == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> arr[left];  <span class="comment">// 如果查找范围中仅有一个数字</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (right - left &lt;= <span class="number">1</span>)  <span class="comment">// 如果查找范围中有 2 个数字，直接比较即可</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[left] &gt;= arr[right])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> arr[left];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr[right];</span><br><span class="line">    &#125;</span><br><span class="line">    middle = (right - left) / <span class="number">2</span> + left;  <span class="comment">// 等量划分成 2 个区域</span></span><br><span class="line">    max_left = <span class="built_in">get_max</span>(arr, left, middle);  <span class="comment">// 得到左侧区域中的最大值</span></span><br><span class="line">    max_right = <span class="built_in">get_max</span>(arr, middle + <span class="number">1</span>, right);  <span class="comment">// 得到右侧区域中的最大值</span></span><br><span class="line">    <span class="keyword">if</span> (max_left &gt;= max_right)    <span class="comment">// 比较左、右两侧的最大值，找到 [left,right] 整个区域的最大值</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> max_left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> max_right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get_max</span><span class="params">(<span class="type">int</span> *arr, <span class="type">int</span> left, <span class="type">int</span> right)</span></span>;</span><br><span class="line">    <span class="type">int</span> Arr[<span class="number">6</span>] = &#123;<span class="number">3</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="type">int</span> result = <span class="built_in">get_max</span>(Arr, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, result);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（三）排序算法"><a href="#（三）排序算法" class="headerlink" title="（三）排序算法"></a>（三）排序算法</h3><h4 id="◆-桶排序"><a href="#◆-桶排序" class="headerlink" title="◆ 桶排序"></a><strong>◆ 桶排序</strong></h4><ul><li><code>定义</code>：桶排序（又称箱排序）是一种基于分治思想、效率很高的排序算法。</li><li><p><code>思路</code>：假设一种场景，对 {5, 2, 1, 4, 3} 进行升序排序，桶排序算法的实现思路是：</p><p>  1.准备5个桶，从1~5对它们进行编号；</p><p>  2.将待排序序列的各个元素放置到相同编号的桶中；</p><p>  3.从1号桶开始，依次获取桶中放置的元素，得到的就是一个升序序列。</p></li><li><p><code>时间复杂度</code>：理想情况下对应的时间复杂度为O(n)。</p></li><li><code>示例代码</code>：只有一种元素的情况下，C语言桶排序示例代码如下：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUM 101 <span class="comment">// 0~100内的整数，则需要101个桶</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i, j, t;</span><br><span class="line">    <span class="type">int</span> mark[NUM];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= NUM - <span class="number">1</span>; i++) <span class="comment">// 0~100号标记桶，初始化为0</span></span><br><span class="line">    &#123;</span><br><span class="line">        mark[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入需要排序的个数：&quot;</span>); <span class="comment">// 表示接下来有n个数排序</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入%d个0~100的整数：\n&quot;</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t); <span class="comment">// 此处是关键，对输入的数，找到对应的桶进行标记和计数</span></span><br><span class="line">        mark[t]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;从小到大排序结果为：\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= NUM - <span class="number">1</span>; i++) <span class="comment">// 遍历全部桶，每个桶计数为多少，就输出多少次</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= mark[i]; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%-3d&quot;</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;从大到小排序结果为：\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = NUM - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= mark[i]; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%-3d&quot;</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="◆-冒泡排序"><a href="#◆-冒泡排序" class="headerlink" title="◆ 冒泡排序"></a><strong>◆ 冒泡排序</strong></h4><ul><li><code>定义</code>：冒泡排序(Bubble_sort)是所有排序算法中最简单、最易实现的算法，有时也称为==起泡排序==算法。使用冒泡排序算法对n个数据进行排序。</li><li><code>思路</code>：从待排序序列中找出一个最大值或最小值，这样的操作执行n-1次，最终就可以得到一个有序序列。</li><li><code>时间复杂度</code>:（n-1）^2^，记为O(n^2^)。</li><li><code>伪代码</code>：如下是冒泡排序算法实现升序排序：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Bubble_sort(list)<span class="punctuation">:</span>                <span class="comment">//list表示待排序序列</span></span><br><span class="line">    for i &lt;- <span class="number">0</span> to length(list)<span class="number">-1</span><span class="punctuation">:</span> <span class="comment">//对元素个数为n的list序列，需遍历n-1次，这里用[0,length(list)-1)表示</span></span><br><span class="line">        for j &lt;- <span class="number">1</span> to length(list) - i<span class="punctuation">:</span>    <span class="comment">// 从第1个元素开始遍历，遍历区间为[1,length(list)-i)</span></span><br><span class="line">            if list<span class="punctuation">[</span>j<span class="punctuation">]</span> &gt; list<span class="punctuation">[</span>j+<span class="number">1</span><span class="punctuation">]</span><span class="punctuation">:</span>        <span class="comment">// 若进行降序排序，则改成&lt;小于号</span></span><br><span class="line">                 swap(list<span class="punctuation">[</span>j<span class="punctuation">]</span> <span class="punctuation">,</span> list<span class="punctuation">[</span>j+<span class="number">1</span><span class="punctuation">]</span>) <span class="comment">// 交换2个相邻元素的位置</span></span><br><span class="line">    return list                            <span class="comment">// 返回排好序的序列</span></span><br></pre></td></tr></table></figure><ul><li><code>示例代码</code>：C语言冒泡排序降序示例代码如下：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Bubble_sort</span><span class="params">(<span class="type">int</span> *array, <span class="type">int</span> n)</span> <span class="comment">//实现冒泡降序排序算法的函数，array为待排序数组，n为数组元素个数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i, j, temp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) <span class="comment">//n个元素，遍历n-1次，相邻两数两两向后遍历，n个数只需遍历n-1次就行</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++)  <span class="comment">// 从第1个元素开始遍历，遍历至n-1-i</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[j] &lt; array[j + <span class="number">1</span>]) <span class="comment">//比较相邻两数的大小，进行元素位置交换</span></span><br><span class="line">            &#123;</span><br><span class="line">                temp = array[j];</span><br><span class="line">                array[j] = array[j + <span class="number">1</span>];</span><br><span class="line">                array[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Bubble_sort</span><span class="params">(<span class="type">int</span> *array, <span class="type">int</span> n)</span></span>;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入排序的元素个数：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="type">int</span> *array = (<span class="type">int</span> *)<span class="built_in">malloc</span>(n * <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入%d个数进行排序：&quot;</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;array[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Bubble_sort</span>(array, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%-3d&quot;</span>, array[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(array);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（四）递归算法"><a href="#（四）递归算法" class="headerlink" title="（四）递归算法"></a>（四）递归算法</h3><ul><li><code>定义</code>：将函数（方法）调用自身的过程称为递归，调用自身的函数称为递归函数，用递归方式解决问题的算法称为递归算法。涉及==栈==的知识，即“先进后出”。下图展示了函数递归调用的底层实现过程：</li></ul><p><img src="https://pic.imgdb.cn/item/674c595dd0e0a243d4dba265.gif" alt=""></p><ul><li><code>局限性</code>：设计递归函数时，我们必须为它设置一个结束递归的“出口”，否则函数会一直调用自身（死循环），直至运行崩溃。</li><li><code>伪代码</code>：分两种情况==直接调用==和==间接调用==：</li></ul><blockquote><p>直接调用自身</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int funciton(<span class="comment">/*...*/</span>) <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">    <span class="comment">//调用自身</span></span><br><span class="line">    function(<span class="comment">/*...*/</span>);</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>间接调用自身</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int funciton1(<span class="comment">/*...*/</span>) <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">    <span class="comment">//调用另一个函数</span></span><br><span class="line">    function2(<span class="comment">/*...*/</span>);</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">int function2(<span class="comment">/*...*/</span>) <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">    <span class="comment">//调用function1()函数</span></span><br><span class="line">    funciton1(<span class="comment">/*...*/</span>);</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>示例代码</code>：C语言递归算法求 <code>n!</code>示例代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">factorial</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">0</span>) <span class="comment">// 递归的出口</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n * <span class="built_in">factorial</span>(n - <span class="number">1</span>); <span class="comment">// 函数调用自身</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入一个数，求阶乘值：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d! = %d\n&quot;</span>, n, <span class="built_in">factorial</span>(n));</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（五）贪心算法"><a href="#（五）贪心算法" class="headerlink" title="（五）贪心算法"></a>（五）贪心算法</h3><ul><li><code>定义</code>：每一步都力求最大限度地解决问题，每一步都选择的是当前最优的解决方案，这种解决问题的算法就是贪心算法。</li><li><code>局限性</code>：虽然贪心算法每一步都是最优的解决方案，但整个算法并不一定是最优的。总的来讲，贪心算法注重的是每一步选择最优的解决方案（又称“局部最优解”），并不关心整个解决方案是否最优。</li><li><code>示例代码</code>：C语言谈心算法求==小孩分糖==问题示例代码如下：</li></ul><blockquote><p>题目引用自LeetCode<a href="https://leetcode.cn/problems/assign-cookies/">第455题</a></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Bubble_sort</span><span class="params">(<span class="type">int</span> *array, <span class="type">int</span> lenth)</span> <span class="comment">// 排序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i, j, temp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; lenth - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; lenth - i - <span class="number">1</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[j] &gt; array[j + <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                temp = array[j];</span><br><span class="line">                array[j] = array[j + <span class="number">1</span>];</span><br><span class="line">                array[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find_target</span><span class="params">(<span class="type">int</span> *child, <span class="type">int</span> child_len, <span class="type">int</span> *candy, <span class="type">int</span> candy_len)</span> <span class="comment">// 计算满足小孩需求的最大数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Bubble_sort</span>(child, child_len);  <span class="comment">// 小孩需求从小到大排序</span></span><br><span class="line">    <span class="built_in">Bubble_sort</span>(candy, candy_len);  <span class="comment">// 糖果大小从小到大排序</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;                      <span class="comment">// 小孩需求索引</span></span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;                      <span class="comment">// 糖果索引</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; child_len &amp;&amp; j &lt; candy_len) <span class="comment">// 糖果和小孩都没有完成尝试时，循环进行</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (candy[j] &gt;= child[i]) <span class="comment">// 小孩需求被满足时剔除，让下一个小孩继续尝试</span></span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        j++;  <span class="comment">// 糖果无论小孩需求满足与否，糖果都要逐个剔除</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Bubble_sort</span><span class="params">(<span class="type">int</span> *array, <span class="type">int</span> lenth)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find_target</span><span class="params">(<span class="type">int</span> *child, <span class="type">int</span> child_len, <span class="type">int</span> *candy, <span class="type">int</span> candy_len)</span></span>;</span><br><span class="line">    <span class="type">int</span> child[<span class="number">6</span>] = &#123;<span class="number">6</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">16</span>, <span class="number">10</span>&#125;;     <span class="comment">// 小孩需求大小</span></span><br><span class="line">    <span class="type">int</span> candy[<span class="number">5</span>] = &#123;<span class="number">7</span>, <span class="number">2</span>, <span class="number">21</span>, <span class="number">4</span>, <span class="number">9</span>&#125;;           <span class="comment">// 糖果大小</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最大可满足%d个小孩的需求\n&quot;</span>, <span class="built_in">find_target</span>(child, <span class="number">6</span>, candy, <span class="number">5</span>));</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
