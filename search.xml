<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>隐藏PowerShell欢迎页/开头标语/欢迎信息💻</title>
      <link href="/2025/04/16/%E9%9A%90%E8%97%8FPowerShell%E6%AC%A2%E8%BF%8E%E9%A1%B5%E5%BC%80%E5%A4%B4%E6%A0%87%E8%AF%AD%E6%AC%A2%E8%BF%8E%E4%BF%A1%E6%81%AF/"/>
      <url>/2025/04/16/%E9%9A%90%E8%97%8FPowerShell%E6%AC%A2%E8%BF%8E%E9%A1%B5%E5%BC%80%E5%A4%B4%E6%A0%87%E8%AF%AD%E6%AC%A2%E8%BF%8E%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="yin-cang-power-shell-huan-ying-ye-kai-tou-biao-yu-huan-ying-xin-xi">隐藏 PowerShell 欢迎页/开头标语/欢迎信息</h1><p><img src="https://bu.dusays.com/2025/04/16/67ff8b9455f49.png" alt="隐藏开头标语"></p><p>打开 Windows Terminal 添加参数<code>-nologo</code></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> PowerShell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> PowerShell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 24.04 部署文件服务器--File Browser💾</title>
      <link href="/2025/01/04/Ubuntu%2024.04%20%E9%83%A8%E7%BD%B2File%20Browser/"/>
      <url>/2025/01/04/Ubuntu%2024.04%20%E9%83%A8%E7%BD%B2File%20Browser/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="yi-file-browser-jie-shao">一、File Browser介绍</h1><p><code>File Browser</code>是一个使用<code>go</code>语言编写的软件，功能是可以通过浏览器对服务器上的文件进行管理。</p><h2 id="1-1-file-browser-gong-neng" id="1-1-File-Browser功能">1.1 File Browser功能</h2><ul class="lvl-0"><li class="lvl-2"><p>创建文本类文件或文件夹</p></li><li class="lvl-2"><p>修改文件名或文本类文件内容</p></li><li class="lvl-2"><p>文件删除、移动与复制</p></li><li class="lvl-2"><p>文件上传与下载、文件分享</p></li></ul><h2 id="1-2-file-browser-shi-yong-chang-jing" id="1-2-File-Browser使用场景">1.2 File Browser使用场景</h2><ul class="lvl-0"><li class="lvl-2"><p>使用<code>File Browser</code>可以在远程服务器上直接浏览文件和文件夹，无需登录到服务器终端。</p></li><li class="lvl-2"><p>可以通过<code>File Browser</code>来上传、下载和删除文件，方便管理和共享文件。</p></li><li class="lvl-2"><p>在团队协作中，可以使用<code>File Browser</code>来共享文件夹和文件，并设置不同的访问权限，方便团队成员之间的文件共享和管理。</p></li><li class="lvl-2"><p>在服务器上进行文件备份时，可以使用<code>File Browser</code>来浏览、复制和移动文件，提高文件管理的效率。</p></li><li class="lvl-2"><p>使用<code>File Browser</code>可以对文件和文件夹进行重命名、压缩和解压缩操作，方便进行文件操作和管理。</p></li><li class="lvl-2"><p>在需要远程访问服务器文件时，可以使用<code>File Browser</code>通过浏览器访问服务器上的文件，而无需使用其他远程桌面软件或命令行工具。</p></li><li class="lvl-2"><p>可以通过<code>File Browser</code>来创建和编辑文本文件，方便编辑服务器上的配置文件或其他文本文件。</p></li><li class="lvl-2"><p>在服务器上进行文件搜索时，可以使用<code>File Browser</code>来快速搜索指定的文件或文件夹，提高搜索效率。</p></li><li class="lvl-2"><p>在需要查看服务器上特定文件内容时，可以使用<code>File Browser</code>进行文件预览，避免下载文件后再进行查看。</p></li></ul><h1 id="er-ben-di-huan-jing-jie-shao">二、本地环境介绍</h1><p>本次实践为个人虚拟机测试环境，操作系统版本为<code>ubuntu 24.04</code>。</p><table><thead><tr><th style="text-align:center">hostname</th><th style="text-align:center">本地IP地址</th><th style="text-align:center">操作系统版本</th><th style="text-align:center">File Browser版本</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">colour-ubuntu</td><td style="text-align:center">192.168.5.229</td><td style="text-align:center">ubuntu 24.04</td><td style="text-align:center">v2.31.2/129a4fd3</td><td style="text-align:center">系统已关闭防火墙</td></tr></tbody></table><h1 id="san-an-zhuang-file-browser">三、安装File Browser</h1><h2 id="3-1-chuang-jian-mu-lu" id="3-1-创建目录">3.1 创建目录</h2><p>创建部署目录<code> /data/filebrowser</code>，并进入目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/filebrowser  &amp;&amp; cd /data/filebrowser</span><br></pre></td></tr></table></figure><h2 id="3-2-xia-zai-an-zhuang-bao" id="3-2-下载安装包">3.2 下载安装包</h2><p>执行以下命令，下载<code>File Browser</code>软件包，<a href="https://github.com/filebrowser/filebrowser/releases/tag/v2.31.2">github地址</a>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/filebrowser/filebrowser/releases/download/v2.31.2/linux-amd64-filebrowser.tar.gz</span><br></pre></td></tr></table></figure><p>这里我选择的是<code>v2.31.2</code>最新版本，若想下载历史版本只需要修改版本号即可。</p><h2 id="3-3-jie-ya-ruan-jian-bao" id="3-3-解压软件包">3.3 解压软件包</h2><p>执行以下命令，解压<code>File Browser</code>软件包。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzf linux-amd64-filebrowser.tar.gz</span><br></pre></td></tr></table></figure><p>解压后，将二进制文件<code>filebrowser</code>复制到<code>/usr/bin/</code>目录下，方便我们使用和操作<code>filebrowser</code>相关命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -a  filebrowser /usr/bin/filebrowser</span><br></pre></td></tr></table></figure><p>查看版本号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filebrowser version</span><br></pre></td></tr></table></figure><p>显示结果如下：</p><p><img src="https://bu.dusays.com/2025/01/04/6778aba439344.png" alt="image-20250104113141996"></p><h1 id="si-pei-zhi-file-browser-cheng-xu">四、配置File Browser程序</h1><h2 id="4-1-chu-shi-hua-shu-ju-ku" id="4-1-初始化数据库">4.1 初始化数据库</h2><p>执行以下命令，初始化数据库。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./filebrowser -d /data/filebrowser/filebrowser.db config init </span><br></pre></td></tr></table></figure><h2 id="4-2-pei-zhi-filebrowser-fu-wu" id="4-2-配置filebrowser服务">4.2 配置filebrowser服务</h2><p>我们可以使用<code>filebrowser</code>命令修改<code>filebrowser</code>服务的相关参数，修改<code>filebrowser</code>服务监听地址为<code>0.0.0.0</code>，可以执行以下命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./filebrowser -d /data/filebrowser/filebrowser.db config set --address 0.0.0.0</span><br></pre></td></tr></table></figure><p>修改<code>filebrowser</code>服务监听端口为<code>9988</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./filebrowser -d /data/filebrowser/filebrowser.db config set --port 9988</span><br></pre></td></tr></table></figure><p>执行以下命令，设置中文语言。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./filebrowser -d /data/filebrowser/filebrowser.db config set --locale zh-cn</span><br></pre></td></tr></table></figure><p>执行以下命令，设置日志路径。(可执行，可不执行默认会在当前目录创建此文件)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./filebrowser -d /data/filebrowser/filebrowser.db config set  --log /data/filebrowser/filebrowser.log</span><br></pre></td></tr></table></figure><p>设置<code>File Browser</code>登录账号密码默认为<code>admin/admin</code>下面命令可以手动配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./filebrowser -d /data/filebrowser/filebrowser.db users add admin admin --perm.admin</span><br></pre></td></tr></table></figure><h2 id="4-3-qi-dong-filebrowser-fu-wu" id="4-3-启动filebrowser服务">4.3 启动filebrowser服务</h2><p>上面配置步骤完成后，输入<code>filebrowser</code>启动<code>filebrowser</code>服务，启动后的如下图所示表示启动成功：</p><p><img src="https://bu.dusays.com/2025/01/04/6778ad8e6bfee.png" alt="image-20250104113959373"></p><p>然后在浏览器输入<code>http://192.168.5.229:9988/</code>（这里端口号前的IP请根据自己服务器实际IP填写），打开后如下图所示：</p><p><img src="https://bu.dusays.com/2025/01/04/6778ae3776aec.png" alt="image-20250104114248421"></p><p>输入用户名<code>admin</code>和密码<code>admin</code>即可进入主页，如下图所示：</p><p><img src="https://bu.dusays.com/2025/01/04/6778aeadb9109.png" alt="image-20250104114446466"></p><blockquote><p>此时，表明所有配置已完成，但是还有一个问题，目前这种情况，系统每次启动我们都要手动启动<code>filebrowser</code>服务很麻烦，下面我们创建自启动服务，在系统开机是自启动<code>filebrowser</code>服务。</p></blockquote><h1 id="wu-shi-yong-systemctl-guan-li-filebrowser-fu-wu">五、使用systemctl 管理 filebrowser服务</h1><h2 id="5-1-chuang-jian-filebrowser-json-pei-zhi-wen-jian" id="5-1-创建filebrowser-json配置文件">5.1 创建filebrowser.json配置文件</h2><p>新建<code>filebrowser.json</code>配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch filebrowser.json</span><br></pre></td></tr></table></figure><p>执行<code>vim filebrowser.json</code>命令，输入如下配置内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">9988</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;database&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/data/filebrowser/filebrowser.db&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;log&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/data/filebrowser/filebrowser.log&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;locale&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zh-cn&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;admin&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;admin&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;root&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/data/filebrowser/shareflies/&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>配置中其他参数与上文配置参数一直即可，只有<code>root</code>参数需要说明一下，就是打开<code>http://192.168.5.229:9988/</code>后加载的根目录文件目录。如果我们不设置的话默认加载的是<code>filebrowser</code>（如上图）， 这样有可能会出现误删配置文件等，是有风险的，不推荐这样写。 可在<code>filebrowser</code>目录新建<code>shareflies</code>目录（也可根据自己的情况进行更改），这样启动后加载的就是<code>shareflies</code>目录。</p><h2 id="5-2-chuang-jian-filebrowser-fu-wu" id="5-2-创建filebrowser服务">5.2 创建filebrowser服务</h2><p>执行<code>vim /etc/systemd/system/filebrowser.service</code>命令，创建<code>filebrowser</code>服务，然后输入如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=filebrowser</span><br><span class="line">Documentation=https://filebrowser.org/</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/data/filebrowser/filebrowser -c /data/filebrowser/filebrowser.json</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h2 id="5-3-qi-dong-filebrowser-fu-wu" id="5-3-启动filebrowser服务">5.3 启动filebrowser服务</h2><p>执行以下命令，启动<code>filebrowser</code>服务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload </span><br><span class="line">systemctl enable --now filebrowser</span><br></pre></td></tr></table></figure><h2 id="5-4-jian-cha-filebrowser-fu-wu-zhuang-tai" id="5-4-检查filebrowser服务状态">5.4 检查filebrowser服务状态</h2><p>检查<code>filebrowser</code>服务状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status filebrowser</span><br></pre></td></tr></table></figure><p>启动成功后如下图所示：</p><img src="https://bu.dusays.com/2025/01/04/6778b28060161.png" alt="image-20250104120105119" style="zoom:80%;" /><p>然后重新打开<code>http://192.168.5.229:9988/</code>后加载的就是指定的目录，如下图所示：</p><p><img src="https://bu.dusays.com/2025/01/04/6778b2cacd8d3.png" alt="image-20250104120219683"></p><h2 id="5-5-jian-cha-jian-ting-duan-kou" id="5-5-检查监听端口">5.5 检查监听端口</h2><p>检查<code>filebrowser</code>服务的监听端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ss -tunlp |grep filebrowser</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2025/01/04/6778b3c632f0d.png" alt="image-20250104120631104"></p><h2 id="5-6-chang-yong-de-filebrowser-ming-ling" id="5-6-常用的filebrowser命令">5.6 常用的filebrowser命令</h2><h3 id="qi-dong-filebrowser-fu-wu" id="启动filebrowser服务">启动filebrowser服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start filebrowser</span><br></pre></td></tr></table></figure><h3 id="ting-zhi-filebrowser-fu-wu" id="停止filebrowser服务">停止filebrowser服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop filebrowser</span><br></pre></td></tr></table></figure><h3 id="zhong-qi-filebrowser-fu-wu" id="重启filebrowser服务">重启filebrowser服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart filebrowser</span><br></pre></td></tr></table></figure><h1 id="liu-docker-yi-jian-bu-shu-fang-fa">六、Docker一键部署方法</h1><h2 id="6-1-xia-zai-file-browser-jing-xiang" id="6-1-下载-File-Browser-镜像">6.1 下载 File Browser 镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull filebrowser/filebrowser</span><br></pre></td></tr></table></figure><h2 id="6-2-shi-yong-docker-cli-bu-shu" id="6-2-使用-Docker-Cli-部署">6.2 使用 Docker-Cli 部署</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建数据存储目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /docker/filebrowser/&#123;srv,config,db&#125;</span><br><span class="line">docker run -d --name filebrowser --restart always -v /docker/filebrowser/srv:/srv -v /docker/filebrowser/config/config.json:/etc/config.json -v /docker/filebrowser/db/database.db:/etc/database.db -p 8080:80 filebrowser/filebrowser</span><br></pre></td></tr></table></figure><blockquote><p>容器说明</p></blockquote><table><thead><tr><th><strong>服务器文件夹</strong></th><th><strong>容器文件夹</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>/docker/filebrowser/srv</td><td>/srv</td><td>文件存放位置</td></tr><tr><td>/docker/filebrowser/filebrowser.db</td><td>/database/filebrowser.db</td><td>数据库</td></tr><tr><td>/docker/filebrowser/settings.json</td><td>/config/settings.json</td><td>配置文件</td></tr></tbody></table><h2 id="6-3-shi-yong-docker-compose-yaml-bu-shu" id="6-3-使用-docker-compose-yaml-部署">6.3 使用 docker-compose.yaml 部署</h2><h3 id="chuang-jian-shu-ju-mu-lu" id="创建数据目录">创建数据目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /docker/filebrowser/&#123;srv,config,db&#125;</span><br></pre></td></tr></table></figure><h3 id="mu-lu-shou-quan" id="目录授权">目录授权</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> -R 777 /docker/filebrowser/</span><br></pre></td></tr></table></figure><h3 id="bian-ji-docker-compose-yaml-wen-jian" id="编辑-docker-compose-yaml-文件">编辑 docker-compose.yaml 文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@blog filebrowser] vim docker-compose.yaml</span><br><span class="line">version: <span class="string">&quot;3&quot;</span></span><br><span class="line">services:</span><br><span class="line">  filebrowser:</span><br><span class="line">    container_name: filebrowser</span><br><span class="line">    image: filebrowser/filebrowser:latest</span><br><span class="line">    restart: always</span><br><span class="line"><span class="comment">#    depends_on:</span></span><br><span class="line"><span class="comment">#      - mariadb</span></span><br><span class="line">    volumes:</span><br><span class="line">      - /data/filebrowser/srv:/srv</span><br><span class="line">      - /data/filebrowser/config/config.json:/etc/config.json</span><br><span class="line">      - /data/filebrowser/db/database.db:/etc/database.db</span><br><span class="line"><span class="comment">#    environment:</span></span><br><span class="line"><span class="comment">#      - DB_HOST=mariadb</span></span><br><span class="line"><span class="comment">#      - DB_USER=admin</span></span><br><span class="line"><span class="comment">#      - DB_PASS=admin</span></span><br><span class="line"><span class="comment">#      - DB_NAME=notepad</span></span><br><span class="line"><span class="comment">#      - DB_PORT=3306</span></span><br><span class="line"><span class="comment">#      - PGID=1000</span></span><br><span class="line"><span class="comment">#      - PUID=1000</span></span><br><span class="line"><span class="comment">#      - TZ=Aisa/Shanghai</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;8080:80&quot;</span></span><br><span class="line">    networks:</span><br><span class="line">      - filebrowser</span><br><span class="line">networks:</span><br><span class="line">    filebrowser:</span><br></pre></td></tr></table></figure><h3 id="yun-xing-file-browser-rong-qi" id="运行-File-Browser-容器">运行 File Browser 容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于 docker-compose.yaml 启动并运行服务</span></span><br><span class="line">docker compose -f docker-compose.yaml up -d</span><br></pre></td></tr></table></figure><h1 id="qi-zong-jie">七、总结</h1><p><span style="font-size:1.1em; color:#990000; font-weight:bold;">使用<code>File Browser</code>对服务器上的文件进行管理非常方便。它提供了一个用户友好的界面，可以直接在浏览器中查看、上传、下载、删除、复制、移动和重命名文件。<code>File Browser</code>的界面布局清晰，功能的操作按钮一目了然，没有任何复杂的操作流程。使用起来非常直观，即使对于非技术人员也很容易上手。<code>File Browser</code>还提供了文件的预览功能，可以预览各种常见的文件类型，包括图片、文本、音频和视频文件。这样可以方便地查看文件内容，而无需下载到本地。另外，<code>File Browser</code>还支持文件夹的分享功能。可以生成一个公共链接，将文件夹的内容分享给他人。这对于团队协作或者与客户共享文件非常实用。<code>File Browser</code>是一个简单易用但功能强大的文件管理工具。它的使用体验非常好，可以大大提高文件管理的效率。无论是个人使用还是团队协作，都是一个非常不错的选择。</span></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> File Browser </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo框架时的种种问题和解决方法📘</title>
      <link href="/2024/12/10/%E4%BD%BF%E7%94%A8Hexo%E6%A1%86%E6%9E%B6%E6%97%B6%E7%9A%84%E7%A7%8D%E7%A7%8D%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2024/12/10/%E4%BD%BF%E7%94%A8Hexo%E6%A1%86%E6%9E%B6%E6%97%B6%E7%9A%84%E7%A7%8D%E7%A7%8D%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<hr><p>Hexo框架默认会使用<code>hexo-renderer-marked</code>来作为markdown的渲染器，然后再给默认安装的Mathjax来渲染公式。在该渲染方式下笔者文章中的所有公式都会被重复显示一遍。这似乎是这两个渲染器的转译规则导致了符号语法冲突。</p><p>网络上能够搜到的解决方案有很多，比如把原先的markdown渲染器修改为<code>hexo-renderer-kramed</code>，或者直接修改Mathjax的渲染引擎脚本。不过有些博客中提到<code>hexo-renderer-kramed</code>引擎需要改变一部分的文档语法，并且可能导致代码块高亮失效。而修改脚本又是麻烦事。因此笔者选择了一种较为简单的<strong>Pandoc渲染器+hexo-filter-mathjax公式插件</strong>的解决方案。其配置和安装都比较简单，解决了默认渲染器插件支持有限的问题，公式的编写语法也与大部分markdown编辑器一致。</p><h1 id="geng-huan-xuan-ran-qi">更换渲染器</h1><p>比Hexo默认渲染器更加好用的渲染器有不少，博主选择的是<code>hexo-renderer-markdown-it</code>。除上文中提到的两种，在这里也推荐<code>hexo-renderer-pandoc</code>(因为其兼容的语言较多)，这个渲染器支持不少好用的插件。</p><h2 id="bu-zou-1-xie-zai-mo-ren-xuan-ran-qi" id="步骤1-卸载默认渲染器">步骤1: 卸载默认渲染器</h2><p>开始安装前，我们先要移除原先的默认渲染器。在你的Hexo框架的blog根目录下打开终端，输入以下指令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked  --save</span><br></pre></td></tr></table></figure><h2 id="bu-zou-2-an-zhuang-xin-xuan-ran-qi" id="步骤2-安装新渲染器">步骤2: 安装新渲染器</h2><p>同样在你的blog根目录下，安装<code>markdown-it</code>渲染器:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-renderer-markdown-it --save</span><br></pre></td></tr></table></figure><p>如果要安装其他渲染器，那么直接将名称替换上面的<code>hexo-renderer-markdown-it</code>即可。</p><p>安装完<code>hexo-renderer-markdown-it</code>渲染器后，将如下文本复制粘贴到 Hexo 的配置文件<code>_config.yml</code>的尾部:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Markdown config</span></span><br><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="attr">preset:</span> <span class="string">&quot;default&quot;</span></span><br><span class="line">  <span class="attr">render:</span></span><br><span class="line">    <span class="attr">html:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">xhtmlOut:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">langPrefix:</span> <span class="string">&quot;language-&quot;</span></span><br><span class="line">    <span class="attr">breaks:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">linkify:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">typographer:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">quotes:</span> <span class="string">&quot;“”‘’&quot;</span></span><br><span class="line">  <span class="attr">enable_rules:</span></span><br><span class="line">  <span class="attr">disable_rules:</span></span><br><span class="line">  <span class="attr">plugins:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-abbr</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-cjk-breaks</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-deflist</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-emoji</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-footnote</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-ins</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-mark</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-sub</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-sup</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-checkbox</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-named-headings</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-imsize</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-expandable</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">markdown-it-container</span></span><br><span class="line">      <span class="attr">options:</span> <span class="string">success</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">markdown-it-container</span></span><br><span class="line">      <span class="attr">options:</span> <span class="string">tips</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">markdown-it-container</span></span><br><span class="line">      <span class="attr">options:</span> <span class="string">warning</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">markdown-it-container</span></span><br><span class="line">      <span class="attr">options:</span> <span class="string">danger</span></span><br><span class="line">  <span class="attr">anchors:</span></span><br><span class="line">    <span class="attr">level:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">collisionSuffix:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">permalink:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">permalinkClass:</span> <span class="string">&quot;header-anchor&quot;</span></span><br><span class="line">    <span class="attr">permalinkSide:</span> <span class="string">&quot;left&quot;</span></span><br><span class="line">    <span class="attr">permalinkSymbol:</span> <span class="string">&quot;¶&quot;</span></span><br><span class="line">    <span class="attr">case:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">separator:</span> <span class="string">&quot;-&quot;</span></span><br></pre></td></tr></table></figure><p>此渲染器包含的插件如下：</p><table><thead><tr><th>名称</th><th style="text-align:center">描述</th><th style="text-align:center">语法</th><th style="text-align:center">示例</th></tr></thead><tbody><tr><td>markdown-it-abbr</td><td style="text-align:center">注释</td><td style="text-align:center"><code>*[HTML]: Hyper Text Markup Language</code></td><td style="text-align:center">具体效果表格内无法显示，可参照表格后的示例</td></tr><tr><td>markdown-it-emoji</td><td style="text-align:center">表情</td><td style="text-align:center"><code>:)</code></td><td style="text-align:center">😃</td></tr><tr><td>markdown-it-footnote</td><td style="text-align:center">脚注</td><td style="text-align:center"><code>参考文献[^1]</code></td><td style="text-align:center">参考文献<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></td></tr><tr><td>markdown-it-ins</td><td style="text-align:center">下划线</td><td style="text-align:center"><code>++下划线++</code></td><td style="text-align:center"><u>下划线</u></td></tr><tr><td>markdown-it-mark</td><td style="text-align:center">突出显示</td><td style="text-align:center"><code>==标记==</code></td><td style="text-align:center"><mark>标记</mark></td></tr><tr><td>markdown-it-sub</td><td style="text-align:center">下标</td><td style="text-align:center"><code>H~2~O</code></td><td style="text-align:center">H<sub>2</sub>O</td></tr><tr><td>markdown-it-sup</td><td style="text-align:center">上标</td><td style="text-align:center"><code>X^2^</code></td><td style="text-align:center">X<sup>2</sup></td></tr><tr><td>markdown-it-checkbox</td><td style="text-align:center">复选框</td><td style="text-align:center"><code>- [ ] 未选中</code></td><td style="text-align:center"><input type="checkbox" id="checkbox0"><label for="checkbox0">未选中</label></td></tr><tr><td>markdown-it-checkbox</td><td style="text-align:center">复选框</td><td style="text-align:center"><code>- [x] 选中</code></td><td style="text-align:center"><input type="checkbox" id="checkbox1" checked="true"><label for="checkbox1">选中</label></td></tr></tbody></table><p><code>markdown-it-abbr</code>注释示例：</p><p>The <abbr title="Hyper Text Markup Language">HTML</abbr> specification is maintained by the <abbr title="World Wide Web Consortium">W3C</abbr>.</p><p>分别使用 <code>npm</code> 命令安装以下三个插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i markdown-it-checkbox</span><br><span class="line">npm i markdown-it-imsize</span><br><span class="line">npm i markdown-it-expandable</span><br></pre></td></tr></table></figure><p>其它插件 <code>hexo-renderer-markdown-it</code> 渲染器自带的有，不要安装。</p><blockquote><p>该渲染器能完美解决Markdown表格中如果出现&quot;|&quot;符号时，被识别错误的问题。</p></blockquote><p>对于Pandoc渲染器，这里直接安装Pandoc即可：<a href="https://pandoc.org/installing.html">Pandoc官网安装页面</a>。具体安装方法根据自己的操作系统选择就行。</p><h1 id="geng-huan-gong-shi-xuan-ran-cha-jian">更换公式渲染插件</h1><p><a href="https://github.com/next-theme/hexo-filter-mathjax">hexo-filter-mathjax</a>这个公式插件是官方支持的插件之一，其支持的公式输入语法与主流markdown编辑器较为一致。</p><h2 id="bu-zou-1-xie-zai-hexo-math" id="步骤1-卸载hexo-math">步骤1:卸载hexo-math</h2><p>在你的Hexo框架的blog根目录下打开终端，输入以下指令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-math --save</span><br></pre></td></tr></table></figure><h2 id="bu-zou-2-an-zhuang-hexo-filter-mathjax" id="步骤2-安装hexo-filter-mathjax">步骤2:安装hexo-filter-mathjax</h2><p>同样在你的blog根目录下，安装插件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-filter-mathjax  --save</span><br></pre></td></tr></table></figure><h2 id="bu-zou-3-zai-quan-ju-pei-zhi-zhong-pei-zhi-gong-shi-xuan-ran" id="步骤3-在全局配置中配置公式渲染">步骤3:在全局配置中配置公式渲染</h2><p>在你的Hexo框架的blog根目录下打开<code>_config.yml</code>文件，在文件中加入如下内容:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mathjax:</span><br><span class="line">  tags: none # or &#x27;ams&#x27; or &#x27;all&#x27;</span><br><span class="line">  single_dollars: true # enable single dollar signs as in-line math delimiters</span><br><span class="line">  cjk_width: 0.9 # relative CJK char width</span><br><span class="line">  normal_width: 0.6 # relative normal (monospace) width</span><br><span class="line">  append_css: true # add CSS to pages rendered by MathJax</span><br><span class="line">  every_page: false # if true, every page will be rendered by MathJax regardless the `mathjax` setting in Front-matter</span><br></pre></td></tr></table></figure><p>各个参数的用处可以看代码注释。没有特别需求基本不需要更改。</p><h2 id="bu-zou-4-xu-yao-gong-shi-de-bo-ke-wen-zhang-qi-yong-gong-shi-xuan-ran-qi" id="步骤4-需要公式的博客文章启用公式渲染器">步骤4:需要公式的博客文章启用公式渲染器</h2><p>在你写的，需要使用公式的markdown文档的front-matter中添加一个参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mathjax: true</span><br></pre></td></tr></table></figure><p>以本片博客的front-matter为例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 使用Hexo框架时的种种问题和解决方法</span><br><span class="line">date: 2023-07-19 01:17:17</span><br><span class="line">cover: https://cdn.jsdelivr.net/gh/KiRorY/pic_Warehouse/pic/post2/hexo.jpg</span><br><span class="line">tags: </span><br><span class="line">- Hexo</span><br><span class="line">categories: 教程</span><br><span class="line">mathjax: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>如果你认为给单独一篇文章加参数太麻烦，你也可以在<code>_config.yml</code>文件中刚刚添加的<code>mathjax</code>设定下，把<code>every_page</code>的参数改为<code>ture</code>。</p><p>至此公式应该可以正常渲染，尝试以下矩阵式子是否能正常显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\alpha=</span><br><span class="line">\begin&#123;pmatrix&#125;</span><br><span class="line">a &amp; b &amp; c \\</span><br><span class="line">d &amp; e &amp; f \\</span><br><span class="line">g &amp; h &amp; i </span><br><span class="line">\end&#123;pmatrix&#125; </span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>渲染结果：</p><p><img src="https://bu.dusays.com/2024/12/10/67583221421f4.png" alt="image-20241210202052619"></p><p><span style="text-emphasis:filled red; border:1px solid #330000; background:#FFFF00; color:#FF8000;">参考文档</span></p><p>[1] <a href="https://blog.csdn.net/weixin_45511189/article/details/115798563">hexo博客next主题添加对数学公式的支持</a></p><p>[2] <a href="http://masikkk.com/article/hexo-13-MathJax/">Hexo博客(13)添加MathJax数学公式渲染</a></p><p>[3] <a href="https://www.zhangwei.press/2021/03/03/%E5%B7%A5%E5%85%B7/Hexo/%E5%9C%A8Hexo%E4%B8%AD%E6%B8%B2%E6%9F%93MathJax%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/">在Hexo中使用Mathjax渲染数学公式</a></p><hr><h1 id="zai-bo-ke-wen-zhang-zhong-tian-jia-emoji-biao-qing">在博客文章中添加Emoji表情</h1><p>markdown支持Emoji表情的使用，但是在Hexo框架下需要安装插件才能使表情能被渲染。在<a href="https://kirory.xyz/2023/07/19/Hexo%E6%A1%86%E6%9E%B6%E5%8D%9A%E5%AE%A2%E5%85%B3%E4%BA%8E%E8%BE%93%E5%85%A5%E5%85%AC%E5%BC%8F%E5%92%8C%E8%A1%A8%E6%83%85%E7%9A%84%E9%97%AE%E9%A2%98/#markdown%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%85%AC%E5%BC%8F%E7%9A%84%E6%B8%B2%E6%9F%93%E9%97%AE%E9%A2%98">Markdown中使用公式的渲染问题</a>中，笔者提到了<code>hexo-renderer-markdown-it</code>这个渲染器，如果你安装了该渲染器，那么可以直接安装渲染器插件<code>markdown-it-emoji</code>(不过通常该渲染器已经自带了这个插件了)。在你的Hexo框架blog根目录下打开终端，输入以下指令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install markdown-it-emoji --save</span><br></pre></td></tr></table></figure><p>笔者安装的渲染器是Pandoc,所以需要安装另一个插件<code>hexo-filter-github-emojis</code>，以下是该插件的安装和配置流程。</p><h2 id="bu-zou-1-an-zhuang-cha-jian" id="步骤1：安装插件">步骤1：安装插件</h2><p>在Hexo框架blog根目录下打开终端，输入以下指令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-filter-github-emojis --save</span><br></pre></td></tr></table></figure><h2 id="bu-zou-2-zai-quan-ju-pei-zhi-zhong-qi-yong-cha-jian" id="步骤2：在全局配置中启用插件">步骤2：在全局配置中启用插件</h2><p>打开博客根目录下的<code>_config.yml</code>配置文件，添加以下语句:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">githubEmojis:</span><br><span class="line">  enable: true</span><br><span class="line">  className: github-emoji</span><br><span class="line">  unicode: true</span><br><span class="line">  styles:</span><br><span class="line">    display: inline</span><br><span class="line">    vertical-align: middle # Freemind适用</span><br><span class="line">  localEmojis:</span><br></pre></td></tr></table></figure><p>关于参数的说明可以查看其<a href="https://github.com/crimx/hexo-filter-github-emojis">Github说明文档</a>。</p><h2 id="zai-wen-zhang-zhong-cha-ru-emoji-biao-qing" id="在文章中插入Emoji表情-😃">在文章中插入Emoji表情 😃</h2><p><img src="https://bu.dusays.com/2024/12/10/67583131a5e8b.png" alt="img"></p><p>Emoji的插入方法有很多，比较方便是直接使用Emoji的快捷代码。例如：<code>:grinning:</code> 😀</p><p><img src="https://bu.dusays.com/2024/12/10/67583131a53f4.png" alt="img"></p><p>Emoji表情的快捷代码可以直接上网找，这里提供一个<a href="https://www.ifreesite.com/emoji/shortcode.htm">Emoji快捷码对照网站</a>。</p><p><span style="text-emphasis:filled red; border:1px solid #330000; background:#FFFF00; color:#FF8000;">参考文档</span></p><p>[1] <a href="https://spacefan.github.io/2018/06/30/hexo-emoji/">Hexo 博客使用 emoji 表情</a></p><h1 id="wen-zhang-ye-ju-bu-html-dai-ma-bu-xuan-ran">文章页局部 html 代码不渲染</h1><p>在你的 md 文章页中，部分内容不想经过 Hexo 渲染，则包一层 <code>raw</code> 标签：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&lt;div class=&quot;&quot;&gt;你的一些代码...&lt;/div&gt;</span><br><span class="line">&lt;script&gt;你的一些代码...&lt;/script&gt;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure><p>那么标签内的代码就不会被框架渲染了~</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>这是一个测试脚注 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos 7常用设置和命令📙</title>
      <link href="/2024/12/04/Centos%207%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE%E5%92%8C%E5%91%BD%E4%BB%A4/"/>
      <url>/2024/12/04/Centos%207%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE%E5%92%8C%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="yi-geng-huan-jing-xiang-yuan-tui-jian-fang-an-er">一、更换镜像源（推荐方案二）</h1><blockquote><p>引用自：</p><p>1.<a href="https://www.cnblogs.com/007sx/p/18351813">https://www.cnblogs.com/007sx/p/18351813</a></p><p>2.<a href="https://es6.fun/article/32">https://es6.fun/article/32</a></p></blockquote><h2 id="qian-yan" id="前言">前言</h2><p>CentOS 7的生命周期已经在2024年6月30日终止（End of Life，EOL），官方将不再对该版本进行问题修复、功能更新以及其他形式的维护支持。这意味着使用 CentOS 7 的用户将面临安全漏洞无法得到修补的风险，同时随着其他软件的更新，可能会出现不兼容的情况。</p><p>随着 CentOS 7的生命周期结束，<a href="https://link.zhihu.com/?target=http%3A//mirrorlist.centos.org">http://mirrorlist.centos.org</a> 也不再提供服务。因为 <a href="https://link.zhihu.com/?target=http%3A//mirrorlist.centos.org">http://mirrorlist.centos.org</a> 是 CentOS 系统中用于寻找可用软件包镜像的关键服务，意味着 CentOS 用户将无法通过该服务获取最新的镜像列表，会影响软件包的管理功能。</p><p>在 CentOS 7中再使用 yum 安装软件包或者编译基于 CentOS 的 Docker 镜像时，会报如下错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Could not resolve host: mirrorlist.centos.org</span><br></pre></td></tr></table></figure><p>使用 nslookup 看下 <a href="https://link.zhihu.com/?target=http%3A//mirrorlist.centos.org">http://mirrorlist.centos.org</a> 会发现的确不再提供服务，如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Bingo&gt; nslookup mirrorlist.centos.org</span><br><span class="line">服务器:  public1.114dns.com</span><br><span class="line">Address:  114.114.114.114</span><br><span class="line"></span><br><span class="line">DNS request timed out.</span><br><span class="line">    timeout was 2 seconds.</span><br><span class="line">*** public1.114dns.com 找不到 mirrorlist.centos.org: Non-existent domain</span><br></pre></td></tr></table></figure><h2 id="jie-jue-fang-an" id="解决方案">解决方案</h2><h3 id="yi-guan-fang-yuan-geng-huan-fang-an" id="（一）官方源更换方案">（一）官方源更换方案</h3><p>CentOS 旧版本的软件包和已不再维护的 CentOS 版本都会被存储到 <a href="https://link.zhihu.com/?target=http%3A//vault.centos.org">http://vault.centos.org</a>，所以只需要将 repo 文件的 baseurl 由 <a href="https://link.zhihu.com/?target=http%3A//mirrorlist.centos.org">http://mirrorlist.centos.org</a> 改为 <a href="https://link.zhihu.com/?target=http%3A//vault.centos.org">http://vault.centos.org</a> 即可</p><p>1、备份旧的源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.old</span><br></pre></td></tr></table></figure><p>2、查看Centos系统版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@1drk384l6e8r9t3 ~]# cat /etc/centos-release</span><br><span class="line">CentOS Linux release 7.9.2009 (Core)</span><br></pre></td></tr></table></figure><p>3、新建新的CentOS-Base.repo并粘贴如下配置保存（自己替换成上一步查询到的版本）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/yum.repos.d/CentOS-Base.repo</span><br><span class="line"># 粘贴如下配置信息并保存</span><br><span class="line">[base]</span><br><span class="line">name=CentOS-$releasever - Base</span><br><span class="line">baseurl=http://vault.centos.org/7.9.2009/os/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</span><br><span class="line"></span><br><span class="line">[updates]</span><br><span class="line">name=CentOS-$releasever - Updates</span><br><span class="line">baseurl=http://vault.centos.org/7.9.2009/updates/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</span><br><span class="line"></span><br><span class="line">[extras]</span><br><span class="line">name=CentOS-$releasever - Extras</span><br><span class="line">baseurl=http://vault.centos.org/7.9.2009/extras/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</span><br></pre></td></tr></table></figure><p>4、清理缓存并生成新的缓存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum clean all</span><br><span class="line">sudo yum makecache</span><br></pre></td></tr></table></figure><p>5、运行 <code>yum repolist</code> 命令，确保新源已生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum repolist</span><br></pre></td></tr></table></figure><p>显示如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@1drk384l6e8r9t3 ~]# sudo yum repolist</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">repo id                                                                         repo name                                                                            status</span><br><span class="line">base/x86_64                                                                     CentOS-7 - Base                                                                      10,072</span><br><span class="line">extras/x86_64                                                                   CentOS-7 - Extras                                                                       526</span><br><span class="line">updates/x86_64                                                                  CentOS-7 - Updates                                                                    6,173</span><br><span class="line">repolist: 16,771</span><br></pre></td></tr></table></figure><h3 id="er-geng-huan-a-li-jing-xiang-ji-scl-geng-huan-shu-ju-yuan" id="（二）更换阿里镜像及SCL更换数据源">（二）更换阿里镜像及SCL更换数据源</h3><h4 id="1-geng-huan-yum-jing-xiang" id="1-更换yum镜像">1.更换yum镜像</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 首先备份你的yum仓库配置</span></span><br><span class="line">cp /etc/yum.repos.d/<span class="title class_">Cent</span>OS-<span class="title class_">Base</span>.repo /etc/yum.repos.d/<span class="title class_">Cent</span>OS-<span class="title class_">Base</span>.repo.backup</span><br><span class="line"><span class="comment"># 2. 更新仓库配置（以CentOS 7为例）</span></span><br><span class="line"><span class="comment"># 下载最新的CentOS 7仓库配置</span></span><br><span class="line">curl -o /etc/yum.repos.d/<span class="title class_">Cent</span>OS-<span class="title class_">Base</span>.repo <span class="symbol">http:</span>/<span class="regexp">/mirrors.aliyun.com/repo</span><span class="regexp">/Centos-7.repo</span></span><br></pre></td></tr></table></figure><h4 id="2-xiu-gai-cent-os-sc-lo-scl-repo" id="2-修改CentOS-SCLo-scl-repo">2.修改CentOS-SCLo-scl.repo</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/yum.repos.d/<span class="title class_">Cent</span>OS-<span class="title class_">SCLo</span>-scl.repo</span><br></pre></td></tr></table></figure><p>修改此部分的baseurl</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[centos-sclo-sclo]</span><br><span class="line">name=<span class="title class_">Cent</span>OS-<span class="number">7</span> - <span class="title class_">SCLo</span> sclo</span><br><span class="line">baseurl=<span class="symbol">https:</span>/<span class="regexp">/mirrors.aliyun.com/centos</span><span class="regexp">/7/sclo</span><span class="regexp">/x86_64/sclo</span><span class="regexp">/</span></span><br><span class="line"><span class="regexp"># mirrorlist=http:/</span><span class="regexp">/mirrorlist.centos.org?arch=$basearch&amp;release=7&amp;repo=sclo-sclo</span></span><br><span class="line"><span class="regexp">gpgcheck=0</span></span><br><span class="line"><span class="regexp">enabled=1</span></span><br><span class="line"><span class="regexp">gpgkey=file:/</span><span class="regexp">//etc</span><span class="regexp">/pki/rpm</span>-gpg/<span class="variable constant_">RPM</span>-<span class="variable constant_">GPG</span>-<span class="variable constant_">KEY</span>-<span class="title class_">Cent</span>OS-<span class="variable constant_">SIG</span>-<span class="title class_">SCLo</span></span><br></pre></td></tr></table></figure><h4 id="3-xiu-gai-cent-os-sc-lo-scl-rh-repo" id="3-修改CentOS-SCLo-scl-rh-repo">3.修改CentOS-SCLo-scl-rh.repo</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/yum.repos.d/<span class="title class_">Cent</span>OS-<span class="title class_">SCLo</span>-scl-rh.repo</span><br></pre></td></tr></table></figure><p>修改此部分的baseurl</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[centos-sclo-rh]</span><br><span class="line">name=<span class="title class_">Cent</span>OS-<span class="number">7</span> - <span class="title class_">SCLo</span> rh</span><br><span class="line">baseurl=<span class="symbol">https:</span>/<span class="regexp">/mirrors.aliyun.com/centos</span><span class="regexp">/7/sclo</span><span class="regexp">/x86_64/rh</span><span class="regexp">/</span></span><br><span class="line"><span class="regexp"># mirrorlist=http:/</span><span class="regexp">/mirrorlist.centos.org?arch=$basearch&amp;release=7&amp;repo=sclo-rh</span></span><br><span class="line"><span class="regexp">gpgcheck=0</span></span><br><span class="line"><span class="regexp">enabled=1</span></span><br><span class="line"><span class="regexp">gpgkey=file:/</span><span class="regexp">//etc</span><span class="regexp">/pki/rpm</span>-gpg/<span class="variable constant_">RPM</span>-<span class="variable constant_">GPG</span>-<span class="variable constant_">KEY</span>-<span class="title class_">Cent</span>OS-<span class="variable constant_">SIG</span>-<span class="title class_">SCLo</span></span><br></pre></td></tr></table></figure><h4 id="4-shua-xin-huan-cun" id="4-刷新缓存">4.刷新缓存</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum repolist</span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure><h1 id="er-centos-7-de-ps-1-mei-hua">二、Centos 7的PS1美化</h1><blockquote><p>引用自<a href="https://blog.csdn.net/qq_44792624/article/details/107732536">https://blog.csdn.net/qq_44792624/article/details/107732536</a></p></blockquote><h2 id="ps-1-bian-liang-can-kao" id="PS1变量参考">PS1变量参考</h2><p><code>字体颜色</code>参考: <a href="https://www.ohyee.cc/post/note_bash_terminal">https://www.ohyee.cc/post/note_bash_terminal</a></p><p><img src="https://bu.dusays.com/2024/12/08/675520eb9be06.png" alt=""></p><table><thead><tr><th>变量</th><th>解释</th></tr></thead><tbody><tr><td>\u：</td><td>显示当前用户账号</td></tr><tr><td>\h：</td><td>显示当前主机名</td></tr><tr><td>\W：</td><td>只显示当前路径最后一个目录</td></tr><tr><td>\w：</td><td>显示当前绝对路径（当前用户目录会以~代替）</td></tr><tr><td>$PWD：</td><td>显示当前全路径</td></tr><tr><td>$$：</td><td>显示命令行’$$'或者’#'符号</td></tr><tr><td>#：</td><td>下达的第几个命令</td></tr><tr><td>\d：</td><td>代表日期，格式为week day month date，例如：“MonAug1”</td></tr><tr><td>\t：</td><td>显示时间为24小时格式，如：HH：MM：SS</td></tr><tr><td>*\T：</td><td>显示时间为12小时格式</td></tr><tr><td>*\A：</td><td>显示时间为24小时格式：HH：MM</td></tr><tr><td>*\v：</td><td>BASH的版本信息</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">一般颜色符是以[m\]结尾</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 主机名和用户名</span></span></span><br><span class="line">export PS1=&quot;\[\e[42m\]\h\[\e[m\]  \[\e[42m\]\u\[\e[m\] &quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 主机名</span></span></span><br><span class="line">export PS1=&quot;\[\e[42m\]\h\[\e[m\] &quot;</span><br></pre></td></tr></table></figure><h3 id="zhong-duan-zi-ti-yan-se" id="终端字体颜色">终端字体颜色</h3><p><img src="https://bu.dusays.com/2024/12/08/675520f342e43.png" alt="在这里插入图片描述"></p><h3 id="lin-shi-she-ding-ps-1" id="临时设定PS1">临时设定PS1</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如</span></span><br><span class="line">export PS1=’[\u@\h\w#]$‘</span><br></pre></td></tr></table></figure><h2 id="rang-ps-1-huan-jing-bian-liang-wei-mei-ge-yong-hu-yong-jiu-sheng-xiao" id="让PS1环境变量为每个用户永久生效">让PS1环境变量为每个用户永久生效</h2><p>在<code>/etc/bashrc</code>的最后一行添加上面<code>PS1</code>变量</p><h3 id="rang-ps-1-huan-jing-bian-liang-wei-mou-ge-yong-hu-yong-jiu-sheng-xiao" id="让PS1环境变量为某个用户永久生效">让PS1环境变量为某个用户永久生效</h3><p>就在那个用户的家目录下的<code>.bashrc</code>的最后一行添加上面<code>PS1</code>变量</p><h3 id="linux-qi-dong-hou-huan-jing-bian-liang-jia-zai-shun-xu" id="linux启动后环境变量加载顺序">linux启动后环境变量加载顺序</h3><p><a href="https://blog.csdn.net/omaidb/article/details/116019501">https://blog.csdn.net/omaidb/article/details/116019501</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/profile` → `/etc/profile.d/*.sh` → `~/.bash_profile` → `~/.bashrc` → `/etc/bashrc</span><br></pre></td></tr></table></figure><p><code>Bash</code>在显示<code>PS1</code>之前<code>先执行PROMPT_COMMAND环境变量定义的内容</code>.</p><h2 id="ps-1-mei-hua-jiao-ben" id="PS1美化脚本">PS1美化脚本</h2><p>以下示例只适用于<code>bash</code>.<br><a href="https://serverfault.com/questions/257975/how-to-check-if-im-in-screen-session">echo $STY的意思</a> : 获取<code>screen</code>等<code>会话保持</code>的<code>会话ID</code>。</p><p>建议将<code>ps1美化脚本</code>写在<code>/etc/profile.d/ps1.sh</code>中。</p><p>示例1: 以<code>～</code>显示<code>home</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">\u 表示当前用户的用户名。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">$(<span class="built_in">echo</span> <span class="variable">$STY</span> | <span class="built_in">cut</span> -d . -f2) 表示获取当前 screen 会话的编号，并去掉前缀部分，只保留编号部分。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">\h 表示主机名。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">\w 表示当前目录的完整路径。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;PIPESTATUS[0]&#125;</span> 表示最近一条命令执行后的退出状态码。</span></span><br><span class="line"></span><br><span class="line">PS1=&#x27;\[\033[01;35m\][\[\033[01;32m\]\u\[\033[01;32m\]$(echo $STY | cut -d . -f2)\[\033[01;35m\] \[\033[01;35m\]\[\033[01;35m\]\h\[\033[01;35m\] \[\033[38;5;39m\]\w\[\033[31m\]] \[\033[38;5;221m\]WORK \[\033[1;37m\]$&#123;PIPESTATUS[0]&#125;\[\033[01;36m\] \n# \[\033[00m\]&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">声明全局变量</span></span><br><span class="line">export PS1</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/12/08/675520fb3d163.png" alt="在这里插入图片描述"></p><p>示例2: 以<code>绝对路径</code>显示<code>PWD</code>,且以<code>终端颜色</code>显示<code>路径</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PS1=&#x27;\[\033[01;35m\][\[\033[01;32m\]\u\[\033[01;32m\]$(echo $STY | cut -d . -f2)\[\033[01;35m\] \[\033[01;35m\]\[\033[01;35m\]\h\[\033[01;35m\] \[$(tput setaf 0)\]$(pwd)] \[\033[38;5;221m\]WORK \[\033[1;37m\]$&#123;PIPESTATUS[0]&#125;\[\033[01;36m\] \n# \[\033[00m\]&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">声明全局变量</span></span><br><span class="line">export PS1</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/12/08/675520ff2564f.png" alt="在这里插入图片描述"></p><p>示例3: 以<code>绝对路径</code>显示<code>PWD</code>,且以<code>蓝色</code>显示<code>路径</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PS1=&#x27;\[\033[01;35m\][\[\033[01;32m\]\u\[\033[01;32m\]$(echo $STY | cut -d . -f2)\[\033[01;35m\] \[\033[01;35m\]\[\033[01;35m\]\h\[\033[01;35m\] \[\033[38;5;39m\]$(pwd)\[\033[31m\]] \[\033[38;5;221m\]WORK \[\033[1;37m\]$&#123;PIPESTATUS[0]&#125;\[\033[01;36m\] \n# \[\033[00m\]&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">声明全局变量</span></span><br><span class="line">export PS1</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/12/08/67552104cb245.png" alt="在这里插入图片描述"></p><h2 id="zsh-de-ps-1-pei-zhi" id="zsh的PS1配置">zsh的PS1配置</h2><blockquote><p>参考：<br><a href="https://blog.csdn.net/zxc3590235/article/details/109954843">https://blog.csdn.net/zxc3590235/article/details/109954843</a><br><a href="https://blog.csdn.net/u014218108/article/details/51195582">https://blog.csdn.net/u014218108/article/details/51195582</a></p></blockquote><p><code>zsh</code>的<code>.zshrc</code>会覆盖<code>PS1</code>配置，需要单独在<code>~/.zshrc</code>中配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑.zshrc</span></span><br><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将PS1内容复制进去</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使PS1变量生效</span></span><br><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><h2 id="ps-1-bian-liang-zai-xian-sheng-cheng-gong-ju" id="PS1变量在线生成工具">PS1变量在线生成工具</h2><p><a href="https://ezprompt.net/">https://ezprompt.net/</a></p><h1 id="san-centos-kai-fang-zhi-ding-duan-kou-ming-ling">三、Centos开放指定端口命令</h1><p>1.开启防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start firewalld</span><br></pre></td></tr></table></figure><p>2.开放指定端口</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=6666/tcp --permanent</span><br></pre></td></tr></table></figure><blockquote><p>命令含义：<br>–zone #作用域<br>–add-port=6666/tcp #添加端口，格式为：端口/通讯协议<br>–permanent #永久生效，没有此参数重启后失效</p></blockquote><p>3.重启防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>4.查看端口号</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -ntlp //查看当前所有tcp端口·</span><br><span class="line">netstat -ntulp |grep 6666 //查看所有1935端口使用情况·</span><br></pre></td></tr></table></figure><p>CentOS默认开放的本地端口范围：（默认30000多到60000多）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysctl.conf</span><br><span class="line">net.ipv4.ip_local_port_range = 10240 65000 <span class="comment">#建议不要小于10000 ，因为本机很可能会有类似如8080这样的服务</span></span><br></pre></td></tr></table></figure><h1 id="si-pei-zhi-ip">四、配置IP</h1><p>1.开启DHCP客户端，在终端输入如下命令：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dhclient</span><br></pre></td></tr></table></figure><p>2.安装net-tools，在终端输入如下命令：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install net-tools</span><br></pre></td></tr></table></figure><p>3.使用<code>ifconfig</code>命令查看获取的ip,如下图：</p><p><img src="https://bu.dusays.com/2024/12/08/6755210e95f00.png" alt="image 20241205223035760"></p><p>4.为防止服务器重启IP发生变化，建议改为静态IP，使用如下命令：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入网络配置目录</span></span><br><span class="line">cd /etc/sysconfig/network-scripts/</span><br><span class="line"><span class="comment"># 查看目录内文件，一般会看到ifcfg-ens33这个文件</span></span><br><span class="line">ls</span><br><span class="line"><span class="comment"># 修改ifcfg-ens33文件</span></span><br><span class="line">vim ifcfg-ens33</span><br></pre></td></tr></table></figure><p>按<kbd>i</kbd>键进行修改，具体修改内容如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">TYPE</span>=<span class="string">&quot;Ethernet&quot;</span></span><br><span class="line"><span class="variable constant_">PROXY_METHOD</span>=<span class="string">&quot;none&quot;</span></span><br><span class="line"><span class="variable constant_">BROWSER_ONLY</span>=<span class="string">&quot;no&quot;</span></span><br><span class="line"><span class="variable constant_">BOOTPROTO</span>=<span class="string">&quot;static&quot;</span> <span class="comment">#将该处dhcp修改为static</span></span><br><span class="line"><span class="variable constant_">DEFROUTE</span>=<span class="string">&quot;yes&quot;</span></span><br><span class="line"><span class="variable constant_">IPV4_FAILURE_FATAL</span>=<span class="string">&quot;no&quot;</span></span><br><span class="line"><span class="variable constant_">IPV6INIT</span>=<span class="string">&quot;yes&quot;</span></span><br><span class="line"><span class="variable constant_">IPV6_AUTOCONF</span>=<span class="string">&quot;yes&quot;</span></span><br><span class="line"><span class="variable constant_">IPV6_DEFROUTE</span>=<span class="string">&quot;yes&quot;</span></span><br><span class="line"><span class="variable constant_">IPV6_FAILURE_FATAL</span>=<span class="string">&quot;no&quot;</span></span><br><span class="line"><span class="variable constant_">IPV6_ADDR_GEN_MODE</span>=<span class="string">&quot;stable-privacy&quot;</span></span><br><span class="line"><span class="variable constant_">NAME</span>=<span class="string">&quot;ens33&quot;</span></span><br><span class="line"><span class="variable constant_">UUID</span>=<span class="string">&quot;af117c45-fb98-402d-b265-97988b666547&quot;</span></span><br><span class="line"><span class="variable constant_">DEVICE</span>=<span class="string">&quot;ens33&quot;</span></span><br><span class="line"><span class="variable constant_">ONBOOT</span>=<span class="string">&quot;yes&quot;</span> <span class="comment">#将该处no修改为yes</span></span><br><span class="line"><span class="comment">#添加如下配置</span></span><br><span class="line"><span class="variable constant_">IPADDR</span>=<span class="string">&quot;192.168.5.30&quot;</span></span><br><span class="line"><span class="variable constant_">PREFIX</span>=<span class="string">&quot;24&quot;</span> <span class="comment">#或写成 NETMASK=&quot;255.255.255.0&quot;</span></span><br><span class="line"><span class="variable constant_">GATEWAY</span>=<span class="string">&quot;192.168.5.1&quot;</span></span><br><span class="line"><span class="variable constant_">DNS1</span>=<span class="string">&quot;192.168.5.1&quot;</span></span><br></pre></td></tr></table></figure><p>5.修改后，重启网络服务：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart network.service</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ascii码对照表📖</title>
      <link href="/2024/12/02/Ascii%E7%A0%81%E5%AF%B9%E7%85%A7%E8%A1%A8/"/>
      <url>/2024/12/02/Ascii%E7%A0%81%E5%AF%B9%E7%85%A7%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>小贴士：按键盘Ctrl+F可快速查找 Ascii码及控制字符</p></blockquote><table><thead><tr><th style="text-align:left">ASCII值</th><th style="text-align:left">控制字符</th><th style="text-align:left">ASCII值</th><th style="text-align:left">控制字符</th><th style="text-align:left">ASCII值</th><th style="text-align:left">控制字符</th><th style="text-align:left">ASCII值</th><th style="text-align:left">控制字符</th></tr></thead><tbody><tr><td style="text-align:left">0</td><td style="text-align:left">NUT</td><td style="text-align:left">32</td><td style="text-align:left">(space)</td><td style="text-align:left">64</td><td style="text-align:left">@</td><td style="text-align:left">96</td><td style="text-align:left">、</td></tr><tr><td style="text-align:left">1</td><td style="text-align:left">SOH</td><td style="text-align:left">33</td><td style="text-align:left">!</td><td style="text-align:left">65</td><td style="text-align:left">A</td><td style="text-align:left">97</td><td style="text-align:left">a</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">STX</td><td style="text-align:left">34</td><td style="text-align:left">&quot;</td><td style="text-align:left">66</td><td style="text-align:left">B</td><td style="text-align:left">98</td><td style="text-align:left">b</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">ETX</td><td style="text-align:left">35</td><td style="text-align:left">#</td><td style="text-align:left">67</td><td style="text-align:left">C</td><td style="text-align:left">99</td><td style="text-align:left">c</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">EOT</td><td style="text-align:left">36</td><td style="text-align:left">$</td><td style="text-align:left">68</td><td style="text-align:left">D</td><td style="text-align:left">100</td><td style="text-align:left">d</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">ENQ</td><td style="text-align:left">37</td><td style="text-align:left">%</td><td style="text-align:left">69</td><td style="text-align:left">E</td><td style="text-align:left">101</td><td style="text-align:left">e</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left">ACK</td><td style="text-align:left">38</td><td style="text-align:left">&amp;</td><td style="text-align:left">70</td><td style="text-align:left">F</td><td style="text-align:left">102</td><td style="text-align:left">f</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left">BEL</td><td style="text-align:left">39</td><td style="text-align:left">,</td><td style="text-align:left">71</td><td style="text-align:left">G</td><td style="text-align:left">103</td><td style="text-align:left">g</td></tr><tr><td style="text-align:left">8</td><td style="text-align:left">BS</td><td style="text-align:left">40</td><td style="text-align:left">(</td><td style="text-align:left">72</td><td style="text-align:left">H</td><td style="text-align:left">104</td><td style="text-align:left">h</td></tr><tr><td style="text-align:left">9</td><td style="text-align:left">HT</td><td style="text-align:left">41</td><td style="text-align:left">)</td><td style="text-align:left">73</td><td style="text-align:left">I</td><td style="text-align:left">105</td><td style="text-align:left">i</td></tr><tr><td style="text-align:left">10</td><td style="text-align:left">LF</td><td style="text-align:left">42</td><td style="text-align:left">*</td><td style="text-align:left">74</td><td style="text-align:left">J</td><td style="text-align:left">106</td><td style="text-align:left">j</td></tr><tr><td style="text-align:left">11</td><td style="text-align:left">VT</td><td style="text-align:left">43</td><td style="text-align:left">+</td><td style="text-align:left">75</td><td style="text-align:left">K</td><td style="text-align:left">107</td><td style="text-align:left">k</td></tr><tr><td style="text-align:left">12</td><td style="text-align:left">FF</td><td style="text-align:left">44</td><td style="text-align:left">,</td><td style="text-align:left">76</td><td style="text-align:left">L</td><td style="text-align:left">108</td><td style="text-align:left">l</td></tr><tr><td style="text-align:left">13</td><td style="text-align:left">CR</td><td style="text-align:left">45</td><td style="text-align:left">-</td><td style="text-align:left">77</td><td style="text-align:left">M</td><td style="text-align:left">109</td><td style="text-align:left">m</td></tr><tr><td style="text-align:left">14</td><td style="text-align:left">SO</td><td style="text-align:left">46</td><td style="text-align:left">.</td><td style="text-align:left">78</td><td style="text-align:left">N</td><td style="text-align:left">110</td><td style="text-align:left">n</td></tr><tr><td style="text-align:left">15</td><td style="text-align:left">SI</td><td style="text-align:left">47</td><td style="text-align:left">/</td><td style="text-align:left">79</td><td style="text-align:left">O</td><td style="text-align:left">111</td><td style="text-align:left">o</td></tr><tr><td style="text-align:left">16</td><td style="text-align:left">DLE</td><td style="text-align:left">48</td><td style="text-align:left">0</td><td style="text-align:left">80</td><td style="text-align:left">P</td><td style="text-align:left">112</td><td style="text-align:left">p</td></tr><tr><td style="text-align:left">17</td><td style="text-align:left">DCI</td><td style="text-align:left">49</td><td style="text-align:left">1</td><td style="text-align:left">81</td><td style="text-align:left">Q</td><td style="text-align:left">113</td><td style="text-align:left">q</td></tr><tr><td style="text-align:left">18</td><td style="text-align:left">DC2</td><td style="text-align:left">50</td><td style="text-align:left">2</td><td style="text-align:left">82</td><td style="text-align:left">R</td><td style="text-align:left">114</td><td style="text-align:left">r</td></tr><tr><td style="text-align:left">19</td><td style="text-align:left">DC3</td><td style="text-align:left">51</td><td style="text-align:left">3</td><td style="text-align:left">83</td><td style="text-align:left">S</td><td style="text-align:left">115</td><td style="text-align:left">s</td></tr><tr><td style="text-align:left">20</td><td style="text-align:left">DC4</td><td style="text-align:left">52</td><td style="text-align:left">4</td><td style="text-align:left">84</td><td style="text-align:left">T</td><td style="text-align:left">116</td><td style="text-align:left">t</td></tr><tr><td style="text-align:left">21</td><td style="text-align:left">NAK</td><td style="text-align:left">53</td><td style="text-align:left">5</td><td style="text-align:left">85</td><td style="text-align:left">U</td><td style="text-align:left">117</td><td style="text-align:left">u</td></tr><tr><td style="text-align:left">22</td><td style="text-align:left">SYN</td><td style="text-align:left">54</td><td style="text-align:left">6</td><td style="text-align:left">86</td><td style="text-align:left">V</td><td style="text-align:left">118</td><td style="text-align:left">v</td></tr><tr><td style="text-align:left">23</td><td style="text-align:left">TB</td><td style="text-align:left">55</td><td style="text-align:left">7</td><td style="text-align:left">87</td><td style="text-align:left">W</td><td style="text-align:left">119</td><td style="text-align:left">w</td></tr><tr><td style="text-align:left">24</td><td style="text-align:left">CAN</td><td style="text-align:left">56</td><td style="text-align:left">8</td><td style="text-align:left">88</td><td style="text-align:left">X</td><td style="text-align:left">120</td><td style="text-align:left">x</td></tr><tr><td style="text-align:left">25</td><td style="text-align:left">EM</td><td style="text-align:left">57</td><td style="text-align:left">9</td><td style="text-align:left">89</td><td style="text-align:left">Y</td><td style="text-align:left">121</td><td style="text-align:left">y</td></tr><tr><td style="text-align:left">26</td><td style="text-align:left">SUB</td><td style="text-align:left">58</td><td style="text-align:left">:</td><td style="text-align:left">90</td><td style="text-align:left">Z</td><td style="text-align:left">122</td><td style="text-align:left">z</td></tr><tr><td style="text-align:left">27</td><td style="text-align:left">ESC</td><td style="text-align:left">59</td><td style="text-align:left">;</td><td style="text-align:left">91</td><td style="text-align:left">[</td><td style="text-align:left">123</td><td style="text-align:left">{</td></tr><tr><td style="text-align:left">28</td><td style="text-align:left">FS</td><td style="text-align:left">60</td><td style="text-align:left">&lt;</td><td style="text-align:left">92</td><td style="text-align:left">/</td><td style="text-align:left">124</td><td style="text-align:left">|</td></tr><tr><td style="text-align:left">29</td><td style="text-align:left">GS</td><td style="text-align:left">61</td><td style="text-align:left">=</td><td style="text-align:left">93</td><td style="text-align:left">]</td><td style="text-align:left">125</td><td style="text-align:left">}</td></tr><tr><td style="text-align:left">30</td><td style="text-align:left">RS</td><td style="text-align:left">62</td><td style="text-align:left">&gt;</td><td style="text-align:left">94</td><td style="text-align:left">^</td><td style="text-align:left">126</td><td style="text-align:left">`</td></tr><tr><td style="text-align:left">31</td><td style="text-align:left">US</td><td style="text-align:left">63</td><td style="text-align:left">?</td><td style="text-align:left">95</td><td style="text-align:left">_</td><td style="text-align:left">127</td><td style="text-align:left">DEL</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 知识库 </category>
          
          <category> Ascii码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识库 </tag>
            
            <tag> Ascii码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Syncthing多平台文件同步工具部署安装教程🍉</title>
      <link href="/2024/12/02/Syncthing%E5%A4%9A%E5%B9%B3%E5%8F%B0%E6%96%87%E4%BB%B6%E5%90%8C%E6%AD%A5%E5%B7%A5%E5%85%B7%E9%83%A8%E7%BD%B2%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
      <url>/2024/12/02/Syncthing%E5%A4%9A%E5%B9%B3%E5%8F%B0%E6%96%87%E4%BB%B6%E5%90%8C%E6%AD%A5%E5%B7%A5%E5%85%B7%E9%83%A8%E7%BD%B2%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>本教程转载自博客园大佬<a href="https://www.cnblogs.com/HaiJaine">HaiJaine</a>的教程<a href="https://www.cnblogs.com/HaiJaine/p/18339629">一文搞定：Syncthing多平台文件同步工具安装全攻略</a></p></blockquote><h1 id="jian-jie">简介</h1><p>Syncthing是一款开源的文件同步工具，可以通过本地网络或互联网实现多台设备之间的文件同步。与其他同步工具不同，Syncthing强调隐私和安全，确保用户的数据始终处于用户的控制之下。</p><h2 id="gong-neng-yu-te-dian" id="功能与特点">功能与特点</h2><ol><li class="lvl-3"><p><strong>开源软件</strong>：</p><ul class="lvl-2"><li class="lvl-5">Syncthing是完全开源的，源代码托管在GitHub上，任何人都可以查看、审查和贡献代码。这种透明性增强了用户对软件安全性的信任。</li></ul></li><li class="lvl-3"><p><strong>去中心化</strong>：</p><ul class="lvl-2"><li class="lvl-5">Syncthing采用P2P（点对点）架构，没有中央服务器，所有数据传输直接在设备之间进行。这不仅提高了数据传输速度，还消除了对第三方服务器的依赖。</li></ul></li><li class="lvl-3"><p><strong>跨平台支持</strong>：</p><ul class="lvl-2"><li class="lvl-5">Syncthing支持多种操作系统，包括Windows、macOS、Linux、BSD、Solaris、Android等，能够满足不同用户的需求。</li></ul></li><li class="lvl-3"><p><strong>安全性</strong>：</p><ul class="lvl-2"><li class="lvl-5">数据在传输过程中使用TLS加密，确保通信的安全性。此外，每个节点都有唯一的设备ID，通过设备ID进行认证和连接，防止未经授权的设备访问。</li></ul></li><li class="lvl-3"><p><strong>实时同步</strong>：</p><ul class="lvl-2"><li class="lvl-5">文件修改后会立即触发同步操作，实现实时更新。Syncthing能够检测文件的变化，并迅速同步到其他设备上。</li></ul></li><li class="lvl-3"><p><strong>版本控制</strong>：</p><ul class="lvl-2"><li class="lvl-5">Syncthing支持文件版本控制，可以保留多个文件版本，方便用户在需要时恢复到之前的版本。</li></ul></li><li class="lvl-3"><p><strong>配置灵活</strong>：</p><ul class="lvl-2"><li class="lvl-5">Syncthing提供了丰富的配置选项，用户可以根据需要设置同步目录、同步频率、带宽限制等参数，满足不同的使用场景。</li></ul></li><li class="lvl-3"><p><strong>简单易用</strong>：</p><ul class="lvl-2"><li class="lvl-5">通过一个友好的Web GUI（图形用户界面），用户可以轻松管理和监控同步状态，进行配置修改。</li></ul></li></ol><h2 id="you-dian" id="优点">优点</h2><ol><li class="lvl-3"><p><strong>隐私保护</strong>：</p><ul class="lvl-2"><li class="lvl-5">因为不依赖于任何中央服务器，用户的数据不会存储在第三方服务器上，完全在用户的掌控之中，极大地保护了隐私。</li></ul></li><li class="lvl-3"><p><strong>高效的带宽利用</strong>：</p><ul class="lvl-2"><li class="lvl-5">Syncthing在同步过程中只传输更改的部分（增量同步），而不是整个文件，从而提高了带宽利用率，节省了传输时间和资源。</li></ul></li><li class="lvl-3"><p><strong>安全性高</strong>：</p><ul class="lvl-2"><li class="lvl-5">使用TLS加密传输数据，设备之间的通信经过认证，防止中间人攻击和未经授权的访问。</li></ul></li><li class="lvl-3"><p><strong>无缝集成</strong>：</p><ul class="lvl-2"><li class="lvl-5">Syncthing可以在多种操作系统上运行，并且支持多设备同步，用户可以轻松地在家用电脑、工作电脑、手机等多个设备之间同步文件。</li></ul></li><li class="lvl-3"><p><strong>社区支持</strong>：</p><ul class="lvl-2"><li class="lvl-5">作为开源项目，Syncthing拥有活跃的社区支持，用户可以从社区获得帮助和建议，及时解决使用过程中遇到的问题。</li></ul></li><li class="lvl-3"><p><strong>定制化</strong>：</p><ul class="lvl-2"><li class="lvl-5">用户可以根据自己的需求进行高度定制，包括选择需要同步的文件夹、设置不同的同步策略和频率、限制带宽使用等。</li></ul></li><li class="lvl-3"><p><strong>可靠性</strong>：</p><ul class="lvl-2"><li class="lvl-5">Syncthing的设计使其在网络断开后能够自动恢复同步操作，并且支持自动解决同步冲突，确保数据的一致性和可靠性。</li></ul></li></ol><h1 id="an-zhuang-jiao-cheng">安装教程</h1><blockquote><p>注：博主安装过该工具，下面的安装教程，可能会出现一点点区别，不过按照以下操作进行搭建是可以成功的。</p></blockquote><p>官方下载地址：<a href="https://syncthing.net/downloads/">https://syncthing.net/downloads/</a><br>选择对应的版本进行下载。<br><img src="https://bu.dusays.com/2024/12/08/67557f19ee452.png" alt="img"></p><p>本文采用两个同步平台为Windows和Ubuntu。可以通过链接：<a href="https://wwt.lanzoue.com/b0fomam7g%E4%B8%8B%E8%BD%BD%E6%9C%AC%E6%96%87%E6%89%80%E5%AF%B9%E5%BA%94%E7%9A%84%E5%AE%89%E8%A3%85%E5%8C%85%E3%80%82%E4%B8%8B%E8%BD%BD%E5%AF%86%E7%A0%81%EF%BC%9Ahx90">https://wwt.lanzoue.com/b0fomam7g下载本文所对应的安装包。下载密码：hx90</a></p><blockquote><p>两台电脑能实现文件同步的前提是两台电脑的网络能够相互访问。如果一台电脑在内网中，一台在有公网IP的服务器上。可以用有公网IP的服务器搭建一个frp内网穿透工具，通过内网穿透后，就可以实现两台电脑进行网络通信了。</p></blockquote><h2 id="windows-an-zhuang" id="Windows安装">Windows安装</h2><p>解压安装包，然后双击<code>syncthing.exe</code>打开。</p><p><img src="https://bu.dusays.com/2024/12/08/67557f2c0df13.png" alt="img"></p><p>出现这个界面后，可以看见web界面访问地址。初次安装应该会直接在浏览器中打开该地址，然后有一个提示对话框，匿名报告相关的，可以选择否。</p><p><img src="https://bu.dusays.com/2024/12/08/67557f36c8c00.png" alt="img"></p><p>能出现该界面就说明安装成功了。先不用管界面是否完全一样，下面会介绍如何进行配置。</p><h2 id="ubuntu-an-zhuang" id="Ubuntu安装">Ubuntu安装</h2><p>将Linux版的文件上传到服务器，这里使用xshell配合xftp进行操作。在xshell中连接成功后，可以点上面图标。</p><p><img src="https://bu.dusays.com/2024/12/08/67557f476488b.png" alt="img"></p><p>接下来就可以将文件拖拽到Ubuntu中了。</p><p><img src="https://bu.dusays.com/2024/12/08/67557f4dab45e.png" alt="img"></p><p>接下来解压文件<code>tar -zxf syncthing-linux-amd64-v1.27.9.tar.gz</code>。</p><p><img src="https://bu.dusays.com/2024/12/08/67557f559f317.png" alt="img"></p><p>这里可以修改文件夹的名称。用<code>mv syncthing-linux-amd64-v1.27.9 syncthing</code>就可以。博主前面安装过了，这点就不修改了。进入<code>syncthing-linux-amd64-v1.27.9</code>文件夹。使用<code>./syncthing serve</code>就可以启动。</p><p><img src="https://bu.dusays.com/2024/12/08/67557f5f1175e.png" alt="img"></p><p>这时如果是图形化的Ubuntu，就可以在Ubuntu浏览器中打开<code>http://127.0.0.1:8384/</code>。博主采用的是腾讯云的vps，直接用ip访问不了。这里需要进行一步操作。</p><h2 id="pei-zhi-yuan-cheng-ip-fang-wen" id="配置远程ip访问">配置远程ip访问</h2><p>先<code>Ctrl + C</code>停掉服务。查看<a href="https://docs.syncthing.net/index.html">官方文档</a>后，使用命令<code>./syncthing serve --gui-address=0.0.0.0:8384</code>配置。</p><p><img src="https://bu.dusays.com/2024/12/08/67557f6f04ead.png" alt="img"></p><p>这样就可以远程通过ip访问了，不过你的服务器防火墙需要放行端口。</p><p><img src="https://bu.dusays.com/2024/12/08/67557f74696d7.png" alt="img"></p><h2 id="pei-zhi-tong-bu-wen-jian-jia" id="配置同步文件夹">配置同步文件夹</h2><p>这里需要用到工具的ID，先去服务端查看，启动服务的时候就会显示，现在可以通过web界面进行查看。客户端同理。<br><img src="https://bu.dusays.com/2024/12/08/67557f7be6fc8.png" alt="img"></p><p><img src="https://bu.dusays.com/2024/12/08/67557f86d2b65.png" alt="img"></p><p>刚才复制的是服务端的ID，那么现在就打开客户端的web管理界面。</p><p><img src="https://bu.dusays.com/2024/12/08/67557f90a2098.png" alt="img"></p><p><img src="https://bu.dusays.com/2024/12/08/67557f98a4ea1.png" alt="img"></p><p>如果只是局域网操作，这里直接保存即可。如果想公网访问，就可以内网穿透工具。在服务器搭建内网穿透工具，可以参考这篇文章：<a href="https://blog.csdn.net/weixin_42951763/article/details/140420245">https://blog.csdn.net/weixin_42951763/article/details/140420245</a><br>只需要将链接中Windows客户端的配置修改即可，这里给出一个参考。</p><p><img src="https://bu.dusays.com/2024/12/08/67557fa659b65.png" alt="img"></p><p>在启动的时候可以看见tcp使用的默认端口。</p><p><img src="https://bu.dusays.com/2024/12/08/67557faea27f2.png" alt="img"></p><p><img src="https://bu.dusays.com/2024/12/08/67557fc19c72c.png" alt="img"></p><p>配置Ubuntu服务端。打开服务端的web界面。</p><p><img src="https://bu.dusays.com/2024/12/08/67557fd0c8bc1.png" alt="img"></p><p>在高级设置中，配置一下地址。</p><p><img src="https://bu.dusays.com/2024/12/08/67557fdad81b3.png" alt="img"></p><p>这里再解释一下这个地址。<br>Windows中的IP不是公网IP，所以Ubuntu服务端不能直接访问到Windows这个客户端。因此才有了frp内网穿透，把Windows映射到公网中。通过映射后的公网IP加上端口，就可以访问到Windows这个内网中的客户端了。</p><p>接下来就可以创建共享的文件夹了。先在Windows这边创建。</p><p><img src="https://bu.dusays.com/2024/12/08/67557fe85ebb7.png" alt="img"></p><p><img src="https://bu.dusays.com/2024/12/08/67557ff3c5883.png" alt="img"></p><p>文件夹共享给Ubuntu。</p><p><img src="https://bu.dusays.com/2024/12/08/67557ffd918de.png" alt="img"></p><p>文件夹版本控制。<a href="https://docs.syncthing.net/v1.27.7/users/versioning">官方文档的文件版本控制介绍</a>。</p><p><img src="https://bu.dusays.com/2024/12/08/67558005bd232.png" alt="img"></p><p><img src="https://bu.dusays.com/2024/12/08/6755800dcb1d2.png" alt="img"></p><p>到这点Windows的就配置好了。这时去到服务端Ubuntu的web界面。</p><p><img src="https://bu.dusays.com/2024/12/08/6755802e09525.png" alt="img"></p><p>可以看见出现了一个新文件夹，这时点击添加即可。如果没有出现，可能的原因是服务端这边还没有与Windows进行连接。再次检查一下远程设备是否已经同步完成。</p><p><img src="https://bu.dusays.com/2024/12/08/67558035beeaa.png" alt="img"></p><p>这里选择共享给Windows，这样就可以把Ubuntu变化后的文件也同步到Windows里面。</p><p><img src="https://bu.dusays.com/2024/12/08/6755803e1d57e.png" alt="img"></p><p>这样就实现了简单的双向同步文件。</p><h1 id="syncthing-kai-ji-zi-qi">Syncthing开机自启</h1><h2 id="windows" id="Windows">Windows</h2><p>利用bat文件来实现。在Syncthing的文件根目录中新建一个bat文件，放在这里是方便管理，也可以放在其他地方。</p><p><img src="https://bu.dusays.com/2024/12/08/67558045f0bfb.png" alt="img"></p><p>bat文件内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;%1&quot;</span>==<span class="string">&quot;h&quot;</span> goto begin</span><br><span class="line"> </span><br><span class="line">start mshta vbscript:createobject(<span class="string">&quot;wscript.shell&quot;</span>).run(<span class="string">&quot;&quot;</span><span class="string">&quot;%~nx0&quot;</span><span class="string">&quot; h&quot;</span>,0)(window.close)&amp;&amp;<span class="built_in">exit</span></span><br><span class="line"> </span><br><span class="line">:begin</span><br><span class="line"> </span><br><span class="line"><span class="built_in">cd</span> /d D:\syncthing &amp;&amp; syncthing.exe serve --no-browser --no-restart --logflags=0</span><br></pre></td></tr></table></figure><p>只需要修改下图红框中的路径为自己的路径即可。</p><p><img src="https://bu.dusays.com/2024/12/08/6755804d14778.png" alt="img"></p><p>然后保存退出。在bat文件右键创建快捷方式。</p><p><img src="https://bu.dusays.com/2024/12/08/67558053e2ee9.png" alt="img"></p><p>使用<code>win + R</code>打开运行对话框，输入：<code>shell:startup</code>回车。将刚才创建的快捷方式移动到这个目录里面。</p><p><img src="https://bu.dusays.com/2024/12/08/6755805b46014.png" alt="img"></p><h2 id="ubuntu" id="Ubuntu">Ubuntu</h2><p>查看syncthing的目录，然后记录一下这个目录。</p><p><img src="https://bu.dusays.com/2024/12/08/675580833a744.png" alt="img"></p><p>使用命令：<code>sudo vim /etc/systemd/system/syncthing@ubuntu.service</code>，@后填写用户名。</p><p><img src="https://bu.dusays.com/2024/12/08/6755808bb3c8a.png" alt="img"></p><p>下图红框中的路径要修改为你自己对应的，也就是刚才查看的路径。下图绿框的syncthing是表示文件名。</p><p><img src="https://bu.dusays.com/2024/12/08/675580924abb7.png" alt="img"></p><p>文件内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Syncthing - Open Source Continuous File Synchronization <span class="keyword">for</span> %I</span><br><span class="line">Documentation=man:syncthing(1)</span><br><span class="line">After=network.target</span><br><span class="line">StartLimitIntervalSec=60</span><br><span class="line">StartLimitBurst=4</span><br><span class="line"> </span><br><span class="line">[Service]</span><br><span class="line">User=%i</span><br><span class="line">ExecStart=/home/ubuntu/syncthing/syncthing serve --no-browser --no-restart --logflags=0 --gui-address=0.0.0.0:8384</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=1</span><br><span class="line">SuccessExitStatus=3 4</span><br><span class="line">RestartForceExitStatus=3 4</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Hardening</span></span><br><span class="line">ProtectSystem=full</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line">SystemCallArchitectures=native</span><br><span class="line">MemoryDenyWriteExecute=<span class="literal">true</span></span><br><span class="line">NoNewPrivileges=<span class="literal">true</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Elevated permissions to sync ownership (disabled by default),</span></span><br><span class="line"><span class="comment"># see https://docs.syncthing.net/advanced/folder-sync-ownership</span></span><br><span class="line"><span class="comment">#AmbientCapabilities=CAP_CHOWN CAP_FOWNER</span></span><br><span class="line"> </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>提升文件的权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> +x /etc/systemd/system/syncthing@ubuntu.service</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/12/08/675580a6d4234.png" alt="img"></p><p>接下来可以使用这些命令来操作了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动syncthing@ubuntu</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl start syncthing@ubuntu</span><br><span class="line"><span class="comment"># 开机自动启动syncthing@ubuntu</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> syncthing@ubuntu</span><br><span class="line"><span class="comment"># 重启syncthing@ubuntu</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl restart syncthing@ubuntu</span><br><span class="line"><span class="comment"># 停止syncthing@ubuntu</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl stop syncthing@ubuntu</span><br><span class="line"><span class="comment"># 查看syncthing@ubuntu状态</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl status syncthing@ubuntu</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Syncthing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Syncthing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenWrt 扩容 Overlay💽</title>
      <link href="/2024/12/02/OpenWrt%E6%89%A9%E5%AE%B9Overlay/"/>
      <url>/2024/12/02/OpenWrt%E6%89%A9%E5%AE%B9Overlay/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>转载于esir大佬<a href="https://www.youtube.com/watch?v=YwbwzuXKNlg&amp;t=26s">视频教程</a>，大佬的<a href="https://www.youtube.com/@eSirPlayGround">油管主页</a>，请支持一下！</p></blockquote><h1 id="yi-cha-kan-bing-xin-jian-fen-qu">一、查看并新建分区</h1><p>首先，使用<code>SSH</code>命令登录<code>OpenWrt</code>， 执行<code>lsblk</code>命令查看当前固件分区格式，并得到固件现有<code>Overlay</code>空间大小，自己心里有个数，准备扩容多大。</p><p><img src="https://bu.dusays.com/2025/01/05/677a70703ceee.png" alt="图1"></p><p>使用<code>cfdisk</code>命令打开分区工具。通过键盘方向键，选中<code>Free space(自由分区)</code>，并选择<code>NEW(新建)</code>:</p><p><img src="https://bu.dusays.com/2025/01/05/677a707147585.png" alt="图2"></p><p>设置<code>Overlay</code>所需的空间大小，推荐1~2GB即可，保存分区修改设置:</p><p><img src="https://bu.dusays.com/2025/01/05/677a70725baaf.png" alt="图3"></p><p>按提示输入<code>yes</code>确认保存设置，然后移动左右方向键选择<code>[Quit]</code>退出<code>cfdisk</code>工具。</p><h1 id="er-gua-zai-fen-qu">二、挂载分区</h1><p>然后按如下方法格式化并挂载<code>sda4</code>分区:</p><ul class="lvl-0"><li class="lvl-2"><p>把新建的<code>sda4</code>分区格式化为<code>ext4</code>分区格式，命令为：<code>mkfs.ext4 /dev/sda4</code>;</p></li><li class="lvl-2"><p>把<code>sda4</code>分区从<code>/dev</code>目录移动到<code>/mnt</code>挂载目录下，命令为：<code>mount /dev/sda4 /mnt/sda4</code>:</p></li></ul><p><img src="https://bu.dusays.com/2025/01/05/677a707344c76.png" alt="图4"></p><ul class="lvl-0"><li class="lvl-2"><p>查看<code>sda4</code>是否挂载到<code>mnt</code>目录下，命令为：<code>ls /mnt/sda4</code>；</p></li><li class="lvl-2"><p>进入<code>overlay</code>文件夹，命令为：<code>cd /overlay</code>；然后拷贝源<code>overlay</code>目录内所有配置文件到<code>sda4</code>目录，命令为：<code>cp -r /overlay/* /mnt/sda4</code>：</p></li></ul><p><img src="https://bu.dusays.com/2025/01/05/677a707430396.png" alt="图5"></p><h1 id="san-open-wrt-tian-jia-gua-zai-dian">三、OpenWrt添加挂载点</h1><p>进入<code>OpenWrt</code>控制页面，<strong>找到系统-&gt;挂载点-&gt;添加</strong>，添加<code>sda4</code>挂载点为<code>Overlay</code>外部挂载点，保存并应用：</p><p><img src="https://bu.dusays.com/2025/01/05/677a70754bf4a.png" alt="图6"></p><p><img src="https://bu.dusays.com/2025/01/05/677a70767d3dd.png" alt="图7-20230203010643575"></p><p>重启<code>OpenWrt</code>后检查扩容是否完成：</p><blockquote><p>扩容前：</p></blockquote><p><img src="https://bu.dusays.com/2025/01/05/677a70777f500.png" alt="图8"></p><blockquote><p>扩容后：</p></blockquote><p><img src="https://bu.dusays.com/2025/01/05/677a70786895a.png" alt="图9"></p><p><strong>现在，你可以随心所欲地安装需要的应用了。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> OpenWrt </category>
          
          <category> Overlay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> OpenWrt </tag>
            
            <tag> Overlay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git安装配置教程📓</title>
      <link href="/2024/12/02/git%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"/>
      <url>/2024/12/02/git%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="yi-git-shi-shi-yao">一、Git是什么</h1><blockquote><p><code>Git</code>是目前世界上最先进的<a href="https://so.csdn.net/so/search?q=%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F&amp;spm=1001.2101.3001.7020">分布式版本控制系统</a>，没有之一！说到<code>Git</code>,另一个需要知道的便是<code>GitHub</code>，<code>GitHub</code>是目前使用最多的社交代码托管平台。<code>GitHub</code>，字面意思就是<code>Git</code>中心枢纽的意思，它是基于<code>Git</code>的，仅支持<code>git</code>作为唯一的版本库格式进行托管，故名<code>GitHub</code>。</p></blockquote><h1 id="er-an-zhuang-git">二、安装Git</h1><h2 id="1-xia-zai-git" id="1-下载git">1.下载git</h2><p><code>git</code>官网地址：<a href="https://git-scm.com/">https://git-scm.com/</a><br><img src="https://bu.dusays.com/2024/12/08/675522c669914.png" alt=""><br>但是如果没梯子下载会非常慢，因为服务器在国外。也可在国内校园网联合镜像站下载：<a href="https://mirrors.cernet.edu.cn/list/git-for-windows">https://mirrors.cernet.edu.cn/list/git-for-windows</a></p><h2 id="2-an-zhuang-git" id="2-安装git">2.安装git</h2><p>双击打开上面已经下好的<code>exe</code>执行文件,选择安装位置，然后都默认下一步直接安装即可。</p><p><img src="https://bu.dusays.com/2024/12/08/675522e79cdc9.png" alt=""></p><p><img src="https://bu.dusays.com/2024/12/08/6755230259fe9.png" alt=""></p><h2 id="3-jian-ce-git" id="3-检测git">3.检测git</h2><p>按键盘上的<code>win+R</code>打开运行，输入<code>cmd</code>打开终端，然后输入<code>git --version </code>查看<code>Git</code>版本信息</p><p><img src="https://bu.dusays.com/2024/12/08/6755230de9875.png" alt=""></p><h1 id="san-pei-zhi-git">三、配置Git</h1><h2 id="1-pei-zhi-ben-di-xin-xi" id="1-配置本地信息">1.配置本地信息</h2><p>为了在后面上传项目到<code>github</code>时方便知道是谁上传的，需要给本机<code>git</code>配置用户名和邮箱：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;Your Name&quot;</span><br><span class="line">git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><p>打开 <code>git bash</code>（也可任意位置右键打开 <code>git bash</code>）：</p><p><img src="https://bu.dusays.com/2024/12/08/675523331e38f.png" alt=""><br><strong>查看配置命令：<code>git config --list</code></strong></p><h2 id="2-pei-zhi-ssh" id="2-配置SSH">2.配置SSH</h2><h3 id="1-ssh-yu-ssh-key-shi-shi-yao" id="（1）SSH与SSH-Key是什么？">（1）SSH与SSH Key是什么？</h3><p>要了解<code>SSH key</code>简介，首先得熟悉<code>SSH</code>(Secure Shell的缩写 ) 是一个允许两台电脑之间通过安全的连接进行数据交换的网络协议。<code>SSH </code>密钥对可以让您方便的登录到 <code>SSH </code>服务器，而无需输入密码。<code>SSH </code>密钥对总是成双出现的，一把公钥，一把私钥。这里用到了非对称公钥加密体系，生成的公钥放到<code>github</code>的网站上，生成的私钥放在自己的电脑上。</p><h3 id="2-sheng-cheng-ssh-key" id="（2）生成SSH-Key">（2）生成SSH Key</h3><p><code>ssh key</code>生成命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C “注册邮箱”</span><br><span class="line">//执行后一直回车即可</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/12/08/6755233f56f87.png" alt=""></p><h3 id="3-huo-qu-ssh-key-gong-yao-nei-rong-id-rsa-pub" id="（3）获取ssh-key公钥内容（id-rsa-pub）">（3）获取ssh key公钥内容（id_rsa.pub）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">cat id_rsa.pub</span><br></pre></td></tr></table></figure><p>如下图所示，复制该内容</p><p><img src="https://bu.dusays.com/2024/12/08/6755234ca7b92.png" alt=""></p><h3 id="4-github-zhang-hao-shang-tian-jia-gong-yao" id="（4）Github账号上添加公钥">（4）Github账号上添加公钥</h3><p>打开个人的<code>Github</code>主页，进入<code>Settings</code>设置</p><p><img src="https://bu.dusays.com/2024/12/08/67552360128ba.png" alt=""><br>添加<code>ssh key</code>，把刚才复制的内容粘贴上去保存即可</p><p><img src="https://bu.dusays.com/2024/12/08/6755236ea47bd.png" alt=""><br><img src="https://bu.dusays.com/2024/12/08/6755238740260.png" alt=""></p><h3 id="5-yan-zheng-shi-fou-pei-zhi-cheng-gong" id="（5）验证是否配置成功">（5）验证是否配置成功</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>显示如下信息表明设置成功</p><p><img src="https://bu.dusays.com/2024/12/30/677290645f430.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows系统中Java环境变量的配置🔧</title>
      <link href="/2024/12/02/Windows%E7%B3%BB%E7%BB%9F%E4%B8%ADJava%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/12/02/Windows%E7%B3%BB%E7%BB%9F%E4%B8%ADJava%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="yi-huan-jing-bian-liang">一、环境变量</h1><h2 id="1-shi-yao-shi-huan-jing-bian-liang" id="1-什么是环境变量">1. 什么是环境变量</h2><p>百度百科中这样定义环境变量 :</p><blockquote><p>环境变量（environment variables）一般是指在操作系统中用来指定操作系统运行环境的一些参数，如：临时文件夹位置和系统文件夹位置等。环境变量是在操作系统中一个具有特定名字的对象，它包含了一个或者多个应用程序所将使用到的信息。例如<code>Windows</code>和<code>DOS</code>操作系统中的path环境变量，当要求系统运行一个程序而没有告诉它程序所在的完整路径时，系统除了在当前目录下面寻找此程序外，还应到<code>path</code>中指定的路径去找。用户通过设置环境变量，来更好的运行进程。</p></blockquote><p>总结一下：就是告诉系统，当要求系统运行一个程序而没有告诉它程序所在的完整路径时，系统除了在当前目录下面寻找此程序外，还应到哪些目录下去寻找。<strong>可以实现软件公用和系统运行的问题。</strong></p><h2 id="2-java-wei-shi-yao-yao-pei-zhi-huan-jing-bian-liang" id="2-java为什么要配置环境变量">2. java为什么要配置环境变量</h2><p>配置环境变量是为了方便控制台编译和运行<code>java</code>文件。如果不进行环境变量的配置就必须去<code>java</code>的程序目录中去进行编译和运行。在执行<code>java.exe</code>命令时，首先会在当前目录找<code>java.exe</code>程序，如果你的java程序文件刚好在<code>java.exe</code>所在的目录下即可运行成功，如果没在，系统就会去<code>path</code>变量中指定的路径寻找，没找到就不执行。而我们配置环境变量以后，<code>path</code>变量中就有了指定的路径，控制台就会找到<code>java</code>文件并且运行成功。配置环境变量的前提是安装了<code>jdk</code>。<a href="https://www.oracle.com/java/technologies/downloads/">JDK的下载地址</a>，建议下载<code>JDK8</code>版本，这个版本是公司的长期开发版本。</p><h1 id="er-pei-zhi-huan-jing-bian-liang">二、配置环境变量</h1><h2 id="1-pei-zhi-huan-jing-bian-liang-wei-zhi" id="1-配置环境变量位置">1.配置环境变量位置</h2><p>依次打开我的电脑(右键)→属性→高级系统设置→高级→环境变量（或通过控制面板-系统和安全-系统-高级系统设置-高级-环境变量）</p><p><img src="https://bu.dusays.com/2024/12/30/677292dd51d1f.png" alt="在这里插入图片描述"></p><p><img src="https://bu.dusays.com/2024/12/30/677292dfa62b3.png" alt="在这里插入图片描述"></p><p><img src="https://bu.dusays.com/2024/12/30/677292e0d4598.png" alt="在这里插入图片描述"></p><p><img src="https://bu.dusays.com/2024/12/30/677292e217371.png" alt="在这里插入图片描述"></p><h2 id="2-yong-hu-bian-liang-yu-xi-tong-bian-liang-de-qu-bie" id="2-用户变量与系统变量的区别">2.用户变量与系统变量的区别</h2><p>系统环境变量，对所有用户起作用,而用户环境变量只对当前用户起作用。<br>**系统变量：**系统变量对所有用户有效，与<code>windows</code>操作系统包括网络状况有关，由操作系统定义。<br>**用户变量：**用户变量只对当前用户有效，由操作系统、某些应用程序以及用户建立。任何用户都可以添加、修改或删除。</p><h2 id="3-wei-java-pei-zhi-huan-jing-bian-liang" id="3-为java配置环境变量">3.为java配置环境变量</h2><h3 id="1-java-home-huan-jing-bian-liang" id="（1）JAVA-HOME环境变量">（1）JAVA_HOME环境变量</h3><p>创建变量名为:<code>JAVA_HOME</code>。变量值：安装<code>jdk</code>版本文件夹目录下的<code>bin</code>文件夹安装<code>jdk</code>版本文件夹目录下的<code>bin</code>文件夹。具体如下图：</p><p><img src="https://bu.dusays.com/2024/12/30/677292e3505c3.png" alt="在这里插入图片描述"></p><h3 id="2-pei-zhi-path-bian-liang" id="（2）配置Path变量">（2）配置Path变量</h3><p>系统变量与用户变量的<code>PATH</code>：告诉系统可执行文件放在什么路径（平常执行程序的路径，要放在<code>PATH</code>里面，不能建一个变量，<code>cmd</code>会提示“不是内部或外部命令，或者不是可执行程序”）</p><p><img src="https://bu.dusays.com/2024/12/30/677292e481a38.png" alt="在这里插入图片描述"></p><p><img src="https://bu.dusays.com/2024/12/30/677292e5ba42b.png" alt="在这里插入图片描述"></p><p>在<code>Path</code>中新建以下：</p><blockquote><p>%JAVA_HOME%\jre\bin<br>%JAVA_HOME%\bin</p></blockquote><h3 id="3-pei-zhi-class-path-bian-liang" id="（3）配置ClassPath变量">（3）配置ClassPath变量</h3><p>配置<code>CLASSPATH</code>变量方法和<code>JAVA_HOME</code>一样，在初始界面点击新建</p><p><img src="https://bu.dusays.com/2024/12/30/677292e6e8b19.png" alt="在这里插入图片描述">变量值一定不可以拼写错误，可直接复制：</p><blockquote><p>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</p></blockquote><h1 id="san-jian-cha-huan-jing-bian-liang-shi-fou-pei-zhi-cheng-gong">三、检查环境变量是否配置成功</h1><h2 id="1-jian-cha-shi-fou-cheng-gong" id="1-检查是否成功">1.检查是否成功</h2><p><code>Win+R</code> 按键，打开运行提示框，输入<code>cmd</code></p><p><img src="https://bu.dusays.com/2024/12/30/677292e807dc4.png" alt="在这里插入图片描述"></p><h3 id="1-jian-cha-yun-xing-huan-jing" id="（1）检查运行环境：">（1）检查运行环境：</h3><p>在命令行输入<code>java</code>,点击回车，查看<code>java</code>运行环境是否正常。出现以下运行结果，则成功：</p><p><img src="https://bu.dusays.com/2024/12/30/677292e92dc16.png" alt="在这里插入图片描述"></p><h3 id="2-jian-cha-bian-yi-huan-jing" id="（2）检查编译环境">（2）检查编译环境</h3><p>在命令行输入<code>javac</code>，点击回车，查看<code>java</code>编译环境是否正常。出现一以下运行结果，则成功：</p><p><img src="https://bu.dusays.com/2024/12/30/677292ea6f3d8.png" alt="在这里插入图片描述"></p><h3 id="3-jian-cha-jdk-ban-ben" id="（3）检查jdk版本">（3）检查jdk版本</h3><p>在命令行输入<code>java -version</code>，点击回车，查看当前安装的<code>jdk</code>版本。出现一以下运行结果，则成功：</p><p><img src="https://bu.dusays.com/2024/12/30/677292eb90f91.png" alt="在这里插入图片描述"></p><h2 id="2-pei-zhi-shi-bai" id="2-配置失败">2.配置失败</h2><p><code>javac</code>运行失败，<code>java -version</code>运行成功，这种情况一般都是配置环境的问题，建议重新配置一下，看看是不是哪里配置错误，配置后再次运行看看是否成功。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Java </category>
          
          <category> 环境变量配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于OpenWrt udpxy 插件实现IPTV全平台观看📺</title>
      <link href="/2024/12/02/%E5%9F%BA%E4%BA%8E%20OpenWrt%20udpxy%20%E6%8F%92%E4%BB%B6%E5%AE%9E%E7%8E%B0%20IPTV%20%E5%85%A8%E5%B9%B3%E5%8F%B0%E8%A7%82%E7%9C%8B/"/>
      <url>/2024/12/02/%E5%9F%BA%E4%BA%8E%20OpenWrt%20udpxy%20%E6%8F%92%E4%BB%B6%E5%AE%9E%E7%8E%B0%20IPTV%20%E5%85%A8%E5%B9%B3%E5%8F%B0%E8%A7%82%E7%9C%8B/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="fang-an-you-shi-he-wang-luo-tuo-bu">方案优势和网络拓扑</h1><p>该方案不需要拿到光猫管理员（虽然折腾半天拿到了发现可以不用），也不需要设置 VLAN，因为是双线接入只会多占用一个软路由端口，简单几步配置就能支持 IPTV。具体网络拓扑图如下：</p><p><img src="https://bu.dusays.com/2024/12/08/675521bd5f8b1.png" alt="img"></p><p>简单介绍一下拓扑情况，光纤入户通过光猫再到安装 OpenWrt 的软路由，光猫使用桥接通过 OpenWrt 拔号上网（光猫使用路由模式直接拔号也没有影响）。光猫的上网口接入软路由的 WAN（eth0）口，IPTV 接入软路由的 eth1，后面会进行配置，还有一个 Wifi 作为 AP 让其它设备接入。</p><h1 id="zhun-bei-gong-zuo">准备工作</h1><ul class="lvl-0"><li class="lvl-2"><p>光猫 1 台，需要开通 IPTV 服务；</p></li><li class="lvl-2"><p>软路由 1 台，至少 3 个网口以上，博主使用的是一台 <code>J4125</code> 4 网口软路由，并已刷 <code>esir</code> 高大全<code> OpenWrt R23.3.3 GDQ V1[2023]</code> 系统；</p></li><li class="lvl-2"><p>电脑或手机 1 台，用于配置相关设置。</p></li></ul><h1 id="fang-fa-bu-zou">方法 / 步骤</h1><h2 id="1-huo-qu-ben-di-iptv-zu-bo-yuan-di-zhi" id="1-获取本地-IPTV-组播源地址">1. 获取本地 IPTV 组播源地址</h2><p>博主这里是甘肃电信，组播源地址我是从恩山论坛找的 (原帖地址为 <a href="https://www.right.com.cn/forum/thread-8291004-1-3.html">https://www.right.com.cn/forum/thread-8291004-1-3.html</a>)，因为博主之前把自家的电信机顶盒刷了第三方系统，不能抓包了。抓包方法可自行百度，也可参照 B 站 up 主 <a href="https://space.bilibili.com/5626102">科技宅小明</a>的这期视频教程<a href="https://www.bilibili.com/video/BV1Ka411W7Hf/?spm_id_from=333.337.search-card.all.click&amp;vd_source=c5a46efcbe68c08701ad742bbbd03c4e">【硬核】干掉 IPTV，随时随地看电视，超清无开机广告！</a>。获取的组播源地址经过整理后如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">CCTV-<span class="number">1</span>,rtp://<span class="number">239.255</span>.<span class="number">30.1</span>:<span class="number">8231</span></span><br><span class="line">CCTV-<span class="number">2</span>,rtp://<span class="number">239.255</span>.<span class="number">30.2</span>:<span class="number">8231</span></span><br><span class="line">爱综艺,rtp://<span class="number">239.255</span>.<span class="number">30.185</span>:<span class="number">8231</span></span><br><span class="line">CCTV-<span class="number">4</span>,rtp://<span class="number">239.255</span>.<span class="number">30.3</span>:<span class="number">8231</span></span><br><span class="line">爱体育,rtp://<span class="number">239.255</span>.<span class="number">30.186</span>:<span class="number">8231</span></span><br><span class="line">爱电影,rtp://<span class="number">239.255</span>.<span class="number">30.187</span>:<span class="number">8231</span></span><br><span class="line">CCTV-<span class="number">7</span>,rtp://<span class="number">239.255</span>.<span class="number">30.4</span>:<span class="number">8231</span></span><br><span class="line">爱大剧,rtp://<span class="number">239.255</span>.<span class="number">30.188</span>:<span class="number">8231</span></span><br><span class="line">CCTV-<span class="number">9</span>,rtp://<span class="number">239.255</span>.<span class="number">30.74</span>:<span class="number">8231</span></span><br><span class="line">CCTV-<span class="number">10</span>,rtp://<span class="number">239.255</span>.<span class="number">30.6</span>:<span class="number">8231</span></span><br><span class="line">CCTV-<span class="number">11</span>,rtp://<span class="number">239.255</span>.<span class="number">30.7</span>:<span class="number">8231</span></span><br><span class="line">CCTV-<span class="number">12</span>,rtp://<span class="number">239.255</span>.<span class="number">30.8</span>:<span class="number">8231</span></span><br><span class="line">CCTV-新闻,rtp://<span class="number">239.255</span>.<span class="number">30.9</span>:<span class="number">8231</span></span><br><span class="line">CCTV-少儿,rtp://<span class="number">239.255</span>.<span class="number">30.10</span>:<span class="number">8231</span></span><br><span class="line">CCTV-音乐,rtp://<span class="number">239.255</span>.<span class="number">30.11</span>:<span class="number">8231</span></span><br><span class="line">CCTV-<span class="number">17</span>,rtp://<span class="number">239.255</span>.<span class="number">30.95</span>:<span class="number">8231</span></span><br><span class="line">CCTV-NEWS,rtp://<span class="number">239.255</span>.<span class="number">30.5</span>:<span class="number">8231</span></span><br><span class="line">CCTV-<span class="number">16</span> <span class="number">4</span>K,rtp://<span class="number">239.255</span>.<span class="number">30.80</span>:<span class="number">8231</span></span><br></pre></td></tr></table></figure><h2 id="2-she-zhi-ruan-lu-you" id="2-设置软路由">2. 设置软路由</h2><h3 id="2-1-shi-fang-wang-kou" id="2-1-释放网口">2-1 释放网口</h3><p>在 <code>网络 -&gt; 接口 </code>中找到 <code>LAN</code> 编辑，在物理设置里面把用于 IPTV 的物理端口 <code>eth1</code> 取消勾选。</p><h3 id="2-2-xin-jian-iptv-jie-kou" id="2-2-新建-IPTV-接口">2-2 新建 IPTV 接口</h3><ul class="lvl-0"><li class="lvl-2"><p>在 <code>网络 -&gt; 接口</code> 中创建新接口，命名 <code>IPTV</code>（其它名字也可以方便记忆），协议选择<code>静态 IP</code>。配置 IP 地址，不要和你当前路由同一网段就行，博主路由器的网段是 <code>192.168.5.x</code>，所以博主把 <code>IPTV</code> 的网段设置为 <code>192.168.2.1</code> 。</p></li><li class="lvl-2"><p>然后在<code>高级设置</code>里面把跃点数设置为 <code>50</code> ，<code>WAN</code> 口设置的 <code>20</code>。</p></li><li class="lvl-2"><p>在<code>物理设置</code> 里面选择刚刚释放用于 IPTV 的 <code>eth1</code>。</p></li><li class="lvl-2"><p>最后在 <code>防火墙</code> 里新建一个 <code>iptv</code> ，保存并应用。</p></li></ul><blockquote><p>注意：新建防火墙后观察iptv对应的入站数据、出站数据及转发是否为接受，如果不是，请务必全部改过来，要不然也无法播放成功。如下图：</p></blockquote><p><img src="https://bu.dusays.com/2025/05/10/681ecfb6a2e2e.png" alt="image-20250510120151018"></p><h3 id="2-3-qi-yong-udpxy-cha-jian" id="2-3-启用-udpxy-插件">2-3 启用 udpxy 插件</h3><p>因为博主使用的 OpenWrt 固件中已经集成 <code>udpxy</code>，所以可以直接使用，如果未集成需要到 <code>系统 -&gt; 软件</code> 中进行安装。进入 <code>服务 -&gt; udpxy</code>，点击<code>启用</code>，在<code>绑定 IP/接口</code> 处填写 OpenWrt 软路由 IP 或者 <code>0.0.0.0</code> 也可以，<code>源 IP/接口</code> 使用上面的 IPTV 的接口 <code>eth1</code>，保存并应用。</p><h3 id="2-4-yan-zheng-udpxy-shi-fou-qi-yong-cheng-gong" id="2-4-验证-udpxy-是否启用成功">2-4 验证 udpxy 是否启用成功</h3><p>在浏览器输入 <code>http://&lt;router-ip&gt;:4022/status</code> 如果看到如下图界面，说明配置成功。这里的 <code>router-ip</code> 即为你的软路由的 ip 地址（博主的是 <code>192.168.5.1</code>），也是图中接受客户端的地址。组播地址 <code>192.168.2.1</code> 即为上面 IPTV 接口配置的静态 IP。</p><p><img src="https://bu.dusays.com/2024/12/08/675521dd0cc59.jpg" alt="img"></p><h2 id="3-bo-fang-yan-zheng" id="3-播放验证">3. 播放验证</h2><p>将抓包的 <code>IPTV</code> 本地组播源（例如博主这里的 CCTV-1,<code>rtp://239.255.30.1:8231</code>）修改为 <code>http://192.168.5.1:4022/udp/239.255.30.101:8231</code>，<code>192.168.5.1</code> 即为博主的路由器 IP，使用 PotPlayer 播放器或 VLC 播放器打开该 URL 链接 即可正常播放，如下图：</p><p><img src="https://bu.dusays.com/2024/12/08/6755220c9ef66.jpg" alt="img"></p><p>部分 <code>m3u</code> 文件中的地址是 <code>igmp://x.x.x.x:x</code> ，只需要把协议去掉在前面加上 <code>http://&lt;router-ip&gt;:4022/udp</code> 就可以，最终播放地址是 <code>http://&lt;router-ip&gt;:4022/udp/x.x.x.x:x</code>。</p><p>单个测试成功之后，就可以利用记事本软件的查找替换功能批量修改替换 <code>m3u</code> 中的地址，使用播放器加载修改后的文件。替换后如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CCTV-<span class="number">1</span>,http://<span class="number">192.168</span>.<span class="number">5.1</span>:<span class="number">4022</span>/udp/<span class="number">239.255</span>.<span class="number">30.1</span>:<span class="number">8231</span></span><br><span class="line">CCTV-<span class="number">2</span>,http://<span class="number">192.168</span>.<span class="number">5.1</span>:<span class="number">4022</span>/udp/<span class="number">239.255</span>.<span class="number">30.2</span>:<span class="number">8231</span></span><br><span class="line">爱综艺,http://<span class="number">192.168</span>.<span class="number">5.1</span>:<span class="number">4022</span>/udp/<span class="number">239.255</span>.<span class="number">30.185</span>:<span class="number">8231</span></span><br><span class="line">CCTV-<span class="number">4</span>,http://<span class="number">192.168</span>.<span class="number">5.1</span>:<span class="number">4022</span>/udp/<span class="number">239.255</span>.<span class="number">30.3</span>:<span class="number">8231</span></span><br><span class="line">爱体育,http://<span class="number">192.168</span>.<span class="number">5.1</span>:<span class="number">4022</span>/udp/<span class="number">239.255</span>.<span class="number">30.186</span>:<span class="number">8231</span></span><br><span class="line">爱电影,http://<span class="number">192.168</span>.<span class="number">5.1</span>:<span class="number">4022</span>/udp/<span class="number">239.255</span>.<span class="number">30.187</span>:<span class="number">8231</span></span><br><span class="line">CCTV-<span class="number">7</span>,http://<span class="number">192.168</span>.<span class="number">5.1</span>:<span class="number">4022</span>/udp/<span class="number">239.255</span>.<span class="number">30.4</span>:<span class="number">8231</span></span><br><span class="line">爱大剧,http://<span class="number">192.168</span>.<span class="number">5.1</span>:<span class="number">4022</span>/udp/<span class="number">239.255</span>.<span class="number">30.188</span>:<span class="number">8231</span></span><br><span class="line">CCTV-<span class="number">9</span>,http://<span class="number">192.168</span>.<span class="number">5.1</span>:<span class="number">4022</span>/udp/<span class="number">239.255</span>.<span class="number">30.74</span>:<span class="number">8231</span></span><br><span class="line">CCTV-<span class="number">10</span>,http://<span class="number">192.168</span>.<span class="number">5.1</span>:<span class="number">4022</span>/udp/<span class="number">239.255</span>.<span class="number">30.6</span>:<span class="number">8231</span></span><br><span class="line">CCTV-<span class="number">11</span>,http://<span class="number">192.168</span>.<span class="number">5.1</span>:<span class="number">4022</span>/udp/<span class="number">239.255</span>.<span class="number">30.7</span>:<span class="number">8231</span></span><br><span class="line">CCTV-<span class="number">12</span>,http://<span class="number">192.168</span>.<span class="number">5.1</span>:<span class="number">4022</span>/udp/<span class="number">239.255</span>.<span class="number">30.8</span>:<span class="number">8231</span></span><br></pre></td></tr></table></figure><p>如果你整理的组播源地址是类似上述的 <code>txt</code> 格式的文本文件，你可以全选直播源，打开黑鸟博客的直播源列表格式在线转换 <a href="https://guihet.com/tvlistconvert.html%EF%BC%8C%E7%B2%98%E8%B4%B4%E6%96%87%E6%9C%AC%E5%90%8E%E7%82%B9%E5%87%BB%E8%BD%AC">https://guihet.com/tvlistconvert.html，粘贴文本后点击转</a> M3U。</p><p><img src="https://bu.dusays.com/2024/12/08/6755222d132a0.jpg" alt="img"></p><p>转换完成后点击下载，即可生成一个 <code>tvlist.m3u</code> 的文件，直接使用 PotPlayer 播放器或 VLC 播放器打开即可观看所有节目。转换后的结果如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#EXTM3U</span></span><br><span class="line"><span class="selector-id">#EXTINF</span>:-<span class="number">1</span>,CCTV-<span class="number">1</span></span><br><span class="line">http://<span class="number">192.168</span>.<span class="number">5.1</span>:<span class="number">4022</span>/udp/<span class="number">239.255</span>.<span class="number">30.1</span>:<span class="number">8231</span></span><br><span class="line">#EXTINF:-<span class="number">1</span>,CCTV-<span class="number">2</span></span><br><span class="line">http://<span class="number">192.168</span>.<span class="number">5.1</span>:<span class="number">4022</span>/udp/<span class="number">239.255</span>.<span class="number">30.2</span>:<span class="number">8231</span></span><br><span class="line">#EXTINF:-<span class="number">1</span>,爱综艺</span><br><span class="line">http://<span class="number">192.168</span>.<span class="number">5.1</span>:<span class="number">4022</span>/udp/<span class="number">239.255</span>.<span class="number">30.185</span>:<span class="number">8231</span></span><br><span class="line">#EXTINF:-<span class="number">1</span>,CCTV-<span class="number">4</span></span><br><span class="line">http://<span class="number">192.168</span>.<span class="number">5.1</span>:<span class="number">4022</span>/udp/<span class="number">239.255</span>.<span class="number">30.3</span>:<span class="number">8231</span></span><br><span class="line">#EXTINF:-<span class="number">1</span>,爱体育</span><br><span class="line">http://<span class="number">192.168</span>.<span class="number">5.1</span>:<span class="number">4022</span>/udp/<span class="number">239.255</span>.<span class="number">30.186</span>:<span class="number">8231</span></span><br><span class="line">#EXTINF:-<span class="number">1</span>,爱电影</span><br><span class="line">http://<span class="number">192.168</span>.<span class="number">5.1</span>:<span class="number">4022</span>/udp/<span class="number">239.255</span>.<span class="number">30.187</span>:<span class="number">8231</span></span><br><span class="line">#EXTINF:-<span class="number">1</span>,CCTV-<span class="number">7</span></span><br><span class="line">http://<span class="number">192.168</span>.<span class="number">5.1</span>:<span class="number">4022</span>/udp/<span class="number">239.255</span>.<span class="number">30.4</span>:<span class="number">8231</span></span><br><span class="line">#EXTINF:-<span class="number">1</span>,爱大剧</span><br><span class="line">http://<span class="number">192.168</span>.<span class="number">5.1</span>:<span class="number">4022</span>/udp/<span class="number">239.255</span>.<span class="number">30.188</span>:<span class="number">8231</span></span><br><span class="line">#EXTINF:-<span class="number">1</span>,CCTV-<span class="number">9</span></span><br><span class="line">http://<span class="number">192.168</span>.<span class="number">5.1</span>:<span class="number">4022</span>/udp/<span class="number">239.255</span>.<span class="number">30.74</span>:<span class="number">8231</span></span><br><span class="line">#EXTINF:-<span class="number">1</span>,CCTV-<span class="number">10</span></span><br><span class="line">http://<span class="number">192.168</span>.<span class="number">5.1</span>:<span class="number">4022</span>/udp/<span class="number">239.255</span>.<span class="number">30.6</span>:<span class="number">8231</span></span><br><span class="line">#EXTINF:-<span class="number">1</span>,CCTV-<span class="number">11</span></span><br><span class="line">http://<span class="number">192.168</span>.<span class="number">5.1</span>:<span class="number">4022</span>/udp/<span class="number">239.255</span>.<span class="number">30.7</span>:<span class="number">8231</span></span><br><span class="line">#EXTINF:-<span class="number">1</span>,CCTV-<span class="number">12</span></span><br><span class="line">http://<span class="number">192.168</span>.<span class="number">5.1</span>:<span class="number">4022</span>/udp/<span class="number">239.255</span>.<span class="number">30.8</span>:<span class="number">8231</span></span><br></pre></td></tr></table></figure><h1 id="wa-keng">挖坑</h1><p>如何在多端轻松观看及推荐软件下载，博主后面将再补一篇专题文章进行说明演示，敬请期待。。。</p><p>另外有任何问题，可在评论区提出，博主看到后将会在第一时间回复哒…☕</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> OpenWrt </category>
          
          <category> IPTV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> OpenWrt </tag>
            
            <tag> IPTV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取电信光猫烽火HG系列超密并修改Telnet密码📡</title>
      <link href="/2024/12/02/%E8%8E%B7%E5%8F%96%E7%94%B5%E4%BF%A1%E5%85%89%E7%8C%AB%E7%83%BD%E7%81%ABHG2821U-T%E8%B6%85%E5%AF%86%E5%B9%B6%E4%BF%AE%E6%94%B9Telnet%E5%AF%86%E7%A0%81/"/>
      <url>/2024/12/02/%E8%8E%B7%E5%8F%96%E7%94%B5%E4%BF%A1%E5%85%89%E7%8C%AB%E7%83%BD%E7%81%ABHG2821U-T%E8%B6%85%E5%AF%86%E5%B9%B6%E4%BF%AE%E6%94%B9Telnet%E5%AF%86%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="huo-qu-chao-mi">获取超密</h1><p>浏览器输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.1:8080/cgi-bin/telnetenable.cgi?telnetenable=1</span><br></pre></td></tr></table></figure><p>开启<code>Telnet</code></p><p><img src="https://bu.dusays.com/2024/12/08/6755223bc4598.jpg" alt="显示telnet开启"></p><p>然后使用<code>putty</code>，<code>mobaxterm</code>或<code>windows</code>自带的<code>telnet</code>工具登录后台，命令行输入<code>telnet </code>光猫<code>IP</code>：</p><p><img src="https://bu.dusays.com/2024/12/08/6755223ee2738.jpg" alt="用户名root，密码abcd"></p><p>用户名<code>root</code>，密码<code>abcd</code>，然后输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /flash/cfg/agentconf/factory.conf</span><br></pre></td></tr></table></figure><p>即可看到超密：</p><p><img src="https://bu.dusays.com/2024/12/08/675522431c613.jpg" alt="telnet"></p><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch /usr/local/fh/mf/factory_mode</span><br></pre></td></tr></table></figure><p>可以开启工厂模式，浏览器重新访问光猫</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.1.1:8080/cgi-bin/login.htm.cgi</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/12/08/67552247f10fa.jpg" alt="可以看到底下一行红字显示工厂模式已开启"></p><p>可以看到底下一行红字显示工厂模式已开启。用之前获取的超密账号登录，再次来到设备管理界面</p><p><img src="https://bu.dusays.com/2024/12/08/6755224c9d691.jpg" alt=""></p><p><code>telecomadmin</code>账号登录后，设备管理页出现<code>USB</code>备份设置。找一个<code>fat32</code>格式的U盘插入光猫，然后点击「备份配置」，提示&quot;配置文件备份成功”后，拔下U盘，插回电脑。可以看到有一个<code>e8_Config_Backup</code>文件夹，里面的<code>ctce8_HG2xxG.cfg</code>就是配置文件。</p><p><img src="https://bu.dusays.com/2024/12/08/675522644fc87.jpg" alt="光猫配置文件"></p><p>复制这个文件到电脑上，然后用<code>Notepad++</code>之类的源代码编辑器打开，<code>Ctrl+F</code>打开查找对话框，输入<code>telnet</code>，定位到<code>TelnetUserName</code>和<code>TelnetPassword</code>即可看到<code>telnet</code>用户名和密码</p><p><img src="https://bu.dusays.com/2024/12/08/67552268eb733.jpg" alt=""></p><p>修改<code>telnet</code>密码。修改<code>value</code>后面的值即可将用户名和密码改成自己的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;param name=&quot;TelnetEnable&quot;  rw=&quot;2&quot;  type=&quot;b&quot;  dev_func=&quot;dev_X_CT_COM_ServiceManage_TelnetEnable&quot;  value=&quot;0&quot;&gt;</span><br></pre></td></tr></table></figure><p>这行是开启<code>Telnet</code>，<code>value=&quot;0&quot;</code>表示关闭，改为<code>1</code>则是永久打开<code>telnet</code>功能。查找<code>TotalTerminalNumber</code>，修改<code>value</code>后面的数值可修改终端连接数</p><p><img src="https://bu.dusays.com/2024/12/30/677295c506dcf.jpg" alt="破解终端连接数"></p><p>破解终端连接数。查找<code>telecomadmin</code>，定位到即可看到超级管理员密码,同样可以在此修改密码</p><p><img src="https://bu.dusays.com/2024/12/08/6755228c42c1c.jpg" alt="修改超密"></p><p>修改超密。其它的<code>TR069</code>、<code>ftp</code>、<code>Samba</code>、宽带密码都可以在这份配置文件中进行查看和修改。</p><h1 id="geng-xin-guang-mao-pei-zhi">更新光猫配置</h1><p>保存后替换U盘的原名文件，重新插回光猫，再次回到设备管理界面，勾选「快速恢复」更新即可</p><p>为了阻止电信远程自动下发配置改超密，可以用超密登录后，在「网络」-「远程管理」-「ITMS服务」中，取消勾选「启用周期上报」</p><p><img src="https://bu.dusays.com/2024/12/08/67552291edfcc.jpg" alt="ITMS设置"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 光猫 </category>
          
          <category> 获取超密 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 光猫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 Ubuntu 24.04 的 Hexo 博客搭建📇</title>
      <link href="/2024/12/01/%E5%9F%BA%E4%BA%8E%20Ubuntu%2024.04%20%E7%9A%84%20Hexo%20%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2024/12/01/%E5%9F%BA%E4%BA%8E%20Ubuntu%2024.04%20%E7%9A%84%20Hexo%20%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="yi-an-zhuang-ji-chu-kuang-jia">一、安装基础框架</h1><p><a href="https://hexo.io/">Hexo</a> 博客框架基于<code> Node.js</code> 。因此首先要安装<code>nodejs</code>和 <code>npm </code>，然后再进行<code> hexo</code> 的安装。</p><h2 id="1-1-an-zhuang-nodejs-he-npm" id="1-1-安装-nodejs-和-npm">1.1 安装 nodejs 和 npm</h2><p>打开<code>nodejs</code>官网 <a href="https://nodejs.org/en/download/%EF%BC%8C%E6%8C%89%E7%85%A7%E5%A6%82%E4%B8%8B%E6%93%8D%E4%BD%9C%E5%AE%89%E8%A3%85%60">https://nodejs.org/en/download/，按照如下操作安装`</a> nodejs<code>和</code>npm`</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># installs fnm (Fast Node Manager)</span></span><br><span class="line">curl -fsSL https://fnm.vercel.app/install | bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># activate fnm</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># download and install Node.js</span></span><br><span class="line">fnm use --install-if-missing 22</span><br><span class="line"></span><br><span class="line"><span class="comment"># verifies the right Node.js version is in the environment</span></span><br><span class="line">node -v <span class="comment"># should print `v22.11.0`</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># verifies the right npm version is in the environment</span></span><br><span class="line">npm -v <span class="comment"># should print `10.9.0`</span></span><br></pre></td></tr></table></figure><h2 id="1-2-gai-npm-yuan" id="1-2-改npm源">1.2 改npm源</h2><p>npm下载各种模块，默认是从国处服务器下载，速度较慢，建议配置成淘宝镜像。打开CMD窗口，运行如下命令:</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https:<span class="regexp">//r</span>egistry.npmmirror.com</span><br></pre></td></tr></table></figure><h2 id="1-3-an-zhuang-hexo" id="1-3-安装-hexo">1.3 安装 hexo</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装hexo</span></span><br><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>此时使用hexo应该可以使用了，如果提示找不到hexo命令，可以尝试链接hexo到可执行文件目录</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 链接hexo</span></span><br><span class="line">sudo ln -s /home/xulouzhe/nodejs/node-<span class="number">v16.15</span>.<span class="number">0</span>-linux-x64/bin/hexo   /usr/<span class="keyword">local</span>/bin/hexo</span><br><span class="line"><span class="comment"># 将 Hexo 所在的目录下的 node_modules 添加到环境变量之中即可直接使用 hexo &lt;command&gt;</span></span><br><span class="line">echo <span class="string">&#x27;PATH=&quot;$PATH:./node_modules/.bin&quot;&#x27;</span> &gt;&gt; ~/.profile</span><br></pre></td></tr></table></figure><h2 id="1-4-hexo-de-shi-yong-fang-fa" id="1-4-hexo的使用方法">1.4 hexo的使用方法</h2><p>进入想生成博客目录的路径，执行init命令生成博客文件</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd 网站目录</span><br><span class="line">hexo init 目录名</span><br></pre></td></tr></table></figure><p>会生成如下所示的目录结构</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p>其中 _config.yml 为网站配置文件，title 属性为博客标题， language 设置为 zh-CN 可将博客变为中文主题， description 属性为博客描述。详细配置方法可以见 <a href="https://hexo.io/zh-cn/docs/configuration">https://hexo.io/zh-cn/docs/configuration</a><br>其他路径中 source/_posts 目录存放文章， source/_drafts 目录存放草稿。 _posts 目录内会生成一篇默认文章，指导 hexo 的简单用法。此时，执行</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>就可以在 ip:4000 地址看到你的博客了。以下是一些 hexo 常用的命令</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 source/_posts 路径内生成生成 文章标题.md 的空白文章</span></span><br><span class="line">hexo new <span class="string">&quot;文章标题&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成网页静态文件，可以简写为 hexo g</span></span><br><span class="line">hexo generate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署之前生成的静态文件至 public 文件夹，可以简写为 hexo d</span></span><br><span class="line">hexo deploy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除缓存和静态文件，一般装插件出现问题时使用</span></span><br><span class="line">hexo clean</span><br></pre></td></tr></table></figure><h1 id="er-shi-yong-nginx-bu-shu-hexo-bo-ke">二、使用 Nginx 部署 Hexo 博客</h1><h2 id="2-1-an-zhuang-nginx" id="2-1-安装-Nginx">2.1 安装 Nginx</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install nginx</span><br></pre></td></tr></table></figure><h2 id="2-2-nginx-pei-zhi" id="2-2-Nginx-配置">2.2 Nginx 配置</h2><p>打开<code> Nginx</code> 配置文件，一般是<code>/etc/nginx/sites-available/default</code></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    <span class="keyword">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="keyword">listen</span> [::]:<span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 下面的 root 后路径修改为 Hexo 博客 public 目录所在路径</span></span><br><span class="line">    root /var/hexo/public;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-zhong-qi-nginx" id="2-3-重启-Nginx">2.3 重启 Nginx</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx.service</span><br></pre></td></tr></table></figure><h2 id="2-4-shi-yong-pm-2-zi-dong-jian-kong-wen-jian-bian-hua-bing-zi-dong-sheng-cheng-he-bu-shu-wang-ye" id="2-4-使用-pm2-自动监控文件变化并自动生成和部署网页">2.4 使用 pm2 自动监控文件变化并自动生成和部署网页</h2><ul class="lvl-0"><li class="lvl-2"><p>安装 pm2</p></li></ul><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g pm2</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>在博客路径的 source 文件夹内新建 start.js 文件，内容如下：</p></li></ul><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var process = <span class="keyword">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"></span><br><span class="line">process.exec(<span class="string">&#x27; hexo g -d&#x27;</span>, function (error, stdout, stderr) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error !== null) &#123;</span><br><span class="line">      console.log(<span class="string">&#x27;exec error: &#x27;</span> + error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>在 source 文件夹内再新建 watch.json 文件，内容如下：</p></li></ul><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;apps&quot;</span> : [&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>       : <span class="string">&quot;blog&quot;</span>,</span><br><span class="line">    <span class="string">&quot;script&quot;</span>     : <span class="string">&quot;./start.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;exec_interpreter&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">    <span class="string">&quot;exec_mode&quot;</span>  : <span class="string">&quot;fork_mode&quot;</span>,</span><br><span class="line">    <span class="string">&quot;watch&quot;</span>      : <span class="string">&quot;_posts&quot;</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>在 source 目录内使用 pm2 命令进行监控：</p></li></ul><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start watch.json</span><br></pre></td></tr></table></figure><h2 id="2-5-hexo-bo-ke-markdown-wen-dang-nei-cha-ru-tu-pian" id="2-5-Hexo-博客-Markdown-文档内插入图片">2.5 Hexo 博客 Markdown 文档内插入图片</h2><p>先修改博客配置文件 _config.yml 内的 post_asset_folder 属性为 true</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure><p>然后，在博客文件夹内安装插件 hexo-asset-link</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -s hexo-asset-link</span><br></pre></td></tr></table></figure><p>在开启了 post_asset_folder 选项后，在生成新 md 文档时会在同一目录生成同名文件夹，将图片文件移动至文件夹内，然后在 Markdown 文档内使用如下格式即可插入图片。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![名称](图片所在文件夹/图片文件名) </span><br></pre></td></tr></table></figure><h2 id="2-6-qi-ta-xiao-keng" id="2-6-其他小坑">2.6 其他小坑</h2><p>装插件后显示出现错误，使用 hexo clean 命令清除缓存后再生成静态文件解决~</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C 语言链表 🍁</title>
      <link href="/2024/12/01/2024-12-01-C-%E8%AF%AD%E8%A8%80%E9%93%BE%E8%A1%A8-%F0%9F%8D%81/"/>
      <url>/2024/12/01/2024-12-01-C-%E8%AF%AD%E8%A8%80%E9%93%BE%E8%A1%A8-%F0%9F%8D%81/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="yi-shi-yao-shi-lian-biao">一、 什么是链表</h1><h2 id="1-lian-biao-de-ding-yi" id="1-链表的定义">1. 链表的定义</h2><blockquote><p>链表是<strong>一种物理存储单元上非连续、非顺序的存储结构</strong>，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。链表由一系列<strong>结点</strong>（链表中每一个元素称为结点）组成，结点可以在运行时动态生成。每个结点包括两个部分：一个是存储数据元素的<strong>数据域</strong>，另一个是存储下一个结点地址的<strong>指针域</strong>。</p></blockquote><h2 id="2-shun-xu-cun-chu-he-lian-shi-cun-chu" id="2-顺序存储和链式存储">2. 顺序存储和链式存储</h2><h3 id="1-shu-zu-shun-xu-cun-chu" id="（1）数组-—-顺序存储">（1）数组 — 顺序存储</h3><p>数组作为一个顺序储存方式的数据结构，可是有大作为的，它的灵活使用为我们的程序设计带来了大量的便利；但数组最大的缺点就是我们的插入和删除时需要移动大量的元素，所以，很多人想到需要大量的消耗时间，以及冗余度就想放弃或寻求别的方法。以 C 语言数组插入一个元素为例，当我们需要在一个数组 <code>&#123;1,2,3,4&#125;</code> 的第 <code>1</code> 个元素后的位置插入一个<code>’A’</code>时，我们需要做的有：</p><ol><li class="lvl-3"><p>将第 <code>1</code> 个元素后的整体元素后移，形成新的数组 <code>&#123;1,2,2,3,4&#125;</code></p></li><li class="lvl-3"><p>再将第 <code>2</code> 个元素位置的元素替换为我们所需要的元素<code>’A’</code></p></li><li class="lvl-3"><p>最终形成我们的预期，这需要很多的操作喔。</p></li></ol><p><img src="https://bu.dusays.com/2025/01/05/677a71b1b68c6.jpg" alt="数组—顺序存储"></p><p>上图可以看出，使用数组都有这两大缺点：</p><ol><li class="lvl-3"><p>插入删除操作所需要移动的元素很多，浪费算力。</p></li><li class="lvl-3"><p>必须为数组开足够的空间，否则有溢出风险。</p></li></ol><h3 id="2-lian-biao-lian-shi-cun-chu" id="（2）链表-—-链式存储">（2）链表 — 链式存储</h3><p>由于数组的这些缺点，自然而然的就产生链表的思想。链表通过不连续的储存方式，自适应内存大小，以及指针的灵活使用，巧妙的简化了上述的内容。链表的基本思维是，利用<strong>结构体</strong>的设置，额外开辟出一份内存空间去作指针，它总是指向下一个结点，一个个结点通过 <code>NEXT</code> 指针相互串联，就形成了链表。</p><p><img src="https://bu.dusays.com/2025/01/05/677a71b1969d6.png" alt="链表—链式存储"></p><p>其中 <code>DATA</code> 为自定义的数据类型，<code>NEXT</code> 为指向下一个链表结点的指针，通过访问 <code>NEXT</code>，可以引导我们去访问链表的下一个结点。</p><p>对于一连串的结点而言，就形成了链表如下图：</p><p><img src="https://bu.dusays.com/2025/01/05/677a71b1abf38.jpg" alt="一连串的结点形成链表"></p><p>相比起数组，链表解决了数组不方便移动，插入，删除元素的弊端，但相应的，链表付出了更加大的内存牺牲换来的这些功能的实现。</p><h2 id="3-lian-biao-gai-shu" id="3-链表概述">3. 链表概述</h2><p>包含<a href="http://127.0.0.1:51634/2023/01/26/C%E8%AF%AD%E8%A8%80%E9%93%BE%E8%A1%A8/#singlyList">单链表</a>，双链表，循环单链表，实际应用中的功能不同，但实现方式都差不多。</p><p><img src="https://bu.dusays.com/2025/01/05/677a71b1b371a.jpg" alt="链表概述"></p><h2 id="4-lian-biao-yu-shu-zu-de-qu-bie" id="4-链表与数组的区别">4. 链表与数组的区别</h2><p>数组是相同数据类型的元素按一定顺序排列的集合。根据概念我们可以知道数组在内存中连续，链表不连续；由于不同的存储方式导致<strong>数组静态分配内存，链表动态分配内存，数组元素在栈区，链表元素在堆区</strong>；由于数组在内存中连续，我们可以利用下标定位，时间复杂度为 <code>O(1)</code>，链表定位元素时间复杂度 <code>O(n)</code>；但是由于数组的连续性数组插入或删除元素的时间复杂度 <code>O(n)</code>，链表的时间复杂度 <code>O(1)</code>。总结一下，数组和链表的区别如下：</p><ol><li class="lvl-3"><p>数组静态分配内存，链表动态分配内存</p></li><li class="lvl-3"><p>数组在内存中连续，链表不连续</p></li><li class="lvl-3"><p>数组元素在栈区，链表元素在堆区</p></li><li class="lvl-3"><p>数组利用下标定位，时间复杂度为<code>O(1)</code>，链表定位元素时间复杂度<code>O(n)</code>；</p></li><li class="lvl-3"><p>数组插入或删除元素的时间复杂度<code>O(n)</code>，链表的时间复杂度<code>O(1)</code>。</p></li></ol><h1 id="er-dan-lian-biao">二、 单链表</h1><h2 id="1-ding-yi" id="1-定义">1. 定义</h2><p>单链表是一种链式存取的数据结构，链表中的数据是以结点来表示的，每个结点的构成：元素 (数据元素的映象) + 指针 (指示后继元素存储位置)，元素就是存储数据的存储单元，指针就是连接每个结点的地址数据。<strong>以 “结点的序列” 表示的线性表称作线性链表（单链表），单链表是链式存取的结构</strong>。</p><p>接下来我们从创建链表 -&gt; 创建节点 -&gt; 插入节点（也称新增节点）-&gt; 释放节点（也称删除节点）-&gt; 编辑节点（也称修改节点）-&gt; 查找节点（也称检索节点）-&gt; 释放链表，一步一步地实现链表的创建和节点的增删改查。</p><h2 id="2-dan-xiang-lian-biao-de-cheng-xu-she-ji" id="2-单向链表的程序设计">2. 单向链表的程序设计</h2><h3 id="1-ding-yi-jie-gou-ti" id="（1）定义结构体">（1）定义结构体</h3><p>对于链表的每一个结点，我们使用结构体 <code>struct</code> 进行设计，其主要内容有：</p><p><img src="https://bu.dusays.com/2025/01/05/677a71b1962b8.png" alt="单链表节点结构"></p><p>其中，<code>DATA</code> 数据元素，可以为你想要储存的任何数据格式，可以是数组，可以是 <code>int</code>，甚至可以是<code>结构体</code>（这就是传说中的结构体套结构体）。<code>NEXT</code> 为一个指针，其代表了一个可以指向的区域，通常是用来指向下一个结点，链表的尾部 <code>NEXT</code> 指向 <code>NULL（空）</code>，因为尾部没有任何可以指向的空间了。具体示例代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 链表节点结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> data;          <span class="comment">// 节点存储的数据</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">node</span> *next; <span class="comment">// 指向下一个节点的指针</span></span><br><span class="line">&#125; Node;</span><br></pre></td></tr></table></figure><p>代码中，结构体中包含两个成员：<code>data</code> 和 <code>next</code>。<code>data</code> 用于存储节点存储的数据，<code>next</code> 用于指向下一个节点的指针。结构体定义了一种名为 <code>Node</code> 的类型，这个类型可以用来创建链表节点。</p><h3 id="2-wan-zheng-dai-ma-shi-li" id="（2）完整代码示例">（2）完整代码示例</h3><p>链表增删改查函数实现示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 链表节点结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> data;          <span class="comment">// 节点存储的数据</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">node</span> *next; <span class="comment">// 指向下一个节点的指针</span></span><br><span class="line">&#125; Node;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建链表</span></span><br><span class="line"><span class="function">Node *<span class="title">CreatList</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *HeadNode = (Node *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Node)); <span class="comment">// 创建链表头节点</span></span><br><span class="line">    <span class="built_in">assert</span>(HeadNode);                              <span class="comment">// 断言确保内存分配成功</span></span><br><span class="line">    HeadNode-&gt;next = <span class="literal">NULL</span>;                         <span class="comment">// 头节点的下一个节点指针指向空</span></span><br><span class="line">    <span class="keyword">return</span> HeadNode;                               <span class="comment">// 返回链表头节点指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建节点</span></span><br><span class="line"><span class="function">Node *<span class="title">CreatNode</span><span class="params">(<span class="type">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *NewNode = (Node *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Node)); <span class="comment">// 创建新节点</span></span><br><span class="line">    <span class="built_in">assert</span>(NewNode);                              <span class="comment">// 断言确保内存分配成功</span></span><br><span class="line">    NewNode-&gt;data = data;                         <span class="comment">// 设置节点存储的数据</span></span><br><span class="line">    NewNode-&gt;next = <span class="literal">NULL</span>;                         <span class="comment">// 新节点的下一个节点指针指向空</span></span><br><span class="line">    <span class="keyword">return</span> NewNode;                               <span class="comment">// 返回新节点指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在链表头部插入节点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InsertHead</span><span class="params">(Node *HeadNode, <span class="type">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *FirstNode = <span class="built_in">CreatNode</span>(data); <span class="comment">// 创建要插入的数据对应的节点</span></span><br><span class="line">    FirstNode-&gt;next = HeadNode-&gt;next; <span class="comment">// 将插入节点的下一个节点指针指向原链表头节点的下一个节点</span></span><br><span class="line">    HeadNode-&gt;next = FirstNode;       <span class="comment">// 将链表头节点的下一个节点指针指向插入的节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在链表尾部插入节点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InsertTail</span><span class="params">(Node *HeadNode, <span class="type">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *LastNode = <span class="built_in">CreatNode</span>(data); <span class="comment">// 创建要插入的数据对应的节点</span></span><br><span class="line">    Node *pmove = HeadNode;           <span class="comment">// 创建一个指针pmove，初始指向链表头节点</span></span><br><span class="line">    <span class="keyword">while</span> (pmove-&gt;next != <span class="literal">NULL</span>)       <span class="comment">// 遍历链表直到找到最后一个节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        pmove = pmove-&gt;next; <span class="comment">// 将pmove指向下一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    pmove-&gt;next = LastNode; <span class="comment">// 将最后一个节点的下一个节点指针指向新插入的节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在指定位置插入节点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InsertAppoin</span><span class="params">(Node *HeadNode, <span class="type">int</span> posData, <span class="type">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *PreNode = HeadNode;       <span class="comment">// 创建一个指针PreNode，初始指向链表头节点</span></span><br><span class="line">    Node *CurNode = HeadNode-&gt;next; <span class="comment">// 创建一个指针CurNode，初始指向链表头节点的下一个节点</span></span><br><span class="line">    <span class="keyword">while</span> (CurNode != <span class="literal">NULL</span> &amp;&amp; CurNode-&gt;data != posData) <span class="comment">// 遍历链表直到找到距离指定位置最近的节点或者找到指定位置</span></span><br><span class="line">    &#123;</span><br><span class="line">        PreNode = CurNode;       <span class="comment">// 将PreNode指向当前节点</span></span><br><span class="line">        CurNode = CurNode-&gt;next; <span class="comment">// 将CurNode指向下一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (CurNode == <span class="literal">NULL</span>) <span class="comment">// 如果未找到指定位置，打印相关提示</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;未找到，无法插入！\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Node *NewNode = <span class="built_in">CreatNode</span>(data); <span class="comment">// 创建要插入的数据对应的节点</span></span><br><span class="line">        NewNode-&gt;next = CurNode;         <span class="comment">// 将插入节点的下一个节点指针指向当前节点</span></span><br><span class="line">        PreNode-&gt;next = NewNode;         <span class="comment">// 将上个节点的下一个节点指针指向插入的节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在指定位置插入节点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InsertIndex</span><span class="params">(Node *HeadNode, <span class="type">int</span> index, <span class="type">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span>) <span class="comment">// 如果指定位置错误</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;序号有误，无法插入！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node *PreNode = HeadNode;               <span class="comment">// 创建一个指针PreNode，初始指向链表头节点</span></span><br><span class="line">    Node *CurNode = HeadNode-&gt;next;         <span class="comment">// 创建一个指针CurNode，初始指向链表头节点的下一个节点</span></span><br><span class="line">    <span class="type">int</span> move = <span class="number">0</span>;                           <span class="comment">// 创建一个变量move，用于记录已经遍历的节点个数</span></span><br><span class="line">    <span class="keyword">while</span> (CurNode != <span class="literal">NULL</span> &amp;&amp; move &lt; index) <span class="comment">// 遍历链表直到找到指定位置或者遍历完所有节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        PreNode = CurNode;       <span class="comment">// 将PreNode指向当前节点</span></span><br><span class="line">        CurNode = CurNode-&gt;next; <span class="comment">// 将CurNode指向下一个节点</span></span><br><span class="line">        move++;                  <span class="comment">// 更新move的值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (CurNode == <span class="literal">NULL</span>) <span class="comment">// 如果未找到指定位置，打印相关提示</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;序号有误，无法插入！\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Node *NewNode = <span class="built_in">CreatNode</span>(data); <span class="comment">// 创建要插入的数据对应的节点</span></span><br><span class="line">        NewNode-&gt;next = CurNode;         <span class="comment">// 将插入节点的下一个节点指针指向当前节点</span></span><br><span class="line">        PreNode-&gt;next = NewNode;         <span class="comment">// 将上个节点的下一个节点指针指向插入的节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除链表头节点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DeleteHead</span><span class="params">(Node *HeadNode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *DeleteNode = HeadNode-&gt;next; <span class="comment">// 创建一个指针DeleteNode，指向链表头节点的下一个节点</span></span><br><span class="line">    <span class="keyword">if</span> (DeleteNode == <span class="literal">NULL</span>)            <span class="comment">// 如果链表为空，打印相关提示，直接返回</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;链表为空，无法删除！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        HeadNode-&gt;next = DeleteNode-&gt;next; <span class="comment">// 将链表头节点的下一个节点指针指向删除节点的下一个节点</span></span><br><span class="line">        <span class="built_in">free</span>(DeleteNode);                  <span class="comment">// 释放删除节点的内存空间</span></span><br><span class="line">        DeleteNode = <span class="literal">NULL</span>;                 <span class="comment">// 将deleteNode指针置为空</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除链表尾节点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DeleteTail</span><span class="params">(Node *HeadNode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *PreNode = HeadNode;       <span class="comment">// 创建一个指针PreNode，初始指向链表头节点</span></span><br><span class="line">    Node *CurNode = HeadNode-&gt;next; <span class="comment">// 创建一个指针CurNode，初始指向链表头节点的下一个节点</span></span><br><span class="line">    <span class="keyword">if</span> (CurNode == <span class="literal">NULL</span>)            <span class="comment">// 如果链表为空，打印相关提示，直接返回</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;链表为空，无法删除！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (CurNode-&gt;next != <span class="literal">NULL</span>) <span class="comment">// 遍历链表直到找到最后一个节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        PreNode = CurNode;       <span class="comment">// 将PreNode指向当前节点</span></span><br><span class="line">        CurNode = CurNode-&gt;next; <span class="comment">// 将CurNode指向下一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(CurNode);        <span class="comment">// 释放最后一个节点的内存空间</span></span><br><span class="line">    CurNode = <span class="literal">NULL</span>;       <span class="comment">// 将CurNode指针置为空</span></span><br><span class="line">    PreNode-&gt;next = <span class="literal">NULL</span>; <span class="comment">// 将PreNode节点的下一个节点指针置为NULL</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除指定数据的节点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DeleteAppoin</span><span class="params">(Node *HeadNode, <span class="type">int</span> PosData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *PreNode = HeadNode;       <span class="comment">// 创建一个指针PreNode，初始指向链表头节点</span></span><br><span class="line">    Node *CurNode = HeadNode-&gt;next; <span class="comment">// 创建一个指针CurNode，初始指向链表头节点的下一个节点</span></span><br><span class="line">    <span class="keyword">while</span> (CurNode != <span class="literal">NULL</span> &amp;&amp; CurNode-&gt;data != PosData) <span class="comment">// 遍历链表直到找到指定数据或者找到指定数据</span></span><br><span class="line">    &#123;</span><br><span class="line">        PreNode = CurNode;       <span class="comment">// 将PreNode指向当前节点</span></span><br><span class="line">        CurNode = CurNode-&gt;next; <span class="comment">// 将CurNode指向下一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (CurNode == <span class="literal">NULL</span>) <span class="comment">// 如果未找到指定数据，打印相关提示</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;未找到，无法删除！\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        PreNode-&gt;next = CurNode-&gt;next; <span class="comment">// 将PreNode节点的下一个节点指针指向删除节点的下一个节点</span></span><br><span class="line">        <span class="built_in">free</span>(CurNode);                 <span class="comment">// 释放删除节点的内存空间</span></span><br><span class="line">        CurNode = <span class="literal">NULL</span>;                <span class="comment">// 将CurNode指针置为空</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除指定位置的节点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DeleteIndex</span><span class="params">(Node *HeadNode, <span class="type">int</span> Index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *PreNode = HeadNode;               <span class="comment">// 创建一个指针PreNode，初始指向链表头节点</span></span><br><span class="line">    Node *CurNode = HeadNode-&gt;next;         <span class="comment">// 创建一个指针CurNode，初始指向链表头节点的下一个节点</span></span><br><span class="line">    <span class="type">int</span> move = <span class="number">0</span>;                           <span class="comment">// 创建一个变量move，用于记录已经遍历的节点个数</span></span><br><span class="line">    <span class="keyword">while</span> (CurNode != <span class="literal">NULL</span> &amp;&amp; move &lt; Index) <span class="comment">// 遍历链表直到找到指定位置或者遍历完所有节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        PreNode = CurNode;       <span class="comment">// 将PreNode指向当前节点</span></span><br><span class="line">        CurNode = CurNode-&gt;next; <span class="comment">// 将CurNode指向下一个节点</span></span><br><span class="line">        move++;                  <span class="comment">// 更新move的值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (CurNode == <span class="literal">NULL</span>) <span class="comment">// 如果未找到指定位置，打印相关提示</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;未找到，无法删除！\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        PreNode-&gt;next = CurNode-&gt;next; <span class="comment">// 将PreNode节点的下一个节点指针指向删除节点的下一个节点</span></span><br><span class="line">        <span class="built_in">free</span>(CurNode);                 <span class="comment">// 释放删除节点的内存空间</span></span><br><span class="line">        CurNode = <span class="literal">NULL</span>;                <span class="comment">// 将CurNode指针置为空</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据指定数据查找节点，并返回节点指针</span></span><br><span class="line"><span class="function">Node *<span class="title">SearchAppoin</span><span class="params">(Node *HeadNode, <span class="type">int</span> PosData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *CurNode = HeadNode-&gt;next; <span class="comment">// 创建一个指针CurNode，初始指向链表头节点的下一个节点</span></span><br><span class="line">    <span class="keyword">while</span> (CurNode != <span class="literal">NULL</span> &amp;&amp; CurNode-&gt;data != PosData) <span class="comment">// 遍历链表直到找到指定数据或者遍历完所有节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        CurNode = CurNode-&gt;next; <span class="comment">// 将CurNode指向下一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (CurNode == <span class="literal">NULL</span>) <span class="comment">// 如果未找到指定数据，打印相关提示</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;数据错误未找到！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">// 返回空指针</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> CurNode; <span class="comment">// 返回找到的节点指针</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 寻找指定索引的节点</span></span><br><span class="line"><span class="function">Node *<span class="title">SearchIndex</span><span class="params">(Node *HeadNode, <span class="type">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span>) <span class="comment">// 判断索引是否小于0</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;序号错误未找到！\n&quot;</span>); <span class="comment">// 输出错误提示</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;                  <span class="comment">// 返回空指针</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Node *CurNode = HeadNode-&gt;next; <span class="comment">// 定义指向当前节点的指针，并指向头节点的下一个节点</span></span><br><span class="line">        <span class="type">int</span> move = <span class="number">0</span>;                   <span class="comment">// 初始化移动次数为0</span></span><br><span class="line">        <span class="keyword">while</span> (CurNode != <span class="literal">NULL</span> &amp;&amp; move &lt; index) <span class="comment">// 循环条件为当前节点不为空且移动次数小于索引</span></span><br><span class="line">        &#123;</span><br><span class="line">            CurNode = CurNode-&gt;next; <span class="comment">// 将当前节点指向当前节点的下一个节点</span></span><br><span class="line">            move++;                  <span class="comment">// 移动次数加1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (CurNode == <span class="literal">NULL</span>) <span class="comment">// 如果当前节点为空</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;序号错误未找到！\n&quot;</span>); <span class="comment">// 输出错误提示</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;                  <span class="comment">// 返回空指针</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> CurNode; <span class="comment">// 返回找到的节点</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改指定位置的数据</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">EditAppoin</span><span class="params">(Node *HeadNode, <span class="type">int</span> PosData, <span class="type">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *CurNode = HeadNode-&gt;next; <span class="comment">// 定义指向当前节点的指针，并指向头节点的下一个节点</span></span><br><span class="line">    <span class="keyword">while</span> (CurNode != <span class="literal">NULL</span> &amp;&amp; CurNode-&gt;data != PosData) <span class="comment">// 循环条件为当前节点不为空且当前节点的数据不等于指定位置的数据</span></span><br><span class="line">    &#123;</span><br><span class="line">        CurNode = CurNode-&gt;next; <span class="comment">// 将当前节点指向当前节点的下一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (CurNode == <span class="literal">NULL</span>) <span class="comment">// 如果当前节点为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;未找到指定数据无法编辑！\n&quot;</span>); <span class="comment">// 输出错误提示</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        CurNode-&gt;data = data; <span class="comment">// 修改当前节点的数据为指定的数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改指定索引的数据</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">EditIndex</span><span class="params">(Node *HeadNode, <span class="type">int</span> index, <span class="type">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *CurNode = HeadNode-&gt;next;         <span class="comment">// 定义指向当前节点的指针，并指向头节点的下一个节点</span></span><br><span class="line">    <span class="type">int</span> move = <span class="number">0</span>;                           <span class="comment">// 初始化移动次数为0</span></span><br><span class="line">    <span class="keyword">while</span> (CurNode != <span class="literal">NULL</span> &amp;&amp; move &lt; index) <span class="comment">// 循环条件为当前节点不为空且移动次数小于索引</span></span><br><span class="line">    &#123;</span><br><span class="line">        CurNode = CurNode-&gt;next; <span class="comment">// 将当前节点指向当前节点的下一个节点</span></span><br><span class="line">        move++;                  <span class="comment">// 移动次数加1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (CurNode == <span class="literal">NULL</span>) <span class="comment">// 如果当前节点为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;未找到指定数据无法编辑！\n&quot;</span>); <span class="comment">// 输出错误提示</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        CurNode-&gt;data = data; <span class="comment">// 修改当前节点的数据为指定的数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放链表占用的内存</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FreeList</span><span class="params">(Node *HeadNode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *CurNode = <span class="literal">NULL</span>;    <span class="comment">// 定义指向当前节点的指针，并初始化为空指针</span></span><br><span class="line">    <span class="keyword">while</span> (HeadNode != <span class="literal">NULL</span>) <span class="comment">// 循环条件为头节点不为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        CurNode = HeadNode;        <span class="comment">// 将当前节点指向头节点</span></span><br><span class="line">        HeadNode = HeadNode-&gt;next; <span class="comment">// 将头节点指向头节点的下一个节点</span></span><br><span class="line">        <span class="built_in">free</span>(CurNode);             <span class="comment">// 释放当前节点占用的内存</span></span><br><span class="line">        CurNode = <span class="literal">NULL</span>;            <span class="comment">// 将当前节点指针初始化为空指针</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印链表中的数据</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintList</span><span class="params">(Node *HeadNode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *pmove = HeadNode-&gt;next; <span class="comment">// 定义指针pmove，并指向头节点的下一个节点</span></span><br><span class="line">    <span class="keyword">if</span> (pmove == <span class="literal">NULL</span>)            <span class="comment">// 如果pmove为空指针</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;链表为空！\n&quot;</span>); <span class="comment">// 输出提示信息</span></span><br><span class="line">        <span class="keyword">return</span>;                 <span class="comment">// 结束函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (pmove != <span class="literal">NULL</span>) <span class="comment">// 循环条件为pmove不为空指针</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, pmove-&gt;data); <span class="comment">// 输出pmove节点的数据</span></span><br><span class="line">        pmove = pmove-&gt;next;        <span class="comment">// 将pmove指向pmove的下一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *list = <span class="built_in">CreatList</span>();   <span class="comment">// 创建链表</span></span><br><span class="line">    <span class="built_in">PrintList</span>(list);            <span class="comment">// 打印链表</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) <span class="comment">// 循环3次</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">InsertHead</span>(list, i); <span class="comment">// 在链表头部插入数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">PrintList</span>(list);                              <span class="comment">// 打印链表</span></span><br><span class="line">    <span class="built_in">InsertTail</span>(list, <span class="number">666</span>);                        <span class="comment">// 在链表尾部插入数据</span></span><br><span class="line">    <span class="built_in">PrintList</span>(list);                              <span class="comment">// 打印链表</span></span><br><span class="line">    <span class="built_in">InsertAppoin</span>(list, <span class="number">666</span>, <span class="number">999</span>);                 <span class="comment">// 在指定位置插入数据</span></span><br><span class="line">    <span class="built_in">PrintList</span>(list);                              <span class="comment">// 打印链表</span></span><br><span class="line">    <span class="built_in">InsertIndex</span>(list, <span class="number">2</span>, <span class="number">888</span>);                    <span class="comment">// 在指定索引插入数据</span></span><br><span class="line">    <span class="built_in">PrintList</span>(list);                              <span class="comment">// 打印链表</span></span><br><span class="line">    <span class="built_in">DeleteHead</span>(list);                             <span class="comment">// 删除链表头部节点</span></span><br><span class="line">    <span class="built_in">PrintList</span>(list);                              <span class="comment">// 打印链表</span></span><br><span class="line">    <span class="built_in">DeleteTail</span>(list);                             <span class="comment">// 删除链表尾部节点</span></span><br><span class="line">    <span class="built_in">PrintList</span>(list);                              <span class="comment">// 打印链表</span></span><br><span class="line">    <span class="built_in">DeleteAppoin</span>(list, <span class="number">0</span>);                        <span class="comment">// 删除指定位置的节点</span></span><br><span class="line">    <span class="built_in">PrintList</span>(list);                              <span class="comment">// 打印链表</span></span><br><span class="line">    <span class="built_in">DeleteIndex</span>(list, <span class="number">0</span>);                         <span class="comment">// 删除指定索引的节点</span></span><br><span class="line">    <span class="built_in">PrintList</span>(list);                              <span class="comment">// 打印链表</span></span><br><span class="line">    Node *SearchByData = <span class="built_in">SearchAppoin</span>(list, <span class="number">999</span>); <span class="comment">// 根据数据查找节点</span></span><br><span class="line">    <span class="keyword">if</span> (SearchByData)                             <span class="comment">// 如果找到的节点不为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, SearchByData-&gt;data); <span class="comment">// 输出找到的节点的数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    Node *SearchByIndex = <span class="built_in">SearchIndex</span>(list, <span class="number">0</span>); <span class="comment">// 根据索引查找节点</span></span><br><span class="line">    <span class="keyword">if</span> (SearchByIndex)                          <span class="comment">// 如果找到的节点不为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, SearchByIndex-&gt;data); <span class="comment">// 输出找到的节点的数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">EditAppoin</span>(list, <span class="number">888</span>, <span class="number">555</span>); <span class="comment">// 修改指定位置的数据</span></span><br><span class="line">    <span class="built_in">PrintList</span>(list);            <span class="comment">// 打印链表</span></span><br><span class="line">    <span class="built_in">EditIndex</span>(list, <span class="number">1</span>, <span class="number">777</span>);    <span class="comment">// 修改指定索引的数据</span></span><br><span class="line">    <span class="built_in">PrintList</span>(list);            <span class="comment">// 打印链表</span></span><br><span class="line">    <span class="built_in">FreeList</span>(list);             <span class="comment">// 释放链表占用的内存</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言学习笔记🍒</title>
      <link href="/2024/12/01/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/12/01/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="yi-fang-fa-lei">一、方法类</h1><h2 id="1-zi-fu-chuan-fan-zhuan-shi-xian-fang-fa" id="1-字符串翻转实现方法">1. 字符串翻转实现方法</h2><blockquote><p>方法 1：</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 构造函数1，传入字符串指针，计算字符串长度，通过暂存变量c将第一个和最后一个、第二个和倒数第二个...进行交换。 如果是字符长度是偶数，交换1/2的长度刚好；如果是奇数，也是交换1/2的长度，最中间的字符无需调换 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">function1</span><span class="params">(<span class="type">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line"><span class="type">int</span> j = len - <span class="number">1</span>; <span class="comment">// 取len-1的原因是，数组下标索引从0开始，到len-1结束</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; len / <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">c = str[i];</span><br><span class="line">str[i] = str[j];</span><br><span class="line">str[j] = c;</span><br><span class="line">i++;</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>方法 2：</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 构造函数2，传入字符串指针，计算字符串长度，通过暂存变量c将第一个和最后一个、第二个和倒数第二个...进行交换。用i代表开始索引角标，j代表索引末尾角标，只要i小于j就将对应的值进行互换，同样实现翻转 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">function2</span><span class="params">(<span class="type">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line"><span class="type">int</span> j = len - <span class="number">1</span>; <span class="comment">// 取len-1的原因是，数组下标索引从0开始，到len-1结束</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line">c = *(str + i);</span><br><span class="line">*(str + i) = *(str + j);</span><br><span class="line">*(str + j) = c;</span><br><span class="line">i++;</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-zi-jian-fang-fa-shi-xian-da-zheng-shu-qiu-he" id="2-自建方法实现大整数求和">2. 自建方法实现大整数求和</h2><blockquote><p>初级版</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">//定义最大值函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x &gt;= y) ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义最小值函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x &lt;= y) ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义字符串翻转函数</span></span><br><span class="line"><span class="function"><span class="type">char</span> *<span class="title">reverseStr</span><span class="params">(<span class="type">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="built_in">strlen</span>(str) - <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> temp;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = *(str + i);</span><br><span class="line">        *(str + i) = *(str + j);</span><br><span class="line">        *(str + j) = temp;</span><br><span class="line">        i++;</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>;</span><br><span class="line">    <span class="type">char</span> m[<span class="number">99</span>], n[<span class="number">99</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请随意输入两个大的整数进行求和：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>, m, n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;你输入的两个数为：\nNum1=%s\nNum2=%s\n求和值为：&quot;</span>, m, n);</span><br><span class="line">    <span class="comment">//求两个字符串长度,长度差及最大长度</span></span><br><span class="line">    <span class="type">int</span> x = <span class="built_in">strlen</span>(m), y = <span class="built_in">strlen</span>(n);</span><br><span class="line">    <span class="type">int</span> z = <span class="built_in">Max</span>(x, y) - <span class="built_in">Min</span>(x, y);</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">Max</span>(x, y);</span><br><span class="line">    <span class="comment">//字符串翻转</span></span><br><span class="line">    <span class="built_in">reverseStr</span>(m);</span><br><span class="line">    <span class="built_in">reverseStr</span>(n);</span><br><span class="line">    <span class="comment">//将翻转后的字符串转换成整型数组，并对长度较短的数组后面补0</span></span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="type">int</span> num_m[<span class="number">99</span>] = &#123;<span class="number">0</span>&#125;, num_n[<span class="number">99</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            num_m[i] = m[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            num_n[i] = n[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (j = len - <span class="number">1</span>; j &gt;= len - z; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            num_m[j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            num_m[i] = m[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            num_n[i] = n[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (j = len - <span class="number">1</span>; j &gt;= len - z; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            num_n[j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            num_m[i] = m[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            num_n[i] = n[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="comment">//从第一位遍历两个数组，并相加</span></span><br><span class="line">    <span class="type">int</span> sum[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> temp[<span class="number">100</span>];</span><br><span class="line">    <span class="type">int</span> carry = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp[i] = num_m[i] + num_n[i] + carry; <span class="comment">//两数相加后进行暂存</span></span><br><span class="line">        carry = temp[i] / <span class="number">10</span>; <span class="comment">//对暂存值除10，如果大于10，则下个暂存值+1，否则+0</span></span><br><span class="line">        <span class="keyword">if</span> (temp[i] &gt;= <span class="number">10</span>)<span class="comment">//如果暂存值&gt;=10，则对暂存值取模赋给最终值，否则直接赋值</span></span><br><span class="line">        &#123;</span><br><span class="line">            sum[i] = temp[i] % <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            sum[i] = temp[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 逆序输出</span></span><br><span class="line">    <span class="keyword">if</span> (sum[len] == <span class="number">0</span>) <span class="comment">//如果最后一位为0，则在翻转输出时不取最后一位，否则取最后一位</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sum[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = len; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sum[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>进阶版</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">overturn</span><span class="params">(<span class="type">char</span> *string, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> temp;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; len - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = string[left];</span><br><span class="line">        string[left] = string[len - <span class="number">1</span>];</span><br><span class="line">        string[len - <span class="number">1</span>] = temp;</span><br><span class="line">        left++;</span><br><span class="line">        len--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt;= b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">min</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt;= b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">overturn</span><span class="params">(<span class="type">char</span> *string, <span class="type">int</span> len)</span></span>;</span><br><span class="line">    <span class="comment">// 声明和输入字符串</span></span><br><span class="line">    <span class="type">char</span> a[<span class="number">100</span>], b[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>, a, b);</span><br><span class="line">    <span class="comment">// 字符串翻转</span></span><br><span class="line">    <span class="type">int</span> len_a = <span class="built_in">strlen</span>(a);</span><br><span class="line">    <span class="type">int</span> len_b = <span class="built_in">strlen</span>(b);</span><br><span class="line">    <span class="built_in">overturn</span>(a, len_a);</span><br><span class="line">    <span class="built_in">overturn</span>(b, len_b);</span><br><span class="line">    <span class="comment">// 字符串转数组，较短一个数组补全0</span></span><br><span class="line">    <span class="type">int</span> num_a[<span class="number">100</span>], num_b[<span class="number">100</span>];</span><br><span class="line">    <span class="type">int</span> len_num = <span class="built_in">max</span>(len_a, len_b);</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len_num; i++) <span class="comment">// 字符串转数组</span></span><br><span class="line">    &#123;</span><br><span class="line">        num_a[i] = a[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        num_b[i] = b[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">max</span>(len_a, len_b) - <span class="built_in">min</span>(len_a, len_b) != <span class="number">0</span>) <span class="comment">// 计算长度差，用于计补全0的个数</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="built_in">min</span>(len_a, len_b); i &lt; len_num; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (len_a &gt; len_b)</span><br><span class="line">            &#123;</span><br><span class="line">                num_b[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                num_a[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> sum[<span class="number">101</span>];  <span class="comment">// 声明和数组，多一位是以防最后进位多一位</span></span><br><span class="line">    <span class="type">int</span> temp = <span class="number">0</span>;  <span class="comment">// 暂存每位数相加之和，便于后续处理</span></span><br><span class="line">    <span class="type">int</span> carry = <span class="number">0</span>; <span class="comment">// 进位值</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len_num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = num_a[i] + num_b[i] + carry;</span><br><span class="line">        carry = temp / <span class="number">10</span>;</span><br><span class="line">        sum[i] = temp % <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (carry != <span class="number">0</span>) <span class="comment">// 判断进位值是否携带值，如果携带的话，需在输出的时候多进一位且值为1</span></span><br><span class="line">    &#123;</span><br><span class="line">        sum[len_num] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = len_num; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sum[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = len_num - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sum[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-qu-yi-ge-duo-wei-shu-de-mei-wei-shang-shu-zhi-de-fang-fa" id="3-取一个多位数的每位上数值的方法">3. 取一个多位数的每位上数值的方法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> m;<span class="comment">//假如m是一个五位数</span></span><br><span class="line"><span class="type">int</span> g, s, b, q, w;</span><br><span class="line">g = m / <span class="number">1</span> % <span class="number">10</span>;<span class="comment">//个位</span></span><br><span class="line">s = m / <span class="number">10</span> % <span class="number">10</span>;<span class="comment">//十位</span></span><br><span class="line">b = m / <span class="number">100</span> % <span class="number">10</span>;<span class="comment">//百位</span></span><br><span class="line">q = m / <span class="number">1000</span> % <span class="number">10</span>;<span class="comment">//千位</span></span><br><span class="line">w = m / <span class="number">10000</span> % <span class="number">10</span>;<span class="comment">//万位</span></span><br><span class="line"><span class="comment">//....以此类推 </span></span><br></pre></td></tr></table></figure><h2 id="4-di-gui-sheng-cheng-fei-bo-na-qi-shu-lie" id="4-递归生成斐波那契数列">4. 递归生成斐波那契数列</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fibonacci</span><span class="params">(<span class="type">int</span> index)</span>    <span class="comment">// index 表示求数列中第 index 个位置上的数的值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 设置结束递归的限制条件(即，递归的出口)</span></span><br><span class="line">    <span class="keyword">if</span> (index == <span class="number">1</span> || index == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// F(index) = F(index-1) + F(index-2)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fibonacci</span>(index - <span class="number">1</span>) + <span class="built_in">fibonacci</span>(index - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fibonacci</span><span class="params">(<span class="type">int</span> index)</span></span>;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)    <span class="comment">// 输出前 10 个数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, <span class="built_in">fibonacci</span>(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-ji-suan-zi-fu-chuan-chang-zi-fu-chuan-zhong-zi-chuan-ji-duan-zi-fu-chuan-chu-xian-de-ci-shu" id="4-计算字符串（长字符串）中子串（即短字符串）出现的次数">4. 计算字符串（长字符串）中子串（即短字符串）出现的次数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">(<span class="type">char</span> *str1, <span class="type">int</span> len1, <span class="type">char</span> *str2, <span class="type">int</span> len2)</span></span>;</span><br><span class="line">    <span class="type">char</span> str1[<span class="number">100</span>];</span><br><span class="line">    <span class="type">char</span> str2[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入两个字符串：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>, str1, str2);</span><br><span class="line">    <span class="type">int</span> len1 = <span class="built_in">strlen</span>(str1), len2 = <span class="built_in">strlen</span>(str2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;子串出现了%d次\n&quot;</span>, <span class="built_in">count</span>(str1, len1, str2, len2));</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">(<span class="type">char</span> *str1, <span class="type">int</span> len1, <span class="type">char</span> *str2, <span class="type">int</span> len2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (len1 &gt;= len2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len1; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len2; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (*(str1 + i) != *(str2 + i)) <span class="comment">// 遍历子串与父串一一比较，只要有不同就进入下一次循环</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == len2) <span class="comment">// 如果子串遍历的循环完整完成一轮，代表符合题目条件，则计数一次</span></span><br><span class="line">            &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len2; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len1; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (*(str2 + i) != *(str1 + i))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == len1)</span><br><span class="line">            &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-bu-shi-yong-di-san-ge-bian-liang-de-qing-kuang-xia-jiao-huan-bian-liang-a-he-bian-liang-b-de-zhi" id="5-不使用第三个变量的情况下，交换变量-a-和变量-b-的值">5. 不使用第三个变量的情况下，交换变量 a 和变量 b 的值</h2><blockquote><p>方法 1：使用异或 “^”</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;你输入的a=%d, b=%d\n&quot;</span>, a, b);</span><br><span class="line">    a = a ^ b;</span><br><span class="line">    b = a ^ b; <span class="comment">// =&gt; b = a^b^b = a^0 = a</span></span><br><span class="line">    a = a ^ b; <span class="comment">// =&gt; a = a^b^b(等于最开始的a) = a^b^a = a^a^b = 0^b = b</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换后的a=%d, b=%d\n&quot;</span>, a, b);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>方法 2：求和后相减</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;你输入的a=%d, b=%d\n&quot;</span>, a, b);</span><br><span class="line">    a = a + b;</span><br><span class="line">    b = a - b; <span class="comment">// =&gt; b = a+b-b = a</span></span><br><span class="line">    a = a - b; <span class="comment">// =&gt; a = a+b-b(等于最开始的a) = a+b-a = b</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换后的a=%d, b=%d\n&quot;</span>, a, b);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>方法 3：宏定义</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OVERTURN(a, b) \</span></span><br><span class="line"><span class="meta">    &#123;                  \</span></span><br><span class="line"><span class="meta">        a = a + b;     \</span></span><br><span class="line"><span class="meta">        b = a - b;     \</span></span><br><span class="line"><span class="meta">        a = a - b;     \</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="built_in">OVERTURN</span>(a, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, a, b);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-shan-chu-zi-fu-chuan-zhong-de-te-ding-zi-fu" id="6-删除字符串中的特定字符">6. 删除字符串中的特定字符</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DeleteChar</span><span class="params">(<span class="type">char</span> *str, <span class="type">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> str_len = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; str_len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] != c) <span class="comment">//遍历字符串，当未遇到想要删除的字符时，将字符串重新依次排序（即i和j同时自增）；反之，如果遇到，则选择跳过（即i自增，j不变）</span></span><br><span class="line">        &#123;</span><br><span class="line">            str[j] = str[i];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    str[j] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DeleteChar</span><span class="params">(<span class="type">char</span> *str, <span class="type">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)<span class="built_in">strlen</span>(str); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] == c)  <span class="comment">//遍历字符串，当遇到想要删除的字符时，将字符后面的所有字符向前挪一位实现删除效果</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = i; j &lt; (<span class="type">int</span>)<span class="built_in">strlen</span>(str); j++)</span><br><span class="line">            &#123;</span><br><span class="line">                str[j] = str[j + <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">1024</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入一段字符串:&quot;</span>);</span><br><span class="line">    <span class="built_in">gets</span>(str); <span class="comment">//不用scanf，是为了防止出现“为什么用`strlen()`不能算出空格”同类问题出现</span></span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入你想在字符串中删除的某一个字符:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;c);</span><br><span class="line">    <span class="built_in">DeleteChar</span>(str, c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-ying-yong-mei-ju-bian-liang-shu-chu-xing-qi-yi-xing-qi-ri" id="7-应用枚举变量输出星期一～星期日">7. 应用枚举变量输出星期一～星期日</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">week</span></span><br><span class="line">&#123;</span><br><span class="line">    Mon = <span class="number">1</span>,</span><br><span class="line">    Tue,</span><br><span class="line">    Wed,</span><br><span class="line">    Thu,</span><br><span class="line">    Fri,</span><br><span class="line">    Sat,</span><br><span class="line">    Sun</span><br><span class="line">&#125; day;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;day);</span><br><span class="line">    <span class="keyword">switch</span> (day)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> Mon:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Monday&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> Tue:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Tuesday&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> Wed:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Wednesday&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> Thu:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Thursday&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> Fri:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Friday&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> Sat:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Saturday&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> Sun:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Sunday&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Error!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-jie-gou-ti-he-jie-gou-ti-zhi-zhen" id="8-结构体和结构体指针">8. 结构体和结构体指针</h2><blockquote><p>结构体声明和初始化方法 1–在主函数内直接赋值</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Fruit</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">char</span> colour[<span class="number">20</span>];</span><br><span class="line">    <span class="type">float</span> price;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Fruit</span> fruit;</span><br><span class="line">    <span class="built_in">strcpy</span>(fruit.name, <span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(fruit.colour, <span class="string">&quot;Red&quot;</span>);</span><br><span class="line">    fruit.price = <span class="number">2.5</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;name: %s,colur: %s,price:%.2f\n&quot;</span>, fruit.name, fruit.colour, fruit.price);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结构体声明和初始化方法 2–直接在主函数声明处初始化</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Fruit</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">char</span> colour[<span class="number">20</span>];</span><br><span class="line">    <span class="type">float</span> price;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Fruit</span> fruit = &#123;<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Red&quot;</span>, <span class="number">2.5</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;name: %s,colur: %s,price:%.2f\n&quot;</span>, fruit.name, fruit.colour, fruit.price);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结构体声明和初始化方法 3–应用结构体指针构造输入输出函数实现结构体的数组化输入和输出</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUM 3  <span class="comment">//定义需要输入的数量</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span>  <span class="comment">//声明结构体</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">char</span> sex[<span class="number">5</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Input</span><span class="params">(<span class="keyword">struct</span> student *stu)</span>  <span class="comment">//构造输入函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NUM; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s%s%d&quot;</span>, stu[i].name, stu[i].sex, &amp;stu[i].age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Output</span><span class="params">(<span class="keyword">struct</span> student *stu)</span>  <span class="comment">//构造输出函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NUM; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;姓名:%s  性别:%s  年龄:%d\n&quot;</span>, stu[i].name, stu[i].sex, stu[i].age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">student</span> stu[NUM];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Input</span><span class="params">(<span class="keyword">struct</span> student * stu)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Output</span><span class="params">(<span class="keyword">struct</span> student * stu)</span></span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入学生姓名、性别和年龄：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">Input</span>(stu);</span><br><span class="line">    <span class="built_in">Output</span>(stu);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结构体声明和初始化方法 4–直接在结构体声明处初始化</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">stu</span> <span class="comment">// 自定义结构体包含姓名和分数；</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> grades;</span><br><span class="line">&#125; stu[<span class="number">3</span>] = &#123;<span class="string">&quot;张三&quot;</span>, <span class="number">65</span>, <span class="string">&quot;李四&quot;</span>, <span class="number">75</span>, <span class="string">&quot;王麻子&quot;</span>, <span class="number">90</span>&#125;; <span class="comment">// 初始化3个人和各自得分</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">stu</span> *p = stu;  <span class="comment">// 声明指针p指向stu</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">stu</span> *q = <span class="literal">NULL</span>; <span class="comment">// 声明指针q,赋予空值</span></span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">int</span> max_grades = <span class="number">0</span>;<span class="comment">// 声明一个最高分数赋初值为0</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) <span class="comment">// 遍历结构体中每个人的分数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;grades &gt; max_grades) <span class="comment">// 如果后一个人分数比假定的最大值大的话就赋值给最大值</span></span><br><span class="line">&#123;</span><br><span class="line">max_grades = p-&gt;grades;</span><br><span class="line">q = p; <span class="comment">// 当找到最大值时，将对应的地址赋给指针q</span></span><br><span class="line">&#125;</span><br><span class="line">p++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;姓名：%s 得分：%d\n&quot;</span>, q-&gt;name, q-&gt;grades);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结构体应用实例–景区门票案例：</p><ul class="lvl-1"><li class="lvl-2">一个景区根据游人的年龄收取不一样价格的门票</li><li class="lvl-2">请根据游人结构体（Visitor）, 根据年龄段决定可以购买的门票价格并输出</li><li class="lvl-2">规则：年龄 &gt; 18, 门票为 20 元，其余状况免费</li><li class="lvl-2">能够循环从控制台输入名字和年龄，打印门票收费状况，若是名字输入 n，则退出程序</li></ul></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Visitor</span> <span class="comment">// 定义结构体</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">int</span> price;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">visitor_ticket</span><span class="params">(<span class="keyword">struct</span> Visitor *visitor)</span> <span class="comment">// 定义票价判断函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (visitor-&gt;age &gt; <span class="number">18</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        visitor-&gt;price = <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        visitor-&gt;price = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Visitor</span> visitor;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入姓名：&quot;</span>);</span><br><span class="line">        <span class="built_in">gets</span>(visitor.name);             <span class="comment">// 用gets而不用scanf是为了防止用户在输入空格时，scanf不能完全读取输入内容</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(visitor.name, <span class="string">&quot;n&quot;</span>)) <span class="comment">// 如果输入“n”，则strcmp(visitor.name, &quot;n&quot;)结果为0，判断&quot;!0&quot;即为真，则退出程序</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;退出程序\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入年龄：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;visitor.age);</span><br><span class="line">        <span class="built_in">visitor_ticket</span>(&amp;visitor); <span class="comment">// 注意，自定义的票价判断函数形参是结构体指针，因此在此处需要取地址</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;票价为%d元\n&quot;</span>, visitor.price);</span><br><span class="line">        <span class="built_in">getchar</span>(); <span class="comment">// 吸收掉printf函数的换行符</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>很多时候，在对结构体进行相应的编码时，时而发现是用点运算符 (.)，时而是用箭头运算符 ( -&gt; )；那么这两者之间的使用有什么区别么？</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>相同点：两者都是二元操作符，而且右边的操作数都是成员的名称。</p></li><li class="lvl-2"><p>不同点：点运算符 (.) 的左边操作数是一个结果为结构的表达式； 箭头运算符 ( -&gt; ) 的左边的操作数是一个指向结构体的指针。</p></li></ul><p>例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>          <span class="comment">// 定义一个结构体类型：DATA</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> key[<span class="number">10</span>];       <span class="comment">// 结构体成员：key</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];      <span class="comment">// 结构体成员：name</span></span><br><span class="line">    <span class="type">int</span> age;            <span class="comment">// 结构体成员：age</span></span><br><span class="line">&#125;DATA;</span><br><span class="line">    </span><br><span class="line">DATA data;              <span class="comment">// 声明一个结构体变量</span></span><br><span class="line">DATA *pdata;            <span class="comment">// 声明一个指向结构体的指针</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 访问数据操作如下：</span></span><br><span class="line">data.age = <span class="number">24</span>;          <span class="comment">// 结构体变量通过点运算符( . )访问</span></span><br><span class="line">pdata-&gt;age = <span class="number">24</span>;        <span class="comment">// 指向结构体的指针通过箭头运算符( -&gt; )访问</span></span><br></pre></td></tr></table></figure><h2 id="9-gong-yong-ti" id="9-共用体">9. 共用体</h2><blockquote><p>共用体的声明方法和结构体类似，具体如下：</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="title class_">data</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="type">double</span> f;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">union</span> <span class="title class_">data</span> a,b,c;</span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> <span class="title class_">data</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="type">double</span> f;</span><br><span class="line">&#125;a,b,c;</span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="type">double</span> f;</span><br><span class="line">&#125;a,b,c;</span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> <span class="title class_">data</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;   <span class="comment">// 占用4个字节的内存空间</span></span><br><span class="line">    <span class="type">char</span> ch; <span class="comment">// 占用1个字节的内存空间</span></span><br><span class="line">    <span class="type">short</span> m; <span class="comment">// 占用2个字节的内存空间</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">union</span> <span class="title class_">data</span> a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%llu,%llu\n&quot;</span>, <span class="built_in">sizeof</span>(a), <span class="built_in">sizeof</span>(<span class="keyword">union</span> data));</span><br><span class="line">    a.n = <span class="number">0x40</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%c,%d\n&quot;</span>, a.n, a.ch, a.m);</span><br><span class="line">    a.ch = <span class="string">&#x27;9&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%c,%d\n&quot;</span>, a.n, a.ch, a.m);</span><br><span class="line">    a.m = <span class="number">0x2059</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%c,%d\n&quot;</span>, a.n, a.ch, a.m);</span><br><span class="line">    a.n = <span class="number">0x3E25AD54</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%c,%d\n&quot;</span>, a.n, a.ch, a.m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面定义的共用体输出结果为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span>,<span class="number">4</span></span><br><span class="line"><span class="number">64</span>,@,64</span><br><span class="line"><span class="number">57</span>,<span class="number">9</span>,<span class="number">57</span></span><br><span class="line"><span class="number">8281</span>,Y,<span class="number">8281</span></span><br><span class="line"><span class="number">1042656596</span>,T,-<span class="number">21164</span></span><br></pre></td></tr></table></figure><p><strong>出现上述输出结果的原因是：成员 n,ch,m, 在内存中 “对齐” 到一头，对 ch 赋值修改的是前一个字节，对 m 赋值修改的是前两个字节，对 n 赋值修改的是所有字节。也就是说，ch,m 会影响到 n 的一部分数据，而 n 会影响到 ch,m 的所有数据。</strong></p><h2 id="10-gong-yong-ti-he-jie-gou-ti-de-qu-bie" id="10-共用体和结构体的区别">10. 共用体和结构体的区别</h2><ul class="lvl-0"><li class="lvl-2"><p><strong>变量长度不同</strong></p></li></ul><p>结构体变量所占内存长度是各成员占的内存长度之和，每个成员分别占有其自己的内存单元。</p><p>共用体变量所占的内存长度等于最长的成员的长度。</p><ul class="lvl-0"><li class="lvl-2"><p><strong>占用空间不同</strong></p></li></ul><p>结构体是同时存在的，并一次占用一段连续的内存空间；</p><p>而共用体则是多个共用成员占用同一个开始的内存地址，同时他们只能存在一各，所以空间大小就是最大那个所需的空间，如果单从一个共用体来讲，我们是不知道里面存的是什么内容，需要根据程序上下文才能确定。</p><p><img src="https://bu.dusays.com/2024/12/08/67552133426e0.png" alt=""></p><ul class="lvl-0"><li class="lvl-2"><p><strong>分配储存空间不同</strong></p></li></ul><p>结构体是由一系列具有相同类型或不同类型的数据构成的数据集合，简称结构。在 C 语言中，可以定义结构体类型，将多个相关的变量包装成为一个整体来使用。在结构体中的变量，可以是相同、部分相同，或完全不同的数据类型。</p><p>结构体类型的定义只是由用户构造了一个结构体，但定义结构体类型时系统并不为其分配存储空间。</p><ul class="lvl-0"><li class="lvl-2"><p><strong>修改某一成员后造成的结果不同</strong></p></li></ul><p>结构体的各个成员会占用不一样的内存，互相之间没有影响；而共用体的全部成员占用同一段内存，修改一个成员会影响其他全部成员。</p><blockquote><p>共用体和结构体共同应用实例：</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUM 2 <span class="comment">// 人员总数</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Person</span> <span class="comment">// 定义一个结构体Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="type">char</span> sex;</span><br><span class="line">    <span class="type">char</span> profession;</span><br><span class="line">    <span class="keyword">union</span> <span class="title class_">Union</span> <span class="comment">// 定义一个共用体Union</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">float</span> score;</span><br><span class="line">        <span class="type">char</span> course[<span class="number">20</span>];</span><br><span class="line">    &#125; sc; <span class="comment">// sc是一个共用体变量</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Person</span> person[NUM]; <span class="comment">// 定义一个结构体数组</span></span><br><span class="line">    <span class="comment">// 输入人员信息</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; NUM; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n按照姓名 编号 性别(男为m，女为f) 职业(学生为s，老师为t)的顺序输入相关信息:\n&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s %d %c %c&quot;</span>, person[i].name, &amp;(person[i].num), &amp;(person[i].sex), &amp;(person[i].profession));</span><br><span class="line">        <span class="keyword">if</span> (person[i].profession == <span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;请输入该学生成绩：&quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;person[i].sc.score);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (person[i].profession == <span class="string">&#x27;t&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;请输入该老师课程：&quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, person[i].sc.course);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">fflush</span>(stdin); <span class="comment">// 清空输入缓冲区，通常是为了确保不影响后面的数据读取</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 输出人员信息</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n姓名\t编号\t性别\t职业\t得分\t课程\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; NUM; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (person[i].profession == <span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\t%d\t%c\t%c\t%.2f\n&quot;</span>, person[i].name, person[i].num, person[i].sex, person[i].profession, person[i].sc.score);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (person[i].profession == <span class="string">&#x27;t&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\t%d\t%c\t%c\t\t%s\n&quot;</span>, person[i].name, person[i].num, person[i].sex, person[i].profession, person[i].sc.course);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">按照姓名 编号 性别(男为m，女为f) 职业(学生为s，老师为t)的顺序输入相关信息:</span><br><span class="line">张三 <span class="number">03</span> m s</span><br><span class="line">请输入该学生成绩：<span class="number">95</span></span><br><span class="line"></span><br><span class="line">按照姓名 编号 性别(男为m，女为f) 职业(学生为s，老师为t)的顺序输入相关信息:</span><br><span class="line">李四 <span class="number">02</span> f t</span><br><span class="line">请输入该老师课程：语文</span><br><span class="line"></span><br><span class="line">姓名    编号    性别    职业    得分    课程</span><br><span class="line">张三    <span class="number">3</span>       m       s     <span class="number">95.00</span></span><br><span class="line">李四    <span class="number">2</span>       f       t            语文</span><br></pre></td></tr></table></figure><h1 id="er-wen-ti-lei">二、问题类</h1><h2 id="1-wei-shi-yao-yong-code-strlen-code-bu-neng-suan-chu-kong-ge" id="1-为什么用-strlen-不能算出空格">1. 为什么用 <code>strlen()</code> 不能算出空格</h2><p>问题出在 <code>scanf()</code>。<code>scanf()</code> 开始读取输入以后，会在遇到的第一个空白字符空格（blank）、制表符（tab）或者换行符（newline）处停止读取。可以使用 <code>scanf(&quot;%[^\n]s&quot;,a);</code> 来解决问题。其中 <code>%[^\n]</code> 是说明只有在读入回车符时才终止读取。用 <code>getchar()</code> 在一个循环中不断读取字符缓冲区中的字符直到 <code>\n</code> 为止也可以实现类似功能，就是麻烦了些。</p><h2 id="2-code-vscode-code-yin-yong-zi-jian-tou-wen-jian-wen-ti" id="2-vscode-引用自建头文件问题">2. <code>vscode</code> 引用自建头文件问题</h2><p>vscode 在引用自建头文件时可能会出现 <code>Cannot open include file: 'Function.h': No such file or directory</code> 的提示，解决方法如下：在引用头文件时，将<code>#include &lt;Function.h&gt;</code> 改成<code>#include &quot;Function.h&quot;</code> 即可。</p><h1 id="san-bian-yi-cuo-wu-he-jing-gao-lei">三、编译错误和警告类</h1><h2 id="cuo-wu-lei" id="错误类">错误类</h2><h3 id="1-code-segmentation-fault-code" id="1-Segmentation-fault">1. <code>Segmentation fault</code></h3><p>意思为<strong>段错误</strong>，所谓的段错误就是指访问的内存超过了系统所给这个程序的内存空间，通常这个值是由 <code>gdtr</code> 来保存的，他是一个 48 位的寄存器，其中的 32 位是保存由它指向的 <code>gdt</code> 表，后 13 位保存相应于 <code>gdt</code> 的下标，最后 3 位包括了程序是否在内存中以及程序的在 <code>CPU</code> 中的运行级别，指向的 <code>gdt</code> 是由以 64 位为一个单位的表，在这张表中就保存着程序运行的代码段以及数据段的起始地址以及相应的断限和页面交换还有程序运行级别和内存粒度等信息，一旦一个程序发生了越界访问，CPU 就会产生相应的异常保护，于是 <code>segmentation fault</code> 就出现了。</p><h3 id="2-code-no-operator-int-declared-for-postfix-fpermissive-code" id="2-no-operator-int-declared-for-postfix-fpermissive">2.<code>no 'operator++(int)' declared for postfix '++' [-fpermissive]</code></h3><p>意思就是自增运算没有声明对应的整型变量。此报错是按照菜鸟教程在遍历枚举元素时出现的，定义 day 是枚举对象，不允许 ++ 操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">days</span></span><br><span class="line">&#123;</span><br><span class="line">    Mon = <span class="number">1</span>,</span><br><span class="line">    Tue,</span><br><span class="line">    Wed,</span><br><span class="line">    Thu,</span><br><span class="line">    Fri,</span><br><span class="line">    Sat,</span><br><span class="line">    Sun</span><br><span class="line">&#125; day;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (day = Mon; day &lt;= Sun; day++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;枚举元素：%d \n&quot;</span>, day);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修正方法，重新声明新的变量 <code>i</code>，再进行遍历：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">days</span></span><br><span class="line">&#123;</span><br><span class="line">    Mon = <span class="number">1</span>,</span><br><span class="line">    Tue,</span><br><span class="line">    Wed,</span><br><span class="line">    Thu,</span><br><span class="line">    Fri,</span><br><span class="line">    Sat,</span><br><span class="line">    Sun</span><br><span class="line">&#125; day;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = Mon; i &lt;= Sun; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;枚举元素：%d \n&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="jing-gao-lei" id="警告类">警告类</h2><h3 id="1-code-warning-control-reaches-end-of-non-void-function-wreturn-type-code" id="1-warning-control-reaches-end-of-non-void-function-Wreturn-type">1. <code>warning: control reaches end of non-void function [-Wreturn-type]</code></h3><p>这个是非常正经的分析，用 <code>gcc</code> 编译一个程序的时候出现这样的警告：<code>warning: control reaches end of non-void function</code>. 它的意思是：控制到达非 <code>void</code> 函数的结尾。就是说你的一些本应带有返回值的函数到达结尾后可能并没有返回任何值。这时候，最好检查一下是否每个控制流都会有返回值。</p><h3 id="2-code-warning-iso-c-forbids-converting-a-string-constant-to-char-wwrite-strings-code" id="2-warning-ISO-C-forbids-converting-a-string-constant-to-‘char-’-Wwrite-strings">2. <code>warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]</code></h3><p>在 C++ 中，如果像如下初始化指针变量，会跳出警告：<code>warning: ISO C++ forbids converting a string constant to 'char*' [-Wwrite-strings]</code>:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* p = <span class="string">&quot;abc&quot;</span>;　　<span class="comment">// valid in C, invalid in C++</span></span><br></pre></td></tr></table></figure><p>改成下面会通过 warning:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* p = (<span class="type">char</span>*)<span class="string">&quot;abc&quot;</span>;  <span class="comment">// pass</span></span><br></pre></td></tr></table></figure><p>或者改成下面:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="type">const</span> *p = <span class="string">&quot;abc&quot;</span>;　　<span class="comment">// pass</span></span><br></pre></td></tr></table></figure><h5 id="yuan-yin-jie-xi" id="原因解析：">原因解析：</h5><p>学习 <code>c</code> 或者 <code>c++</code> 的时候都知道，如果在赋值操作的时候，等号两边的变量类型不一样，那么编译器会进行一种叫做 <code>implicit conversion</code>（隐含转换）的操作来使得变量可以被赋值。</p><p>在上面的表达式中等号右边的 <code>&quot;abc&quot;</code> 是一个不变常量，在 c++ 中叫做 <code>string literal</code>，type 是 <code>const char *</code>，而 <code>p</code> 则是一个 <code>char</code> 指针。如果强行赋值会发生什么呢？没错，就是将右边的常量强制类型转换成一个指针，结果就是我们在修改一个 <code>const</code> 常量。编译运行的结果会因编译器和操作系统共同决定，有的编译器会通过，有的会抛异常，就算过了也可能因为操作系统的敏感性而被杀掉。</p><p>像这种直接将字符串赋值给指针的操作被开发者们认为是 <code>deprecated</code>(极力反对的)，只不过由于以前很多代码都有这种习惯，为了兼容，就保留下来了。</p><h3 id="3-code-warning-cast-to-pointer-from-integer-of-different-size-wint-to-pointer-cast-code" id="3-warning-cast-to-pointer-from-integer-of-different-size-Wint-to-pointer-cast">3. <code>warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]</code></h3><p><strong>警告：从不同大小的整数 [-Wint-to-pointer-cast] 转换为指针</strong></p><h5 id="yuan-yin-jie-xi-1" id="原因解析：-2">原因解析：</h5><ul class="lvl-0"><li class="lvl-2"><p>创建子线程时因为最后一个参数需要是指向子线程的文件描述符<code>（int类型）</code>的指针，因此调用时我们会将文件描述符强转为 <code>(void *)类型</code>，可能是系统不同的原因在 <code>int类型</code>强转为 <code>void类型</code>指针会出现上述警告。</p></li><li class="lvl-2"><p>通过 <code>sizeof(void *)</code> 和 <code>sizeof(int)</code> 的输出它们的大小分别为 <strong>8</strong> 和 <strong>4</strong>(不同的操作系统不一样) 所以编译后才出现 <code>int</code> 到 <code>(void *)</code> 转换大小不匹配。</p></li><li class="lvl-2"><p>解决办法根据实际需求，可以在声明变量时将 <code>int</code> 型改为 <code>long</code> 型，或者可以将 <code>(void *)</code> 改为 <code>&amp;</code>。</p></li></ul><h1 id="si-chang-yong-yu-fa-lei">四、常用语法类</h1><h2 id="1-c-yu-yan-zhong-chang-jian-de-dong-tai-nei-cun-shen-qing-han-shu-malloc-calloc-realloc" id="1-C-语言中常见的动态内存申请函数（malloc、calloc、realloc）">1.C 语言中常见的动态内存申请函数（malloc、calloc、realloc）</h2><p>malloc 的定义：</p><blockquote><p>该函数有一个参数 size，通过此参数向堆区申请 size 大小字节的连续空间（该函数不对申请的空间的数值做初始化）。返回一个指向该空间起始处的 void * 类型的指针，当空间申请失败时会返回一个空指针。如果 size 为 0，malloc 的行为是不确定的，取决于编译器。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="number">40</span>);  <span class="comment">//固定长度</span></span><br><span class="line"><span class="type">int</span> *p = (<span class="type">int</span> *)<span class="built_in">malloc</span>(n*<span class="built_in">sizeof</span>(<span class="type">int</span>));  <span class="comment">//动态长度，与变量n有关</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu常用设置和命令📘</title>
      <link href="/2024/12/01/Ubuntu%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE%E5%92%8C%E5%91%BD%E4%BB%A4/"/>
      <url>/2024/12/01/Ubuntu%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE%E5%92%8C%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="yi-geng-huan-jing-xiang-yuan">一、更换镜像源</h1><h2 id="a-li-yuan" id="阿里源">阿里源</h2><p>在 Ubuntu 24.04 之前，Ubuntu 的软件源配置文件使用传统的 One-Line-Style，路径为 <code>/etc/apt/sources.list</code>；从 Ubuntu 24.04 开始，Ubuntu 的软件源配置文件变更为 DEB822 格式，路径为 <code>/etc/apt/sources.list.d/ubuntu.sources</code>。</p><p><strong>注意：</strong> 24.04 源文件地址 已经更换为 <code>/etc/apt/sources.list.d/ubuntu.sources</code><br>以更换阿里源为例，受限打开终端，输入以下命令，备份当前的源列表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list.d/ubuntu.sources  /etc/apt/sources.list.d/ubuntu.sources.bak</span><br></pre></td></tr></table></figure><p>打开文本编辑器，输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list.d/ubuntu.sources</span><br></pre></td></tr></table></figure><p>在文本编辑器中粘贴以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 阿里云</span><br><span class="line">Types: deb</span><br><span class="line">URIs: http://mirrors.aliyun.com/ubuntu/</span><br><span class="line">Suites: noble noble-updates noble-security</span><br><span class="line">Components: main restricted universe multiverse</span><br><span class="line">Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg</span><br></pre></td></tr></table></figure><p>保存并关闭文本编辑器。</p><p>更新源列表，输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>如果需要，可以更新系统软件包，输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><p>其他几份国内源如下：</p><h2 id="qing-hua-yuan" id="清华源">清华源</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br><span class="line">Types: deb</span><br><span class="line">URIs: http://mirrors.tuna.tsinghua.edu.cn/ubuntu/</span><br><span class="line">Suites: noble noble-updates noble-security</span><br><span class="line">Components: main restricted universe multiverse</span><br><span class="line">Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg</span><br></pre></td></tr></table></figure><h2 id="zhong-ke-da-yuan" id="中科大源">中科大源</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Types: deb</span><br><span class="line">URIs: http://mirrors.ustc.edu.cn/ubuntu/</span><br><span class="line">Suites: noble noble-updates noble-security</span><br><span class="line">Components: main restricted universe multiverse</span><br><span class="line">Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg</span><br></pre></td></tr></table></figure><h2 id="wang-yi-163-yuan" id="网易163源">网易163源</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Types: deb</span><br><span class="line">URIs: http://mirrors.163.com/ubuntu/</span><br><span class="line">Suites: noble noble-updates noble-security</span><br><span class="line">Components: main restricted universe multiverse</span><br><span class="line">Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg</span><br></pre></td></tr></table></figure><h1 id="er-kai-qi-ssh-fu-wu-pei-zhi-root-yuan-cheng-deng-lu">二、开启ssh服务，配置root远程登录</h1><blockquote><p>注：自己根据自身情况决定加不加sudo</p></blockquote><h2 id="yi-kai-qi-ssh-fu-wu" id="一、开启ssh服务">一、开启ssh服务</h2><h3 id="1-xian-geng-xin-xia-zai-yuan" id="1、先更新下载源">1、先更新下载源</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt <span class="keyword">update</span></span><br></pre></td></tr></table></figure><blockquote><p>注：<code>apt upgrade</code>这个命令，会把本地已安装的软件，与刚下载的软件列表里对应软件地址的软件进行对比，如果发现已安装的软件版本太低，就会提示你更新。</p></blockquote><h3 id="2-an-zhuang-ssh-fu-wu-qi" id="2-安装ssh服务器">2.安装ssh服务器</h3><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install openssh-<span class="built_in">server</span></span><br></pre></td></tr></table></figure><h3 id="3-qi-dong-ssh-fu-wu" id="3-启动ssh服务">3.启动ssh服务</h3><h4 id="1-shu-ru-xia-mian-de-ming-ling-qi-dong-ssh-fu-wu" id="（1-输入下面的命令启动ssh服务">（1)输入下面的命令启动ssh服务</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service ssh <span class="keyword">start</span></span><br></pre></td></tr></table></figure><h4 id="2-cha-kan-ssh-fu-wu-shi-fou-kai-qi" id="2-查看ssh服务是否开启">(2)查看ssh服务是否开启</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -e |<span class="keyword">grep</span> ssh</span><br></pre></td></tr></table></figure><p><strong>还可以通过下面这个命令查看ssh状态</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service ssh <span class="built_in">status</span></span><br></pre></td></tr></table></figure><p><strong>running即已启动</strong>，至此SSH服务已开启。</p><h2 id="er-xiu-gai-root-yong-hu-deng-lu-zhuo-mian-quan-xian" id="二、修改root用户登录桌面权限">二、修改root用户登录桌面权限</h2><blockquote><p>在Ubuntu 24.04桌面版中，开启root用户登录并启用远程SSH连接可以按照以下步骤进行操作：</p></blockquote><h3 id="1-she-zhi-root-yong-hu-mi-ma" id="1-设置root用户密码">1. 设置root用户密码</h3><p>使用如下命令设置root用户密码，执行命令后，依次输入当前登录用户密码，要设置的root密码，确认root密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> passwd root</span><br></pre></td></tr></table></figure><h3 id="2-zhu-shi-ru-xia-liang-ge-wen-jian-de-dui-ying-xing" id="2-注释如下两个文件的对应行">2. 注释如下两个文件的对应行</h3><p>文件为<code>/etc/pam.d/gdm-password和/etc/pam.d/gdm-autologin</code>，找到如下代码后在文件前面加入#注释，代码为<code>auth required pam_succeed_if.so user != root quiet_success</code>。编辑文件代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/pam.d/gdm-autologin</span><br><span class="line"><span class="built_in">sudo</span> nano /etc/pam.d/gdm-password</span><br></pre></td></tr></table></figure><h3 id="3-xiu-gai-profile-wen-jian" id="3-修改profile文件">3. 修改profile文件</h3><p>修改<code>/root/.profile</code>文件，编辑代码如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /root/.profile</span><br><span class="line"><span class="comment"># 注释掉或者删除行</span></span><br><span class="line">mesg n 2＞ /dev/null || <span class="literal">true</span></span><br><span class="line"><span class="comment"># 插入新行</span></span><br><span class="line"><span class="built_in">tty</span> -s &amp;&amp; mesg n || <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>注意：当没有执行第一步“设置root用户密码”时，<code>/root/.profile</code>文件是不存在的所以对于新安装的系统来说，第一步是非常重要的。</p><h3 id="4-xiu-gai-pei-zhi-wen-jian-an-zhuang-wan-cheng-hou-xiu-gai-pei-zhi-wen-jian-etc-ssh-sshd-config-ming-ling-ru-xia" id="4-修改配置文件安装完成后修改配置文件-etc-ssh-sshd-config，命令如下">4. 修改配置文件安装完成后修改配置文件/etc/ssh/sshd_config，命令如下</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/ssh/sshd_config</span><br><span class="line">将\#PermitRootLogin prohibit-password改成</span><br><span class="line">PermitRootLogin <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><h3 id="5-zhong-qi-fu-wu" id="5-重启服务">5. 重启服务</h3><p>使用如下命令程序ssh服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart ssh</span><br></pre></td></tr></table></figure><blockquote><p>现在，你已经成功开启了root用户登录并启用了远程SSH连接。你可以使用root用户登录桌面版，或者通过SSH客户端使用root用户进行远程连接。请确保在远程连接时保持安全性，并仅授权受信任的用户使用root权限。</p></blockquote><h1 id="san-tian-jia-xi-tong-zi-ti">三、添加系统字体</h1><blockquote><p>系统字体保存路径在<code>/usr/share/fonts</code>下，如果此目录下缺少字体，则使用其他可视化api（如Python的pygame库）的默认配置时可能会出现乱码问题。</p></blockquote><h2 id="fang-fa-yi-shou-dong-tian-jia-zi-ti-wen-jian" id="方法一：手动添加字体文件">方法一：手动添加字体文件</h2><ul class="lvl-0"><li class="lvl-2"><p>下载字体文件：从互联网下载你需要的字体文件（例如，.ttf 或 .otf 文件）。</p></li><li class="lvl-2"><p>复制字体文件到 /usr/local/share/fonts：将下载的字体文件复制到 /usr/local/share/fonts 目录。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /path/to/downloaded/font.ttf /usr/local/share/fonts/</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>更新字体缓存：添加字体后，运行 fc-cache 命令来更新字体缓存。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo fc-cache -fv</span><br></pre></td></tr></table></figure><h2 id="fang-fa-er-tong-guo-xi-tong-bao-guan-li-qi-an-zhuang-zi-ti" id="方法二：通过系统包管理器安装字体">方法二：通过系统包管理器安装字体</h2><p>Ubuntu 提供了多种字体包，可以通过 apt 包管理器安装。以下是一些常见的字体包：</p><ul class="lvl-0"><li class="lvl-2"><p>安装 Microsoft 字体：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install ttf-mscorefonts-installer</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>安装 Google 字体：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install fonts-noto</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>安装其他常用字体：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install fonts-dejavu</span><br><span class="line">sudo apt install fonts-liberation</span><br><span class="line">sudo apt install fonts-ubuntu</span><br></pre></td></tr></table></figure><p>安装这些字体包后，系统会自动将字体文件添加到合适的目录（通常是 <code>/usr/share/fonts </code>或<code> /usr/local/share/fonts</code>），并更新字体缓存。</p><h2 id="fang-fa-san-shi-yong-fontconfig-lai-cha-zhao-xian-you-xi-tong-zi-ti" id="方法三：使用-fontconfig-来查找现有系统字体">方法三：使用 fontconfig 来查找现有系统字体</h2><p>即使 <code>/usr/local/share/fonts</code> 目录中没有字体文件，系统其他位置仍然可能有字体文件。你可以使用 fontconfig 来查找这些字体。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fc-list</span><br></pre></td></tr></table></figure><p>此命令会列出系统中所有可用的字体及其路径。你可以使用 grep 来查找特定的字体。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fc-list | grep -i &quot;arial&quot;</span><br></pre></td></tr></table></figure><h1 id="si-qie-huan-mo-ren-sh-wei-bash-huo-zhe-dash">四、切换默认sh为bash或者dash</h1><h2 id="1-bash-yu-dash" id="1-bash与dash">1.bash与dash</h2><hr><p>从Ubuntu 6.10开始，默认使用dash(theDebian Almquist Shell)而不是bash(the GNUBourne-Again Shell).</p><p>但Login Shell还是bash. 原因是dash更快、更高效，而且它符合POSIX规范。Ubuntu在启动的时候会运行很多shell脚本，使用dash可以加快启动速度。</p><h2 id="2-qie-huan-bash-he-dash" id="2-切换bash和dash">2.切换bash和dash</h2><hr><h3 id="2-1-cha-kan-yu-shi-yong" id="2-1-查看与使用">2.1 查看与使用</h3><hr><p>先用命令<code>ls -l /bin/sh</code>看看</p><blockquote><p>/bin/sh -&gt; dash</p></blockquote><p>我们会发现Ubuntu默认采用的是 dash</p><h3 id="2-2-qie-huan-sh-wei-bash" id="2-2-切换sh为bash">2.2 切换sh为bash</h3><hr><p>查看shell是否为bash，在终端运行如下命令</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l /bin/sh</span><br></pre></td></tr></table></figure><p>如果显示为“/bin/sh -&gt; bash”则为正常，否则请按以下方式修改：</p><p><strong>方法一</strong>：在终端运行如下命令，然后选择 no。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg-reconfigure dash</span><br></pre></td></tr></table></figure><p><strong>方法二</strong>：先删除sh，再创建软链接。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /bin/sh</span><br><span class="line">sudo ln -s /bin/bash /bin/sh</span><br></pre></td></tr></table></figure><h3 id="2-3-qie-huan-sh-wei-dash" id="2-3-切换sh为dash">2.3 切换sh为dash</h3><hr><p>当然我们也可以使用</p><blockquote><p>sudo dpkg-reconfigure dash</p></blockquote><p>把sh修改回去</p><h2 id="3-mei-hua-bash" id="3-美化bash">3.美化bash</h2><blockquote><p>默认用户和root用户分别进行如下操作</p></blockquote><h3 id="3-1-da-kai-pei-zhi-wen-jian" id="3-1-打开配置文件">3.1 打开配置文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="3-2-bian-ji-pei-zhi-wen-jian" id="3-2-编辑配置文件">3.2 编辑配置文件</h3><p>打开后按i键，在文件最后添加如下美化代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PS1=&#x27;\[\e[37;1m\][\[\e[31;1m\]\u\[\e[34;1m\]@\[\e[32;1m\]\h \[\e[31;1m\]\w \[\e[33;1m\]\t\[\e[37;1m\]]\[\e[32;1m\]\$\[\e[m\]&#x27;</span><br></pre></td></tr></table></figure><p>PS1具体对应的美化教程参考：<a href="https://blog.csdn.net/kim5659/article/details/104514814">https://blog.csdn.net/kim5659/article/details/104514814</a></p><h3 id="3-3-bao-cun-bing-ying-yong-pei-zhi-wen-jian" id="3-3-保存并应用配置文件">3.3 保存并应用配置文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="3-4-ls-color-mei-hua-lie-ju-wen-jian" id="3-4-LS-COLOR美化列举文件">3.4 LS_COLOR美化列举文件</h3><p><a href="https://github.com/trapd00r/LS_COLORS">LS_COLOR</a> 是通过配置GNU环境的 DIRCOLOR ，让你的 Terminal 加上颜色，将 <code>LS_COLOR</code> 配置为全局适用，包括 <code>root</code> 用户在内，可以按照以下步骤操作：</p><ol><li class="lvl-3"><p><strong>下载 <code>LS_COLORS</code> 配置文件</strong>： 首先，我们需要将 <code>LS_COLORS</code> 配置文件下载到一个适合全局使用的位置。例如，您可以将其下载到 <code>/etc</code> 目录下，这样所有用户都可以访问到它。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> wget https://raw.githubusercontent.com/trapd00r/LS_COLORS/master/LS_COLORS -O /etc/dircolors</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p><strong>修改全局配置文件</strong>： 接下来，您需要在系统的全局 bash 配置文件中（通常是 <code>/etc/bash.bashrc</code> 或 <code>/etc/profile</code>）添加配置，以便所有用户（包括 <code>root</code>）都能加载此颜色设置。</p><p>打开 <code>/etc/bash.bashrc</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/bash.bashrc</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p><strong>添加 <code>dircolors</code> 配置</strong>： 在文件末尾添加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -f /etc/dircolors ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(dircolors -b /etc/dircolors)</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>这段代码会检查 <code>/etc/dircolors</code> 文件是否存在，如果存在就加载颜色配置。</p></li><li class="lvl-3"><p><strong>重新加载配置</strong>： 编辑完毕后，保存并退出编辑器，然后执行以下命令使配置立即生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/bash.bashrc</span><br></pre></td></tr></table></figure><p>或者，您也可以让所有用户在下次登录时自动加载新的配置。</p></li><li class="lvl-3"><p><strong>测试颜色配置</strong>： 可以通过使用 <code>ls</code> 命令测试颜色是否已经生效。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> --color=auto</span><br></pre></td></tr></table></figure><p>如果一切顺利，您应该能看到带有不同颜色的文件列表。</p></li></ol><h1 id="wu-kai-qi-guan-bi-fang-huo-qiang">五、开启/关闭防火墙</h1><ol><li class="lvl-3"><p>Ctrl+Alt+T打开终端或者ssh登录，输入<code>sudo ufw status</code>回车，<a href="https://so.csdn.net/so/search?q=%E6%9F%A5%E7%9C%8B%E9%98%B2%E7%81%AB%E5%A2%99%E7%8A%B6%E6%80%81&amp;spm=1001.2101.3001.7020">查看防火墙状态</a>：inactive是关闭，active是开启。</p></li><li class="lvl-3"><p>使用<code>sudo ufw enable</code>开启防火墙。</p></li><li class="lvl-3"><p>使用<code>sudo ufw disable</code><a href="https://so.csdn.net/so/search?q=%E5%85%B3%E9%97%AD%E9%98%B2%E7%81%AB%E5%A2%99&amp;spm=1001.2101.3001.7020">关闭防火墙</a>。</p></li></ol><h1 id="liu-an-zhuang-1-panel">六、安装1Panel</h1><blockquote><p>官方文档：<a href="https://1panel.cn/docs/installation/online_installation/">https://1panel.cn/docs/installation/online_installation/</a></p></blockquote><p>使用一键安装命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh &amp;&amp; sudo bash quick_start.sh</span><br></pre></td></tr></table></figure><p>安装成功后，控制台会打印面板访问信息，可通过浏览器访问 1Panel：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://目标服务器 IP 地址:目标端口/安全入口</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><strong>如果使用的是云服务器，请至安全组开放目标端口。</strong></p></li><li class="lvl-2"><p><strong>ssh 登录 1Panel 服务器后，执行 1pctl user-info 命令可获取安全入口（entrance）</strong></p></li></ul><h1 id="qi-qie-huan-shell">七、切换shell</h1><blockquote><p>切换终端只需要两句命令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /usr/bin/fish  //切换到fish-shell</span><br><span class="line">fish  //启用fish-shell</span><br></pre></td></tr></table></figure><h1 id="ba-ubuntu-xiu-gai-utc-cst-shi-jian">八、Ubuntu修改UTC/CST时间</h1><h2 id="yi-xiu-gai-shi-qu-wei-utc" id="（一）修改时区为UTC">（一）修改时区为UTC</h2><p>先查看<code>/etc</code>下面有没有<code>localtime</code>的软链接，如果有，先备份文件（备份文件使用<code>mv</code>命令）</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cd /etc</span><br><span class="line"></span><br><span class="line"><span class="comment">#备份源文件</span></span><br><span class="line">mv <span class="keyword">localtime</span> localtime.bak</span><br><span class="line"></span><br><span class="line"><span class="comment">#复制UTC时间到 /etc/localtime</span></span><br><span class="line">sudo cp /usr/share/zoneinfo/UTC /etc/<span class="keyword">localtime</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#创建软连接 /etc/localtime</span></span><br><span class="line">sudo ln -sf /usr/share/zoneinfo/UTC /etc/<span class="keyword">localtime</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#显示时间和时区</span></span><br><span class="line">date</span><br></pre></td></tr></table></figure><h2 id="er-xiu-gai-shi-qu-wei-cst" id="（二）修改时区为CST">（二）修改时区为CST</h2><p>同样的操作，备份源文件，并修改为<code>CST</code>时区</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cd /etc</span><br><span class="line"> </span><br><span class="line"><span class="comment">#备份源文件</span></span><br><span class="line">mv <span class="keyword">localtime</span> localtime.bak</span><br><span class="line"> </span><br><span class="line"><span class="comment">#把CST时区覆盖掉 /etc/localtime 对时区进行修改</span></span><br><span class="line">sudo cp /usr/share/zoneinfo/Asia/Shanghai  /etc/<span class="keyword">localtime</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#创建软连接</span></span><br><span class="line">sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai  /etc/<span class="keyword">localtime</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#显示时间和时区</span></span><br><span class="line">date</span><br></pre></td></tr></table></figure><h2 id="san-linux-huan-jing-xia-shi-qu-wu-fa-she-zhi-asia-shanghai-utc-0000-de-wen-ti-jie-jue" id="（三）linux环境下时区无法设置-Asia-Shanghai-UTC-0000-的问题解决">（三）linux环境下时区无法设置(Asia/Shanghai (UTC, 0000))的问题解决</h2><p>在进行linux下修改时区的时候,总是修改不了,修改成 Asia/Shanghai 但是时区总是 +0000 却不是想要的+0800<br>按照网上的方法</p><p>A : tzselect：执行tzselect命令–&gt;选择Asia–&gt;选择China–&gt;选择east China - Beijing, Guangdong, Shanghai, etc–&gt;然后输入1。</p><p>B : 修改配置文件来修改时区</p><p>1.修改/etc/sysconfig/clock     ZONE=Asia/Shanghai</p><p>2.rm /etc/localtime</p><p>3.链接到上海时区文件    ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</p><p>执行完上述过程后，重启机器，即可看到时区已经更改。</p><p>这些都需要重启才能生效，其实只需要在<code>/etc/profile</code>中简单设置一下，加入<code>export TZ='CST-8'</code>，即时生效一下就全部搞定。</p><h1 id="jiu-ru-he-zai-ubuntu-zhong-pei-zhi-eza">九、如何在ubuntu中配置eza</h1><blockquote><p><code>eza</code> 是 <code>exa</code> 的一个现代化分支，提供了类似的功能，包括更美观的文件和目录列表，并支持图标。以下是如何在 Ubuntu 中配置 <code>eza</code> 的步骤：</p></blockquote><h2 id="1-an-zhuang-code-eza-code" id="1-安装-eza">1. 安装 <code>eza</code></h2><h3 id="fang-fa-1-cong-bao-guan-li-qi-an-zhuang" id="方法-1：从包管理器安装">方法 1：从包管理器安装</h3><p>对于支持的系统，可以直接使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install eza</span><br></pre></td></tr></table></figure><h3 id="fang-fa-2-cong-yuan-ma-huo-git-hub-fa-bu-ye-mian-an-zhuang" id="方法-2：从源码或-GitHub-发布页面安装">方法 2：从源码或 GitHub 发布页面安装</h3><p>如果在软件源中找不到，可以从 <a href="https://github.com/eza-community/eza/releases">eza 的 GitHub Releases 页面</a> 下载最新版本。</p><h4 id="bu-zou" id="步骤：">步骤：</h4><ol><li class="lvl-3"><p>下载最新版本的 <code>.deb</code> 包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/eza-community/eza/releases/download/vVERSION/eza_VERSION_amd64.deb</span><br></pre></td></tr></table></figure><p>将 <code>VERSION</code> 替换为最新版本号（例如 <code>v0.14.0</code>）。</p></li><li class="lvl-3"><p>安装下载的 <code>.deb</code> 包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> dpkg -i eza_VERSION_amd64.deb</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p>如果有依赖问题，运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt --fix-broken install</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-she-zhi-bie-ming" id="2-设置别名">2. 设置别名</h2><p>为了方便使用 <code>eza</code>，可以将 <code>ls</code> 替换为 <code>eza</code>，并开启图标显示。</p><ol><li class="lvl-3"><p>编辑 <code>~/.bashrc</code> 或 <code>~/.zshrc</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano ~/.bashrc</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p>添加以下行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> <span class="built_in">ls</span>=<span class="string">&#x27;eza --icons&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">&#x27;eza -al --icons&#x27;</span></span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p>保存文件并重新加载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-que-bao-tu-biao-zi-ti-zhi-chi" id="3-确保图标字体支持">3. 确保图标字体支持</h2><p>为了正确显示文件和目录的图标，您需要安装支持 Nerd Fonts 的字体。</p><h3 id="an-zhuang-nerd-fonts" id="安装-Nerd-Fonts">安装 Nerd Fonts</h3><ol><li class="lvl-3"><p>从 <a href="https://www.nerdfonts.com/">Nerd Fonts 官网</a> 下载一个字体（如 Fira Code、JetBrains Mono）。</p></li><li class="lvl-3"><p>解压下载的字体并安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/.fonts</span><br><span class="line"><span class="built_in">cp</span> path-to-downloaded-font/*.ttf ~/.fonts/</span><br><span class="line">fc-cache -fv</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p>打开终端设置，选择已安装的 Nerd Font 作为终端的字体。</p></li></ol><h2 id="4-shi-yong-shi-li" id="4-使用示例">4. 使用示例</h2><p>使用以下命令测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eza --icons</span><br><span class="line">eza -al --icons</span><br></pre></td></tr></table></figure><p><strong>常用选项：</strong></p><ul class="lvl-0"><li class="lvl-2"><p><code>--icons</code>：启用图标。</p></li><li class="lvl-2"><p><code>-a</code>：显示隐藏文件。</p></li><li class="lvl-2"><p><code>-l</code>：以长格式显示文件信息。</p></li><li class="lvl-2"><p><code>-g</code>：按组显示文件归属。</p></li><li class="lvl-2"><p><code>--tree</code>：以树形结构显示目录。</p></li></ul><p>完成以上步骤后，<code>eza</code> 应该可以正常工作，并在终端中显示文件图标和详细信息。</p><h1 id="shi-v-mware-tools-an-zhuang">十、 VMware Tools安装</h1><p>进入终端，只需要输入三行命令：（输入之后耐心等待命令执行）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt upgrade</span><br><span class="line">sudo apt install open-vm-tools-desktop -y</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记🐦</title>
      <link href="/2023/02/12/LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/02/12/LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><img alt="Static Badge" src="https://img.shields.io/badge/题目来源-LeetCode-red?style=flat-square&logo=leetcode&logoColor="><p>题目选自<a href="https://leetcode.cn/">力扣（LeetCode）</a>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><p>![Static Badge](<a href="https://img.shields.io/badge/%E8%A7%A3%E9%A2%98%E6%96%B9%E6%B3%95-Feis">https://img.shields.io/badge/解题方法-Feis</a> Studio-green?logo=YouTube&amp;logoColor=red)</p><p>解题方案参考YouTube 频道🎬<a href="https://www.youtube.com/@KenYiLee">Feis Studio</a>，欢迎订阅老师的频道进行学习。</p></blockquote><p><code>Tips:徽章HTML和Markdown语法</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Static Badge&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://img.shields.io/badge/题目来源-LeetCode-red?style=flat-square&amp;logo=leetcode&amp;logoColor=&quot;</span>&gt;</span></span><br><span class="line">![Static Badge](https://img.shields.io/badge/解题方法-Feis Studio-green?logo=YouTube&amp;logoColor=red)</span><br></pre></td></tr></table></figure><p>在线制作网站：<a href="https://shields.io/badges/static-badge">https://shields.io/badges/static-badge</a></p><h1 id="li-ti-1-a-href-https-leetcode-cn-problems-single-number-zhi-chu-xian-yi-ci-de-shu-zi-a-leet-code-di-136-ti-single-number">例题 1. <a href="https://leetcode.cn/problems/single-number/">只出现一次的数字</a>（LeetCode 第 136 题–singleNumber）</h1><p><code>题目内容：</code>给你一个非空整数数组 nums ，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。你必须设计并实现线性时间复杂度的算法来解决此问题，且该算法只使用常量额外空间。</p><p><code>解题示例：</code></p><blockquote><p>输入：nums = [4,1,2,1,2]<br>输出：4</p></blockquote><p><code>示例代码：</code></p><blockquote><ol><li class="lvl-3"><p>暴力解法：时间复杂度为 O (n2)</p></li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">singleNumber</span><span class="params">(<span class="type">int</span> *nums, <span class="type">int</span> numsSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; numsSize; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; numsSize; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == nums[j])</span><br><span class="line">            &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">singleNumber</span><span class="params">(<span class="type">int</span> *nums, <span class="type">int</span> numsSize)</span></span>;</span><br><span class="line">    <span class="type">int</span> nums[<span class="number">5</span>] = &#123;<span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;singleNumber is %d\n&quot;</span>, <span class="built_in">singleNumber</span>(nums, <span class="number">5</span>));</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li class="lvl-3"><p>巧妙解法：应用位运算符 “异或”–时间复杂度为 O (n)</p></li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">singleNumber</span><span class="params">(<span class="type">int</span> *nums, <span class="type">int</span> numsSize)</span> <span class="comment">// 将第一个数赋予n，应用位运算符&quot;^&quot;(异或),从第2个数开始与n进行异或运算，输出运算结果</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; numsSize; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        n = n ^ nums[i]; <span class="comment">// 计算过程类似于：n=4^1^2^1^2 =&gt; n=1^1^2^2^4=0^0^4=4</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="li-ti-2-a-href-https-leetcode-cn-problems-happy-number-kuai-le-shu-a-leet-code-di-202-ti-happy-number">例题 2. <a href="https://leetcode.cn/problems/happy-number/">快乐数</a>（LeetCode 第 202 题–happyNumber）</h1><p><code>题目内容：</code>对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。然后重复这个过程直到这个数变为 1，也可能是无限循环但始终变不到 1。如果这个过程结果为 1，那么这个数就是快乐数。如果 n 是快乐数就返回 <code>true</code>；不是，则返回 <code>false</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解题示例：</span><br></pre></td></tr></table></figure><blockquote><p>输入：n = 19<br>输出：true<br>解释：<br>12 + 92 = 82<br>82 + 22 = 68<br>62 + 82 = 100<br>12 + 02 + 02 = 1</p></blockquote><p><code>示例代码</code>：</p><blockquote><ol><li class="lvl-3"><p>暴力解法：存在溢出风险</p></li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算平方和</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">next_n</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> d = n % <span class="number">10</span>;</span><br><span class="line">        n /= <span class="number">10</span>;</span><br><span class="line">        sum += d * d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历存储在history中的数与n进行一一比较，判断是否相等，相等则返回true则停止循环，不相等则返回false继续循环求下一个n</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">contains</span><span class="params">(<span class="type">int</span> *history, <span class="type">int</span> size, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (history[i] == n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为快乐数（暴力法）</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isHappy</span><span class="params">(<span class="type">int</span> n)</span> <span class="comment">// 利用储存历史数方法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> history[<span class="number">10000</span>]; <span class="comment">// 数组长度的精度很难计算</span></span><br><span class="line">    <span class="type">int</span> size = <span class="number">0</span>;       <span class="comment">// 为数组索引</span></span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">contains</span>(history, size, n))</span><br><span class="line">    &#123;</span><br><span class="line">        history[size] = n; <span class="comment">// 将n和之后的next_n储存在history中</span></span><br><span class="line">        size++;</span><br><span class="line">        n = <span class="built_in">next_n</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">next_n</span><span class="params">(<span class="type">int</span> n)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isHappy</span><span class="params">(<span class="type">int</span> n)</span></span>;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isHappy</span>(n))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d是一个快乐数\n&quot;</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d不是一个快乐数\n&quot;</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li class="lvl-3"><p>巧妙解法：解题思路源自➡️<a href="https://visualgo.net/en/cyclefinding?slide=1">弗洛伊德的乌龟 - 兔子循环寻找</a></p></li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算平方和</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">next_n</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> d = n % <span class="number">10</span>;</span><br><span class="line">        n /= <span class="number">10</span>;</span><br><span class="line">        sum += d * d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为快乐数（巧妙法）</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isHappy</span><span class="params">(<span class="type">int</span> n)</span> <span class="comment">// 利用龟兔赛跑方法(双指针)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> slow = n; <span class="comment">// 代表乌龟</span></span><br><span class="line">    <span class="type">int</span> fast = n; <span class="comment">// 代表兔子</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        slow = <span class="built_in">next_n</span>(slow);         <span class="comment">// 乌龟一次走一步</span></span><br><span class="line">        fast = <span class="built_in">next_n</span>(<span class="built_in">next_n</span>(fast)); <span class="comment">// 兔子一次走两步</span></span><br><span class="line">    &#125; <span class="keyword">while</span> (slow != fast);          <span class="comment">// 乌龟和兔子一定会在某一圈相遇，届时循环停止</span></span><br><span class="line">    <span class="keyword">return</span> fast == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">next_n</span><span class="params">(<span class="type">int</span> n)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isHappy</span><span class="params">(<span class="type">int</span> n)</span></span>;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isHappy</span>(n))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d是一个快乐数\n&quot;</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d不是一个快乐数\n&quot;</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>弗洛伊德的乌龟 - 兔子循环寻找</strong>图例如下：其中，橙色代表兔子，绿色代表乌龟</p><p><img src="https://bu.dusays.com/2024/12/08/675581dba0292.gif" alt="弗洛伊德的乌龟-兔子循环寻找示例图"></p><h1 id="li-ti-3-a-href-https-leetcode-cn-problems-move-zeroes-yi-dong-ling-a-leet-code-di-283-ti-move-zeroes">例题 3. <a href="https://leetcode.cn/problems/move-zeroes/">移动零</a>（LeetCode 第 283 题–moveZeroes）</h1><p><code>题目内容：</code>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。<strong>请注意</strong> ，必须在不复制数组的情况下原地对数组进行操作。</p><p><code>解题示例：</code></p><blockquote><p>输入: nums = [0,1,0,3,12]<br>输出: [1,3,12,0,0]</p></blockquote><p><code>示例代码</code>：</p><blockquote><ol><li class="lvl-3"><p>暴力解法：存在超时风险</p></li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="type">int</span> *nums, <span class="type">int</span> numsSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i + <span class="number">1</span> &lt; numsSize; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == <span class="number">0</span> &amp;&amp; nums[i + <span class="number">1</span>] != <span class="number">0</span>) <span class="comment">// 遍历数组，如果相邻两个数前一个数为0且后一个数不为0，就仅进行位置交换，类似冒泡排序</span></span><br><span class="line">            &#123;</span><br><span class="line">                count++;</span><br><span class="line">                nums[i] = nums[i + <span class="number">1</span>];</span><br><span class="line">                nums[i + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) <span class="comment">// 当遍历完数组，没有发生1次交换代表排序完成，停止循环</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="type">int</span> *nums, <span class="type">int</span> numsSize)</span></span>;</span><br><span class="line">    <span class="type">int</span> nums[<span class="number">6</span>] = &#123;<span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    <span class="built_in">moveZeroes</span>(nums, <span class="number">6</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%-3d&quot;</span>, nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li class="lvl-3"><p>巧妙解法：时间复杂度为 O (n)</p></li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="type">int</span> *nums, <span class="type">int</span> numsSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] != <span class="number">0</span>) <span class="comment">// 遍历数组，如果nums[i]不为0，就依次将这些数从nums[0]、nums[1]....进行赋值</span></span><br><span class="line">        &#123;</span><br><span class="line">            nums[j] = nums[i];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j != numsSize) <span class="comment">// 对数组剩余的空位进行补0</span></span><br><span class="line">    &#123;</span><br><span class="line">        nums[j] = <span class="number">0</span>;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="type">int</span> *nums, <span class="type">int</span> numsSize)</span></span>;</span><br><span class="line">    <span class="type">int</span> nums[<span class="number">6</span>] = &#123;<span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    <span class="built_in">moveZeroes</span>(nums, <span class="number">6</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%-3d&quot;</span>, nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="li-ti-4-a-href-https-leetcode-cn-problems-maximum-subarray-zui-da-zi-shu-zu-he-a-leet-code-di-53-ti-maximum-subarray">例题 4. <a href="https://leetcode.cn/problems/maximum-subarray/">最大子数组和</a>（LeetCode 第 53 题–Maximum Subarray）</h1><p><code>题目内容：</code>给你一个整数数组 <code>nums</code> ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。<strong>子数组</strong> 是数组中的一个连续部分。</p><p><code>解题示例：</code></p><blockquote><p>输入：nums = [-2,1,-3,4,-1,2,1,-5,4]<br>输出：6<br>解释：连续子数组 [4,-1,2,1] 的和最大，为 6。</p></blockquote><p><code>示例代码</code>：</p><blockquote><ol><li class="lvl-3"><p>暴力解法：超时，时间复杂度为 O (n2)</p></li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="type">int</span> *nums, <span class="type">int</span> numsSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> max = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; numsSize; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += nums[j];</span><br><span class="line">            <span class="keyword">if</span> (sum &gt; max)</span><br><span class="line">            &#123;</span><br><span class="line">                max = sum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="type">int</span> *nums, <span class="type">int</span> numsSize)</span></span>;</span><br><span class="line">    <span class="type">int</span> nums[<span class="number">9</span>] = &#123;<span class="number">-2</span>, <span class="number">1</span>, <span class="number">-3</span>, <span class="number">4</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">-5</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">maxSubArray</span>(nums, <span class="number">9</span>));</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li class="lvl-3"><p>巧妙解法：时间复杂度为 O (n)，应用正数增益效应</p></li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="type">int</span> *nums, <span class="type">int</span> numsSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> num[numsSize];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num[i] = nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 利用正数增益效应：因为是连续子序列，所以只有相邻两数如相加结果为正将结果赋给后一个</span></span><br><span class="line"><span class="comment">        才有可能与下一个数相加实现累加增益，如结果为负则果断舍弃，重新寻找正数开始相加 */</span></span><br><span class="line">        <span class="keyword">if</span> (num[i] &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            num[i + <span class="number">1</span>] = num[i] + num[i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> max = num[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; numsSize; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (max &lt; num[i])</span><br><span class="line">        &#123;</span><br><span class="line">            max = num[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="type">int</span> *nums, <span class="type">int</span> numsSize)</span></span>;</span><br><span class="line">    <span class="type">int</span> nums[<span class="number">9</span>] = &#123;<span class="number">-2</span>, <span class="number">1</span>, <span class="number">-3</span>, <span class="number">4</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">-5</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">maxSubArray</span>(nums, <span class="number">9</span>));</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="li-ti-5-a-href-https-leetcode-cn-problems-counting-elements-shu-yuan-su-a-leet-code-di-1426-ti-counting-elements-strong-vip-ti-mu-strong">例题 5. <a href="https://leetcode.cn/problems/counting-elements/">数元素</a>（LeetCode 第 1426 题–Counting-Elements） <strong>VIP 题目</strong></h1><p><code>题目内容：</code>给你一个整数数组 <code>nums</code> ，请你找出数组内的元素加 1 后是否还出现在数组内，统计符合这个条件的元素个数。本题有个条件就是：<code>0&lt;=nums[i]&lt;=1000, 1&lt;=numsSize&lt;=1000</code>，此条件对优化算法有很大作用。</p><p><code>解题示例：</code></p><blockquote><p>输入：nums = [1,1,2,3]<br>输出：3<br>解释：比 1 大 1 的数为 2 依旧在数组内，1 有 2 个；比 2 大 1 的数为 3 依旧在数组内，2 有 1 个。总计结果为 3。</p></blockquote><p><code>示例代码</code>：</p><blockquote><ol><li class="lvl-3"><p>暴力解法：时间复杂度为 O (n2)</p></li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">countElements</span><span class="params">(<span class="type">int</span> *nums, <span class="type">int</span> numsSize)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; numsSize; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; numsSize; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] + <span class="number">1</span> == nums[j])</span><br><span class="line">            &#123;</span><br><span class="line">                count++; <span class="comment">// 只要比nums[i]大1的数出现在数组内，计数加1，停止循环</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> nums[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;符合条件的元素有%d个\n&quot;</span>, <span class="built_in">countElements</span>(nums, <span class="number">4</span>));</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li class="lvl-3"><p>巧妙解法：合理利用题目给定的条件，降低时间复杂度为 O (n)</p></li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">countElements</span><span class="params">(<span class="type">int</span> *nums, <span class="type">int</span> numsSize)</span> <span class="comment">// 合理利用题目给定的条件，即0&lt;=nums[i]&lt;=1000, 1&lt;=numsSize&lt;=1000</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ArrayX[<span class="number">1002</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ArrayX[nums[i]]++; <span class="comment">// 统计ArrayX[nums[i]]出现的次数,假如nums[i]==1，意味着ArrayX[1]就统计1次;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;x   : ArrayX[x]\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt;= <span class="number">1000</span>; x++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ArrayX[x + <span class="number">1</span>] &gt; <span class="number">0</span>) <span class="comment">// 遍历0~1000，比如x=1,且ArrayX[2]&gt;0时，意味着比1大的数也就是2存在数组内</span></span><br><span class="line">                               <span class="comment">// 经过上面步骤可以统计出ArrayX[1]出现的次数，那么1出现的次数就是元素的个数</span></span><br><span class="line">        &#123;</span><br><span class="line">            count += ArrayX[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%-4d: %-5d\n&quot;</span>, x, ArrayX[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> nums[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;符合条件的元素有%d个\n&quot;</span>, <span class="built_in">countElements</span>(nums, <span class="number">4</span>));</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Tips:</code> 巧妙解法根据如下输出结果理解会更直观：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">x</span> : ArrayX[x]</span><br><span class="line"><span class="number">0</span> : <span class="number">0</span></span><br><span class="line"><span class="number">1</span> : <span class="number">2</span></span><br><span class="line"><span class="number">2</span> : <span class="number">1</span></span><br><span class="line"><span class="number">3</span> : <span class="number">1</span></span><br><span class="line"><span class="number">4</span> : <span class="number">0</span></span><br><span class="line">......后面输出的ArrayX[x]全为<span class="number">0</span>，此处省略</span><br><span class="line">符合条件的元素有<span class="number">3</span>个</span><br></pre></td></tr></table></figure><h1 id="li-ti-6-a-href-https-leetcode-cn-problems-backspace-string-compare-bi-jiao-han-tui-ge-de-zi-fu-chuan-a-leet-code-di-844-ti-backspace-string-compare">例题 6. <a href="https://leetcode.cn/problems/backspace-string-compare/">比较含退格的字符串</a>（LeetCode 第 844 题–Backspace String Compare）</h1><p><code>题目内容：</code>给定 <code>s</code> 和 <code>t </code>两个字符串，当它们分别被输入到空白的文本编辑器后，如果两者相等，返回 <code>true</code>。<code># </code>代表退格字符。注意：如果对空文本输入退格字符，文本继续为空。</p><blockquote><p>输入：s = “ab#c”, t = “ad#c”<br>输出：true<br>解释：s 和 t 都会变成 “ac”。</p></blockquote><p><code>提示：</code></p><blockquote><ul class="lvl-1"><li class="lvl-2"><p><code>1 &lt;= s.length, t.length &lt;= 200</code></p></li><li class="lvl-2"><p><code>s</code> 和 <code>t</code> 只含有小写字母以及字符<code>#</code></p></li></ul></blockquote><p><code>示例代码</code>：</p><blockquote><ol><li class="lvl-3"><p>暴力解法：时间复杂度为 O (n)</p></li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">backspaceCompare</span><span class="params">(<span class="type">char</span> *s, <span class="type">char</span> *t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> len_s = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="type">char</span> result_s[len_s + <span class="number">1</span>];</span><br><span class="line">    &#123; <span class="comment">// 加这个大括号是防止下面提示j重复声明</span></span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len_s; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] != <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                result_s[j] = s[i]; <span class="comment">// 遍历字符串，如果遇到的不是&#x27;#&#x27;，则将s[i]依次保存在新建的result_s字符串中，同时索引j向后挪一位</span></span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    j--; <span class="comment">// 如果遇到&#x27;#&#x27;，索引j向前挪一位，但必须在j&gt;0的前提下，因为当j=0时,如果向前挪一位会造成超出原字符串范围</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        result_s[j] = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">// result_s的长度小于等于s的长度，当小于s时，须在result_s末位补&#x27;\0&#x27;，表示字符串结束</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="type">len_t</span> = <span class="built_in">strlen</span>(t);</span><br><span class="line">    <span class="type">char</span> <span class="type">result_t</span>[<span class="type">len_t</span> + <span class="number">1</span>];</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="type">len_t</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (t[i] != <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">result_t</span>[j] = t[i];</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    j--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">result_t</span>[j] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(result_s, <span class="type">result_t</span>) == <span class="number">0</span>) <span class="comment">// 应用strcmp函数比较处理后的两个字符串，如果比较结果为0表示两字符串完全相同，则输出为true</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;true\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;false\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backspaceCompare</span><span class="params">(<span class="type">char</span> *s, <span class="type">char</span> *t)</span></span>;</span><br><span class="line">    <span class="type">char</span> s[<span class="number">5</span>] = <span class="string">&quot;ab#c&quot;</span>, t[<span class="number">5</span>] = <span class="string">&quot;ad#c&quot;</span>;</span><br><span class="line">    <span class="built_in">backspaceCompare</span>(s, t);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li class="lvl-3"><p>自建函数法（无返回值）：时间复杂度为 O (n)</p></li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">process</span><span class="params">(<span class="type">char</span> *result, <span class="type">const</span> <span class="type">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] != <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            result[j] = str[i];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    result[j] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">process</span><span class="params">(<span class="type">char</span> *result, <span class="type">const</span> <span class="type">char</span> *str)</span></span>;</span><br><span class="line">    <span class="type">char</span> s[<span class="number">5</span>] = <span class="string">&quot;ab#c&quot;</span>, t[<span class="number">5</span>] = <span class="string">&quot;ad#c&quot;</span>;</span><br><span class="line">    <span class="type">int</span> len_s = <span class="built_in">strlen</span>(s), <span class="type">len_t</span> = <span class="built_in">strlen</span>(t);</span><br><span class="line">    <span class="type">char</span> result_s[len_s + <span class="number">1</span>], <span class="type">result_t</span>[<span class="type">len_t</span> + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">process</span>(result_s, s);</span><br><span class="line">    <span class="built_in">process</span>(<span class="type">result_t</span>, t);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(result_s, <span class="type">result_t</span>) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;true\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;false\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol start="3"><li class="lvl-3"><p>自建函数法（有返回值）：时间复杂度为 O (n)</p></li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span> *<span class="title">process</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="type">char</span> *result = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">char</span>) * (len + <span class="number">1</span>));</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] != <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            result[j] = str[i];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    result[j] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">char</span> *<span class="title">process</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str)</span></span>;</span><br><span class="line">    <span class="type">char</span> s[<span class="number">5</span>] = <span class="string">&quot;ab#c&quot;</span>, t[<span class="number">5</span>] = <span class="string">&quot;ad#c&quot;</span>;</span><br><span class="line">    <span class="type">char</span> *result_s = <span class="built_in">process</span>(s);</span><br><span class="line">    <span class="type">char</span> *<span class="type">result_t</span> = <span class="built_in">process</span>(t);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(result_s, <span class="type">result_t</span>) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;true\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;false\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(result_s);</span><br><span class="line">    <span class="built_in">free</span>(<span class="type">result_t</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol start="4"><li class="lvl-3"><p>自建函数法（无返回值）：时间复杂度为 O (n)，空间复杂度为 O (1)</p></li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">process</span><span class="params">(<span class="type">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] != <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            str[j] = str[i];  <span class="comment">// 读取字符串永远先于写入字符串</span></span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    str[j] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">process</span><span class="params">(<span class="type">char</span> *str)</span></span>;</span><br><span class="line">    <span class="type">char</span> s[<span class="number">5</span>] = <span class="string">&quot;ab#c&quot;</span>, t[<span class="number">5</span>] = <span class="string">&quot;ad#&quot;</span>;</span><br><span class="line">    <span class="built_in">process</span>(s);</span><br><span class="line">    <span class="built_in">process</span>(t);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(s, t) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;true\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;false\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言刷题笔记🦆</title>
      <link href="/2023/02/11/C%E8%AF%AD%E8%A8%80%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/02/11/C%E8%AF%AD%E8%A8%80%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p><a href="https://www.runoob.com/"><br><img src="https://img.shields.io/badge/%E9%A2%98%E7%9B%AE%E6%9D%A5%E6%BA%90-RUNOOB-greenyellow.svg?logo=Notist&amp;label=%E9%A2%98%E7%9B%AE%E6%9D%A5%E6%BA%90&amp;logoColor=greenyellow&amp;" alt="img"></a><a href="https://www.dotcpp.com/"><img src="https://img.shields.io/badge/%E9%A2%98%E7%9B%AE%E6%9D%A5%E6%BA%90-%20C%20%E8%AF%AD%E8%A8%80%E7%BD%91-purple.svg?logo=Notist&amp;label=%E9%A2%98%E7%9B%AE%E6%9D%A5%E6%BA%90&amp;logoColor=purple&amp;" alt="img"></a></p><p>本文题目转载自<a href="https://www.runoob.com/">菜鸟教程网</a>和 <a href="https://www.dotcpp.com/">C 语言网</a>，欢迎编程初学者访问学习！🌼</p></blockquote><h1 id="li-ti-1-a-href-https-www-runoob-com-cprogramming-c-examples-joseph-life-dead-game-html-yue-se-fu-sheng-zhe-si-zhe-xiao-you-xi-a">例题 1. <a href="https://www.runoob.com/cprogramming/c-examples-joseph-life-dead-game.html">约瑟夫生者死者小游戏</a></h1><p><code>题目描述：</code>30 个人在一条船上，超载，需要 15 人下船。于是人们排成一队，排队的位置即为他们的编号。报数，从 1 开始，数到 9 的人下船。如此循环，直到船上仅剩 15 人为止，问都有哪些编号的人下船了呢？</p><p><code>解题关键：</code></p><ul class="lvl-0"><li class="lvl-2"><p>转变思路，对在船上和下船的赋予状态，例如：在船上的人的状态为 0，下船的人的状态为 1；</p></li><li class="lvl-2"><p>报数到第 10 个人时，报数重新变为 1，这是循环初始化的一个过程；</p></li><li class="lvl-2"><p>每个人所在的位置（或编号）是固定不变的，即使某个人下船了，他所在的位置在计数时也要算上，这样计数到 31 时，重新初始化为 1，所有人的编号不会发生变化，实现船头和船尾的人连接。</p></li></ul><p><code>示例代码：</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> state[<span class="number">30</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 将每个人状态初始化为0，表示在船上</span></span><br><span class="line">    <span class="type">int</span> count = <span class="number">1</span>;       <span class="comment">// 报数</span></span><br><span class="line">    <span class="type">int</span> down = <span class="number">0</span>;        <span class="comment">// 计下船的人数</span></span><br><span class="line">    <span class="type">int</span> people = <span class="number">1</span>;      <span class="comment">// 人的编号</span></span><br><span class="line">    <span class="keyword">while</span> (down &lt; <span class="number">15</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (people == <span class="number">31</span>) <span class="comment">// 计数到31时,重新初始化为1，所有人的编号在进行到下一轮时将不会发生变化</span></span><br><span class="line">        &#123;</span><br><span class="line">            people = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (state[people - <span class="number">1</span>] == <span class="number">0</span>) <span class="comment">// 减1是因为索引值是从0开始，且这个人仍在船上时参与报数</span></span><br><span class="line">        &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">10</span>) <span class="comment">// 报数到第10个人时，重新初始化为1进行下一轮报数</span></span><br><span class="line">            &#123;</span><br><span class="line">                count = <span class="number">1</span>;</span><br><span class="line">                state[people - <span class="number">1</span>] = <span class="number">1</span>; <span class="comment">// 报9的倍数的那个人的状态变为1，不参与下次报数，下船人数+1</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;第%d号下船了\n&quot;</span>, people);</span><br><span class="line">                down++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        people++; <span class="comment">// 不管这个人是否还在船上，每个人的位置固定不变，编号是从1~30递增的</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;留在船上的人的编号为：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) <span class="comment">// 遍历30个人的状态，当为0的时候，表示还在船上，依次输出</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (state[i] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%-3d&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果：</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">第<span class="number">9</span>号下船了</span><br><span class="line">第<span class="number">18</span>号下船了</span><br><span class="line">第<span class="number">27</span>号下船了</span><br><span class="line">第<span class="number">6</span>号下船了</span><br><span class="line">第<span class="number">16</span>号下船了</span><br><span class="line">第<span class="number">26</span>号下船了</span><br><span class="line">第<span class="number">7</span>号下船了</span><br><span class="line">第<span class="number">19</span>号下船了</span><br><span class="line">第<span class="number">30</span>号下船了</span><br><span class="line">第<span class="number">12</span>号下船了</span><br><span class="line">第<span class="number">24</span>号下船了</span><br><span class="line">第<span class="number">8</span>号下船了</span><br><span class="line">第<span class="number">22</span>号下船了</span><br><span class="line">第<span class="number">5</span>号下船了</span><br><span class="line">第<span class="number">23</span>号下船了</span><br><span class="line">留在船上的人的编号为：<span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">10</span> <span class="number">11</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">17</span> <span class="number">20</span> <span class="number">21</span> <span class="number">25</span> <span class="number">28</span> <span class="number">29</span> </span><br></pre></td></tr></table></figure><h1 id="li-ti-2-a-href-https-www-runoob-com-cprogramming-c-exercise-example-96-html-ji-suan-zi-fu-chuan-zhong-zi-chuan-chu-xian-de-ci-shu-a">例题 2. <a href="https://www.runoob.com/cprogramming/c-exercise-example96.html">计算字符串中子串出现的次数</a></h1><p><code>题目描述：</code>输入一个长字符串（即<strong>父串</strong>）和一个短字符串（即<strong>子串</strong>，可与父串等长），计算子串在父串中出现的次数？</p><p><code>示例代码：</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">(<span class="type">char</span> *str1, <span class="type">int</span> len1, <span class="type">char</span> *str2, <span class="type">int</span> len2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (len1 &gt;= len2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;父串为%s\n子串为%s\n&quot;</span>, str1, str2);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= len1 - len2; i++) <span class="comment">// i最大取len1-len2是防止当i取到len1-1且j取到len2-1时，str[i+j]已经超出str1的范围</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len2; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (str1[i + j] != str2[j]) <span class="comment">// 遍历子串与父串一一比较，只要有不同就进入下一次循环</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == len2) <span class="comment">// 如果子串遍历的循环完整完成一轮，代表符合题目条件，则计数一次</span></span><br><span class="line">            &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;父串为%s\n子串为%s\n&quot;</span>, str2, str1);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= len2 - len1; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len1; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (str2[i + j] != str1[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == len1)</span><br><span class="line">            &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">(<span class="type">char</span> *str1, <span class="type">int</span> len1, <span class="type">char</span> *str2, <span class="type">int</span> len2)</span></span>;</span><br><span class="line">    <span class="type">char</span> str1[<span class="number">100</span>];</span><br><span class="line">    <span class="type">char</span> str2[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入两个字符串：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>, str1, str2);</span><br><span class="line">    <span class="type">int</span> len1 = <span class="built_in">strlen</span>(str1), len2 = <span class="built_in">strlen</span>(str2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;子串出现了%d次\n&quot;</span>, <span class="built_in">count</span>(str1, len1, str2, len2));</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果：</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">请输入两个字符串：</span><br><span class="line"><span class="number">12123112312231233</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line">父串为<span class="number">12123112312231233</span></span><br><span class="line">子串为<span class="number">123</span></span><br><span class="line">子串出现了<span class="number">3</span>次</span><br></pre></td></tr></table></figure><h1 id="li-ti-3-a-href-https-www-runoob-com-cprogramming-c-exercise-example-1-html-wu-zhong-fu-shu-zi-a">例题 3. <a href="https://www.runoob.com/cprogramming/c-exercise-example1.html">无重复数字</a></h1><p><code>题目描述：</code>有 <strong>1、2、3、4</strong> 四个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？</p><p><code>示例代码：</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i, j, k, num, count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= <span class="number">4</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (k = <span class="number">1</span>; k &lt;= <span class="number">4</span>; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i != j &amp;&amp; j != k &amp;&amp; k != i)</span><br><span class="line">                &#123;</span><br><span class="line">                    num = i * <span class="number">100</span> + j * <span class="number">10</span> + k;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%-5d&quot;</span>, num);</span><br><span class="line">                    count++;</span><br><span class="line">                    <span class="keyword">if</span> (count % <span class="number">10</span> == <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n共有%d个数\n&quot;</span>, count);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果：</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span>  <span class="number">124</span>  <span class="number">132</span>  <span class="number">134</span>  <span class="number">142</span>  <span class="number">143</span>  <span class="number">213</span>  <span class="number">214</span>  <span class="number">231</span>  <span class="number">234</span></span><br><span class="line"><span class="number">241</span>  <span class="number">243</span>  <span class="number">312</span>  <span class="number">314</span>  <span class="number">321</span>  <span class="number">324</span>  <span class="number">341</span>  <span class="number">342</span>  <span class="number">412</span>  <span class="number">413</span></span><br><span class="line"><span class="number">421</span>  <span class="number">423</span>  <span class="number">431</span>  <span class="number">432</span></span><br><span class="line">共有<span class="number">24</span>个数</span><br></pre></td></tr></table></figure><h1 id="li-ti-4-a-href-https-www-runoob-com-cprogramming-c-exercise-example-2-html-ji-suan-ti-cheng-a">例题 4. <a href="https://www.runoob.com/cprogramming/c-exercise-example2.html">计算提成</a></h1><p><code>题目描述：</code>企业发放的奖金根据利润提成。</p><ul class="lvl-0"><li class="lvl-2"><p>利润 (I) 低于或等于 10 万元时，奖金可提 10%；</p></li><li class="lvl-2"><p>利润高于 10 万元，低于 20 万元时，低于 10 万元的部分按 10% 提成，高于 10 万元的部分，可提成 7.5%；</p></li><li class="lvl-2"><p>20 万到 40 万之间时，高于 20 万元的部分，可提成 5%；</p></li><li class="lvl-2"><p>40 万到 60 万之间时高于 40 万元的部分，可提成 3%；</p></li><li class="lvl-2"><p>60 万到 100 万之间时，高于 60 万元的部分，可提成 1.5%；</p></li><li class="lvl-2"><p>高于 100 万元时，超过 100 万元的部分按 1% 提成。</p></li></ul><p>从键盘输入当月利润 I，求应发放奖金总数？</p><p><code>示例代码：</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">float</span> profit;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;input your profits:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;profit);</span><br><span class="line">    <span class="type">float</span> bonus, bonus1, bonus2, bonus3, bonus4, bonus5;</span><br><span class="line">    bonus1 = <span class="number">100000</span> * <span class="number">0.1</span>;</span><br><span class="line">    bonus2 = bonus1 + <span class="number">100000</span> * <span class="number">0.075</span>;</span><br><span class="line">    bonus3 = bonus2 + <span class="number">200000</span> * <span class="number">0.05</span>;</span><br><span class="line">    bonus4 = bonus3 + <span class="number">200000</span> * <span class="number">0.03</span>;</span><br><span class="line">    bonus5 = bonus4 + <span class="number">400000</span> * <span class="number">0.015</span>;</span><br><span class="line">    <span class="keyword">if</span> (profit &lt;= <span class="number">100000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        bonus = profit * <span class="number">0.1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (profit &lt;= <span class="number">200000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        bonus = bonus1 + (profit - <span class="number">100000</span>) * <span class="number">0.075</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (profit &lt;= <span class="number">400000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        bonus = bonus2 + (profit - <span class="number">200000</span>) * <span class="number">0.05</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (profit &lt;= <span class="number">600000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        bonus = bonus3 + (profit - <span class="number">400000</span>) * <span class="number">0.03</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (profit &lt;= <span class="number">1000000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        bonus = bonus4 + (profit - <span class="number">600000</span>) * <span class="number">0.015</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        bonus = bonus5 + (profit - <span class="number">1000000</span>) * <span class="number">0.01</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;bonus is %f\n&quot;</span>, bonus);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果：</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span> your profits:<span class="number">120000</span></span><br><span class="line">bonus is <span class="number">11500.000000</span></span><br></pre></td></tr></table></figure><h1 id="li-ti-5-bai-ji-bai-qian-wen-ti">例题 5. 百鸡百钱问题</h1><p><code>题目描述：</code>中国古代数学家张丘建在他的《算经》中提出了一个著名的 “百钱百鸡问题”：一只公鸡（cock）值五钱，一只母鸡（hen）值三钱，三只小鸡（chick）值一钱，现在要用百钱买百鸡，请问公鸡、母鸡、小鸡各多少只？</p><p><code>示例代码：</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> cock, hen, chick;</span><br><span class="line">    <span class="keyword">for</span> (cock = <span class="number">0</span>; cock &lt;= <span class="number">20</span>; cock++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (hen = <span class="number">0</span>; hen &lt;= <span class="number">33</span>; hen++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (chick = <span class="number">3</span>; chick &lt;= <span class="number">99</span>; chick++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (cock + hen + chick == <span class="number">100</span> &amp;&amp; <span class="number">5</span> * cock + <span class="number">3</span> * hen + chick / <span class="number">3</span> == <span class="number">100</span> &amp;&amp; chick % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;cock=%2d只, hen=%2d只, chick=%2d只\n&quot;</span>, cock, hen, chick);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果：</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cock= <span class="number">0</span>只, hen=<span class="number">25</span>只, chick=<span class="number">75</span>只</span><br><span class="line">cock= <span class="number">4</span>只, hen=<span class="number">18</span>只, chick=<span class="number">78</span>只</span><br><span class="line">cock= <span class="number">8</span>只, hen=<span class="number">11</span>只, chick=<span class="number">81</span>只</span><br><span class="line">cock=<span class="number">12</span>只, hen= <span class="number">4</span>只, chick=<span class="number">84</span>只</span><br></pre></td></tr></table></figure><h1 id="li-ti-6-shui-xian-hua-shu">例题 6. 水仙花数</h1><p><code>题目描述：</code>水仙花数（Narcissistic number）是指一个 n 位数 (n≥3)，它的每个位上的数字的 n 次幂之和等于它本身。例如 153 就是一个水仙花数，因为 153=13 + 53 + 33。求出 3 位数中的水仙花数是哪几个？</p><p><code>示例代码：</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="type">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">for</span> (num = <span class="number">100</span>; num &lt; <span class="number">1000</span>; num++)</span><br><span class="line">    &#123;</span><br><span class="line">        i = num / <span class="number">1</span> % <span class="number">10</span>;   <span class="comment">// 取个位</span></span><br><span class="line">        j = num / <span class="number">10</span> % <span class="number">10</span>;  <span class="comment">// 取十位</span></span><br><span class="line">        k = num / <span class="number">100</span> % <span class="number">10</span>; <span class="comment">// 取百位</span></span><br><span class="line">        <span class="keyword">if</span> (i * i * i + j * j * j + k * k * k == num)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;num=%d\n&quot;</span>, num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果：</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num=<span class="number">153</span></span><br><span class="line">num=<span class="number">370</span></span><br><span class="line">num=<span class="number">371</span></span><br><span class="line">num=<span class="number">407</span></span><br></pre></td></tr></table></figure><h1 id="li-ti-7-a-href-https-www-dotcpp-com-oj-problem-1032-html-zi-ding-yi-han-shu-zhi-zi-fu-chuan-lian-jie-a">例题 7. <a href="https://www.dotcpp.com/oj/problem1032.html">自定义函数之字符串连接</a></h1><p><code>题目描述：</code>写一函数，将两个字符串连接。</p><p><code>解题思路：</code></p><blockquote><p>首先，我想说既然题目中给出自己写一个函数将两个字符串连接，那么出题人的意图应该就是要考生自己编写一个函数实现与 <code>strcat</code> 函数同样的效果，而不是直接引用 <code>strcat</code> 函数，如果直接引用 <code>strcat</code> 函数，那么本题目将毫无测试价值。</p></blockquote><p><strong>我的思路大致如下：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>输入两个字符串 <code>str_1</code> 和 <code>str_2</code>，且要求声明字符数组长度时 <code>str_1</code> 的长度大于和等于输入字符串后的 <code>str_1+str_2</code> 的长度。</p></li><li class="lvl-2"><p>构建函数传入两个字符串 <code>void montage_string(char *string_1, char *string_2)</code>，在函数内部声明 i = strlen (string_1), k = 0, j = strlen (string_1) + strlen (string_2)，其中 i 等于字符串 1 的长度，j 等于字符串 1 和字符串 2 长度的和。</p></li><li class="lvl-2"><p>从字符串 1 的最后一个字符 string_1 [i]（即’\0’）开始，将字符串 2 的第一个字符 string_2 [k] 赋值给字符串 1 的最后一个字符 string_1 [i]（即’\0’），实现拼接效果，即 string_1 [i++] = string_2 [k++]。while (i &lt;= j) 时，在赋值运算结束以后，i 和 k 自增，当 i 增加到大于 j (即符串 1 和字符串 2 长度的和) 时，跳出循环。</p></li></ul><p><code>注意事项:</code></p><p>在输入字符串时，<code>str_1+str_2</code> 的长度必须小于声明的 <code>str_1</code> 的长度，例如：最开始声明了 <code>str_1[7]</code>，那么输入的两端字符串可以是 <code>abc</code> 和 <code>123</code>，但不能是 <code>abcd</code> 和 <code>123</code> 或者 <code>abc</code> 和 <code>1234</code>，不然字符数组会溢出出现错误。</p><p><code>示例代码:</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">montage_string</span><span class="params">(<span class="type">char</span> *string_1, <span class="type">char</span> *string_2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="built_in">strlen</span>(string_1), k = <span class="number">0</span>, j = <span class="built_in">strlen</span>(string_1) + <span class="built_in">strlen</span>(string_2);</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= j)</span><br><span class="line">    &#123;</span><br><span class="line">        string_1[i++] = string_2[k++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> str_1[<span class="number">1024</span>], str_2[<span class="number">512</span>];</span><br><span class="line">    <span class="built_in">gets</span>(str_1);</span><br><span class="line">    <span class="built_in">gets</span>(str_2);</span><br><span class="line">    <span class="built_in">montage_string</span>(str_1, str_2);</span><br><span class="line">    <span class="built_in">puts</span>(str_1);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果：</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">abcd</span><br><span class="line"><span class="number">1356</span>wd</span><br><span class="line">abcd1356wd</span><br></pre></td></tr></table></figure><h1 id="li-ti-8-a-href-https-www-dotcpp-com-oj-problem-1044-html-san-ge-zi-fu-chuan-de-pai-xu-a">例题 8. <a href="https://www.dotcpp.com/oj/problem1044.html">三个字符串的排序</a></h1><p><code>题目描述：</code>输入三个字符串，按由小到大的顺序输出</p><p><code>解题思路：</code></p><blockquote><p>重点知识点：<strong>二维数组</strong>、<strong>指针数组</strong>、<strong>二级指针</strong>、<strong>strcmp 函数</strong></p></blockquote><ol><li class="lvl-3"><p>声明一个二维字符数组 <code>char string[i][j]</code>；</p></li><li class="lvl-3"><p>声明一个字符型指针数组 <code>char *p_str[i]</code>，数组内的每个指针先后指向二维字符数组每行的首地址，即 <code>p_str[i]=string[i]</code>；</p></li><li class="lvl-3"><p>声明一个字符型二级指针 <code>**p</code>，指向指针数组的首地址，即 <code>p=p_str</code>；</p></li><li class="lvl-3"><p>声明一个排序函数 <code>void sort</code>，分别传入字符型二级指针变量 <code>char **p</code> 和整型变量 <code>int n</code>，利用 <code>strcmp(str1,str2)</code> 函数两两比较字符串的大小从而进行排序。这里顺带提一下 <code>strcmp</code> 函数的知识点，该函数主要是根据字符串中字符对应的 ASCII 码值对字符串进行判断，然后通过返回函数值体现字符串的大小，不同的函数值对应字符串大小如下：</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>如果返回值为<strong>正数</strong>，则 <strong>str1 &gt; str2</strong>；</p></li><li class="lvl-2"><p>如果返回值为 <strong>0</strong>，则 <strong>str1 = str2</strong>；</p></li><li class="lvl-2"><p>如果返回值为<strong>负数</strong>，则 <strong>str1 &lt; str2</strong>。</p></li></ul><ol><li class="lvl-3"><p>在利用 <code>strcmp</code> 函数进行比较排序时，需要声明一个字符型指针 <code>char *temp</code> 作为中间变量，然后通过双重循环和条件 <code>if (strcmp(p[i], p[j]) &gt; 0)&#123;char *temp = p[i];p[i] = p[j];p[j] = temp;&#125;</code> 交换指针数组的值，最终实现字符串从小到大的排序。</p></li></ol><p><code>注意事项：</code></p><p>需要明确的一个知识点是，利用二级指针比较字符串大小然后进行交换，其实本质上交换的是指针数组的值，也就是指向字符串的地址，而字符串源数据本身不会发生交换。因此，在输出的时候应该输出一级指针 <code>p_str[i]</code> 而不是 <code>string[i]</code>。</p><p><code>示例代码：</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE 3 <span class="comment">// 通过宏定义二维数组的行数</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(<span class="type">char</span> **p, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> *temp;                 <span class="comment">// 声明一个作为中间变量的指针</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="comment">// 遍历每个指针数组内的指针</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) <span class="comment">// 从第二个开始与第一个进行比较</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(p[i], p[j]) &gt; <span class="number">0</span>) <span class="comment">// 比较两个字符串的值，如果前面的大于后面的就进行交换（实际交换的是指向字符串的地址）</span></span><br><span class="line">            &#123;</span><br><span class="line">                temp = p[i];</span><br><span class="line">                p[i] = p[j];</span><br><span class="line">                p[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> string[SIZE][<span class="number">1024</span>]; <span class="comment">// 声明二维数组</span></span><br><span class="line">    <span class="type">char</span> *p_str[SIZE];       <span class="comment">// 声明指针数组</span></span><br><span class="line">    <span class="type">char</span> **p;                <span class="comment">// 声明二级指针</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; SIZE; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*  利用gets函数进行输入，相比较于scanf函数的优点就是gets函数会将空格等字符读取而不截断字符串，缺点就是输入一个字符串必须要按一次回车。使用scanf函数，可以使用scanf(&quot;%[^\n]s&quot;,string);语句来解决遇到空格时截断字符串的问题（%[^\n]是说明只有在读入回车符时才终止读取） */</span></span><br><span class="line">        <span class="built_in">gets</span>(string[i]);</span><br><span class="line">        p_str[i] = string[i]; <span class="comment">// 将每个字符串的首地址赋值给指针数组内的元素</span></span><br><span class="line">    &#125;</span><br><span class="line">    p = p_str;     <span class="comment">// 将指针数组的首地址赋值给二级指针</span></span><br><span class="line">    <span class="built_in">sort</span>(p, SIZE); <span class="comment">// 进行排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; SIZE; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(p_str[i]); <span class="comment">// 循环输出字符指针（因为对指针进行了交换，所以输出的值即为排序后的结果）</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 排序前</span><br><span class="line">cde</span><br><span class="line">afg</span><br><span class="line">abc</span><br><span class="line">// 排序后</span><br><span class="line">abc</span><br><span class="line">afg</span><br><span class="line">cde</span><br></pre></td></tr></table></figure><p><code>补充：</code>对于 <code>if (strcmp(p[i], p[j]) &gt; 0)&#123;char *temp = p[i];p[i] = p[j];p[j] = temp;&#125;</code> 存在疑虑（是交换的字符串还是字符串对应的地址），可以试试如下的代码，加深理解：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> **x, <span class="type">int</span> **y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> *temp;</span><br><span class="line">    <span class="keyword">if</span> (**x &lt; **y)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = *x;</span><br><span class="line">        *x = *y;</span><br><span class="line">        *y = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="type">int</span> *pa = &amp;a, *pb = &amp;b;</span><br><span class="line">    <span class="type">int</span> **p_a = &amp;pa, **p_b = &amp;pb;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换前a和b的值为：a=%d, b=%d\n&quot;</span>, a, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换前pa和pb的值为：pa=%x, pb=%x\n&quot;</span>, pa, pb);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换前*pa和*pb的值为：*pa=%d, *pb=%d\n&quot;</span>, *pa, *pb);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换前p_a和p_b的值为：p_a=%x, p_b=%x\n&quot;</span>, p_a, p_b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换前*p_a和*p_b的值为：*p_a=%x, *p_b=%x\n&quot;</span>, *p_a, *p_b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换前**p_a和**p_b的值为：**p_a=%d, **p_b=%d\n&quot;</span>, **p_a, **p_b);</span><br><span class="line">    <span class="built_in">swap</span>(p_a, p_b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------------------------------------------------------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换后a和b的值为：a=%d, b=%d\n&quot;</span>, a, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换后pa和pb的值为：pa=%x, pb=%x\n&quot;</span>, pa, pb);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换后*pa和*pb的值为：*pa=%d, *pb=%d\n&quot;</span>, *pa, *pb);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换后p_a和p_b的值为：p_a=%x, p_b=%x\n&quot;</span>, p_a, p_b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换后*p_a和*p_b的值为：*p_a=%x, *p_b=%x\n&quot;</span>, *p_a, *p_b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换后**p_a和**p_b的值为：**p_a=%d, **p_b=%d\n&quot;</span>, **p_a, **p_b);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果：</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line">交换前<span class="selector-tag">a</span>和<span class="selector-tag">b</span>的值为：<span class="selector-tag">a</span>=<span class="number">2</span>, <span class="selector-tag">b</span>=<span class="number">3</span></span><br><span class="line">交换前pa和pb的值为：pa=<span class="number">855</span>ff8fc, pb=<span class="number">855</span>ff8f8</span><br><span class="line">交换前*pa和*pb的值为：*pa=<span class="number">2</span>, *pb=<span class="number">3</span></span><br><span class="line">交换前p_a和p_b的值为：p_a=<span class="number">855</span>ff8f0, p_b=<span class="number">855</span>ff8e8</span><br><span class="line">交换前*p_a和*p_b的值为：*p_a=<span class="number">855</span>ff8fc, *p_b=<span class="number">855</span>ff8f8</span><br><span class="line">交换前**p_a和**p_b的值为：**p_a=<span class="number">2</span>, **p_b=<span class="number">3</span></span><br><span class="line">-------------------------------------------------------</span><br><span class="line">交换后<span class="selector-tag">a</span>和<span class="selector-tag">b</span>的值为：<span class="selector-tag">a</span>=<span class="number">2</span>, <span class="selector-tag">b</span>=<span class="number">3</span></span><br><span class="line">交换后pa和pb的值为：pa=<span class="number">855</span>ff8f8, pb=<span class="number">855</span>ff8fc</span><br><span class="line">交换后*pa和*pb的值为：*pa=<span class="number">3</span>, *pb=<span class="number">2</span></span><br><span class="line">交换后p_a和p_b的值为：p_a=<span class="number">855</span>ff8f0, p_b=<span class="number">855</span>ff8e8</span><br><span class="line">交换后*p_a和*p_b的值为：*p_a=<span class="number">855</span>ff8f8, *p_b=<span class="number">855</span>ff8fc</span><br><span class="line">交换后**p_a和**p_b的值为：**p_a=<span class="number">3</span>, **p_b=<span class="number">2</span></span><br></pre></td></tr></table></figure><h1 id="li-ti-9-a-href-https-www-dotcpp-com-oj-problem-1046-html-zi-ding-yi-han-shu-zhi-shu-zi-hou-yi-a">例题 9. <a href="https://www.dotcpp.com/oj/problem1046.html">自定义函数之数字后移</a></h1><p><code>题目描述：</code>有 n 个整数，使前面各数顺序向后移 m 个位置，最后 m 个数变成前面 m 个数。写一函数：实现以上功能，在主函数中输入 n 个数和输出调整后的 n 个数。</p><p><code>解题思路:</code></p><blockquote><p>重点知识点：<strong>malloc 函数和 free 函数</strong></p></blockquote><ol><li class="lvl-3"><p>声明两个指针 <code>a</code> 和 <code>b</code>，应用 <code>int *a = (int *)malloc(sizeof(int) * n)</code> 和 <code>int *b = (int *)malloc(sizeof(int) * n)</code> 在堆上动态分配两块能够容纳 <code>n</code> 个整数的内存，并将该内存块的起始地址赋给指针 <code>a</code> 和 <code>b</code>。其中 <code>a</code> 存放输入的源数据地址，<code>b</code> 存放调整后的数据地址。</p></li><li class="lvl-3"><p>构建一个函数 <code>moveNum</code>，传入 4 个参数，分别是 <code>int *a, int *b, int n, int m</code>，<code>n</code> 为数组长度，<code>m</code> 为移动位置的数值。</p></li><li class="lvl-3"><p>在函数内部，遍历数组 <code>a</code>，根据题目要求，假定 <code>n=10,m=2</code> 时，通过观察发现，数组 <code>a</code> 和数组 <code>b</code> 的之间的关系如下图：</p></li></ol><p><img src="https://bu.dusays.com/2024/12/08/675520c56ef6b.png" alt="例题9示例图"></p><p>遍历完数组 <code>a</code> 后，调整后的数都保存在数组 <code>b</code> 中，在主函数输出 <code>b</code> 即可。</p><p><code>注意事项:</code></p><p>输出后，使用 <code>free(a)</code> 和 <code>free(b)</code> 来释放这两块内存，以防止内存泄漏。</p><p><code>示例代码:</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数用于将数组元素向右移动 m 位</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">moveNum</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b, <span class="type">int</span> n, <span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; m)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 遍历数组a，当i小于移动的长度的数值时，将a[n - m + i]赋值给b[i],元素向右移动 m 位</span></span><br><span class="line">            b[i] = a[n - m + i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 当i大于等于移动的长度的数值时，将a[i - m]赋值给b[i],元素向右移动 m 位</span></span><br><span class="line">            b[i] = a[i - m];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    <span class="comment">// 用户输入数组大小 n</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="comment">// 动态分配内存并创建数组 a</span></span><br><span class="line">    <span class="type">int</span> *a = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>) * n);</span><br><span class="line">    <span class="comment">// 动态分配内存并创建数组 b</span></span><br><span class="line">    <span class="type">int</span> *b = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>) * n);</span><br><span class="line">    <span class="comment">// 用户输入 n 个整数，存储在数组 a 中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 用户输入右移的位数 m</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">    <span class="comment">// 调用函数进行右移操作</span></span><br><span class="line">    <span class="built_in">moveNum</span>(a, b, n, m);</span><br><span class="line">    <span class="comment">// 打印右移后的数组 b 中的元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="comment">// 释放动态分配的内存</span></span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line">    <span class="built_in">free</span>(b);</span><br><span class="line">    <span class="comment">// 暂停程序以查看输出（特定于某些编译器/操作系统）</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果：</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">9</span> <span class="number">10</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span></span><br></pre></td></tr></table></figure><h1 id="li-ti-10-a-href-https-www-dotcpp-com-oj-problem-1122-html-qin-mi-shu-a">例题 10. <a href="https://www.dotcpp.com/oj/problem1122.html">亲密数</a></h1><p><code>题目描述：</code>两个不同的自然数 A 和 B，如果整数 A 的全部因子 (包括 1，不包括 A 本身) 之和等于 B；且整数 B 的全部因子 (包括 1，不包括 B 本身) 之和等于 A，则将整数 A 和 B 称为亲密数。求 3000 以内的全部亲密数。</p><p><code>解题思路：</code></p><ul class="lvl-0"><li class="lvl-2"><p>创建 <code>SumOfFactors</code> 函数：计算一个数的因子和。通过遍历找到所有因子并求和。</p></li><li class="lvl-2"><p>在 <code>main</code> 函数中，创建数组 <code>array</code>，并通过循环计算 3000 以内每个数的因子和，存储在数组 <code>array</code> 中。</p></li><li class="lvl-2"><p>接着，再次循环遍历 <code>array</code> 数组，利用 <code>array[array[i]] == i</code> 条件寻找满足亲和数条件的组合。</p></li></ul><p><code>注意事项：</code></p><ul class="lvl-0"><li class="lvl-2"><p>计算因子和时，循环的范围可以优化为 <code>i &lt;= num / 2</code>，减少不必要的遍历。</p></li><li class="lvl-2"><p>在数组访问时，要确保不越界，应确保数组下标在有效范围内。</p></li></ul><p><code>参考代码：</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算一个数的因子和</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SumOfFactors</span><span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">1</span>;  <span class="comment">// 初始化因子和，1是任何数的因子</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= num / <span class="number">2</span>; i++)  <span class="comment">// 从2开始遍历到num的一半，因为大于num的因子不可能了</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (num % i == <span class="number">0</span>)  <span class="comment">// 如果i是num的因子</span></span><br><span class="line">        &#123;</span><br><span class="line">            sum += i;  <span class="comment">// 累加因子</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;  <span class="comment">// 返回因子和</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> array[<span class="number">3001</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">3000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        array[i] = <span class="built_in">SumOfFactors</span>(i);  <span class="comment">// 计算每个数的因子和并存储在数组中</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">3000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (array[i] &lt;= <span class="number">3000</span> &amp;&amp; array[array[i]] == i &amp;&amp; array[i] != i &amp;&amp; array[i] &gt; i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;(%d,%d)&quot;</span>, i, array[i]);  <span class="comment">// 输出亲和数的组合</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);  <span class="comment">// 暂停，等待用户输入后结束程序</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果：</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">220</span>,<span class="number">284</span>)(<span class="number">1184</span>,<span class="number">1210</span>)(<span class="number">2620</span>,<span class="number">2924</span>)</span><br></pre></td></tr></table></figure><h1 id="li-ti-11-a-href-https-www-dotcpp-com-oj-problem-1123-html-lie-chu-zui-jian-zhen-fen-shu-xu-lie-a">例题 11. <a href="https://www.dotcpp.com/oj/problem1123.html">列出最简真分数序列</a></h1><p><code>题目描述：</code>按递增顺序依次列出所有分母为 40，分子小于 40 的最简分数。</p><p><code>解题思路：</code></p><p>理解题目含义，可知所有偶数和 5 的倍数都需要进行化简，因此只需要通过循环输出除 1 之外的奇数但不是 5 的倍数的数与 40 的比值即可。以下是解题的思路：</p><ol><li class="lvl-3"><p>使用 <code>for</code> 循环，从 1 开始，每次递增 2，直到 <code>i</code> 大于 40，这样可以确保 <code>i</code> 的取值都是奇数。</p></li><li class="lvl-3"><p>在循环中使用条件语句进行判断：</p><ul class="lvl-2"><li class="lvl-5">如果 <code>i</code> 等于 1，输出 <code>i</code> 和 40 的比值，并以逗号结尾。</li><li class="lvl-5">如果 <code>i</code> 不等于 1 且 <code>i</code> 除以 5 的余数不为 0，输出 <code>i</code> 和 40 的比值，并以逗号结尾。</li></ul></li></ol><p><code>注意事项：</code></p><p>在阅读和理解代码的过程中，需要注意以下几点：</p><ol><li class="lvl-3"><p>循环条件：理解 <code>for</code> 循环的控制条件，确保循环在正确的范围内运行。</p></li><li class="lvl-3"><p>条件语句：理解条件语句中的逻辑，特别是对奇数和不是 5 的倍数的判断。</p></li></ol><p><code>参考代码：</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 循环，i从1开始，每次递增2，直到i大于40</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">40</span>; i = i + <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 判断i是否等于1</span></span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果i等于1，打印输出i和40的比值，并以逗号结尾</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d/%d,&quot;</span>, i, <span class="number">40</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果i不等于1且i除以5的余数不为0</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">5</span> != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 打印输出i和40的比值，并以逗号结尾</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d/%d,&quot;</span>, i, <span class="number">40</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打印输出换行符</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 暂停控制台以查看输出结果</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回0，表示程序正常结束</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果：</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>/<span class="number">40</span>,<span class="number">3</span>/<span class="number">40</span>,<span class="number">7</span>/<span class="number">40</span>,<span class="number">9</span>/<span class="number">40</span>,<span class="number">11</span>/<span class="number">40</span>,<span class="number">13</span>/<span class="number">40</span>,<span class="number">17</span>/<span class="number">40</span>,<span class="number">19</span>/<span class="number">40</span>,<span class="number">21</span>/<span class="number">40</span>,<span class="number">23</span>/<span class="number">40</span>,<span class="number">27</span>/<span class="number">40</span>,<span class="number">29</span>/<span class="number">40</span>,<span class="number">31</span>/<span class="number">40</span>,<span class="number">33</span>/<span class="number">40</span>,<span class="number">37</span>/<span class="number">40</span>,<span class="number">39</span>/<span class="number">40</span>,</span><br></pre></td></tr></table></figure><h1 id="li-ti-12-a-href-https-www-dotcpp-com-oj-problem-1032-html-zi-ding-yi-han-shu-zhi-zi-fu-chuan-lian-jie-a">例题 12. <a href="https://www.dotcpp.com/oj/problem1032.html">自定义函数之字符串连接</a></h1><p><code>题目描述：</code>写一函数，将两个字符串连接。</p><p><code>解题思路：</code></p><blockquote><p>首先，我想说既然题目中给出自己写一个函数将两个字符串连接，那么出题人的意图应该就是要考生自己编写一个函数实现与 <code>strcat</code> 函数同样的效果，而不是直接引用 <code>strcat</code> 函数，如果直接引用 <code>strcat</code> 函数，那么本题目将毫无测试价值。</p></blockquote><p>我的思路大致如下：</p><ul class="lvl-0"><li class="lvl-2"><p>输入两个字符串 <code>str_1</code> 和 <code>str_2</code>，且要求声明字符数组长度时 <code>str_1</code> 的长度大于和等于输入字符串后的 <code>str_1+str_2</code> 的长度。</p></li><li class="lvl-2"><p>构建函数传入两个字符串 <code>void montage_string(char *string_1, char *string_2)</code>，在函数内部实现如下效果：</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="type">int</span> i = <span class="built_in">strlen</span>(string_1), k = <span class="number">0</span>, j = <span class="built_in">strlen</span>(string_1) + <span class="built_in">strlen</span>(string_2);</span><br><span class="line"><span class="comment">//i等于字符串1的长度，j等于字符串1和字符串2长度的和，从字符串1的最后一个字符string_1[i]（即&#x27;\0&#x27;）开始，将字符串2的第一个字符string_2[k]赋值给字符串1的最后一个字符string_1[i]（即&#x27;\0&#x27;），实现拼接效果</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= j)</span><br><span class="line">    &#123;</span><br><span class="line">        string_1[i++] = string_2[k++];</span><br><span class="line"><span class="comment">//在赋值运算结束以后，i和k自增，当i增加到大于j(即符串1和字符串2长度的和)时，跳出循环</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>运行结果：</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span></span><br><span class="line">abc</span><br><span class="line"><span class="number">123</span>abc</span><br></pre></td></tr></table></figure><h1 id="li-ti-13-a-href-https-www-dotcpp-com-oj-problem-1096-html-minesweeper-sao-lei-a">例题 13. <a href="https://www.dotcpp.com/oj/problem1096.html">Minesweeper–扫雷</a></h1><p><code>题目描述：</code>扫雷员你玩过扫雷吗？这个可爱的小游戏附带了一个我们记不起名字的操作系统。游戏的目标是找到所有地雷在一个 <code>MxN</code> 场地内的位置。游戏显示了一个正方形中的数字，它告诉你这个正方形附近有多少地雷。每个正方形最多有八个相邻的正方形。左侧的 <code>4x4</code> 字段包含两个地雷，每个地雷由一个 <code>*</code> 字符表示。如果我们用上面描述的提示数字来表示同一个字段，我们最终得到下边的字段：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*...</span><br><span class="line">....</span><br><span class="line">.*..</span><br><span class="line">....</span><br><span class="line">*<span class="number">100</span></span><br><span class="line"><span class="number">2210</span></span><br><span class="line"><span class="number">1</span>*<span class="number">10</span></span><br><span class="line"><span class="number">1110</span></span><br></pre></td></tr></table></figure><p><code>解题思路：</code></p><ul class="lvl-0"><li class="lvl-2"><p>使用二维字符数组存储地雷信息，<code>*</code> 表示有地雷，<code>.</code> 表示安全。</p></li><li class="lvl-2"><p>确定了行列数后，声明两个二位数组（分别用于存储地雷信息和地雷数量），且在原来的行列数上增加两行两列，确保计算地雷周围数量时不越界。</p></li><li class="lvl-2"><p>读取二位字符数组，将地雷信息转换为二维数组，其中地雷表示为 <code>1</code>，安全表示为 <code>0</code>，然后计算每个格子周围的地雷数量。</p></li><li class="lvl-2"><p>输出每个格子的地雷数量，如果格子本身是地雷就输出 <code>*</code> 表示有地雷。</p></li></ul><p><code>注意事项：</code></p><ul class="lvl-0"><li class="lvl-2"><p>在计算地雷周围数量时，注意处理边缘情况，确保不越界。</p></li><li class="lvl-2"><p>使用 <code>memset</code> 初始化数组，避免脏数据影响计算。</p></li><li class="lvl-2"><p>在输入中添加判断条件，以确保满足输入条件。</p></li></ul><p><code>参考代码：</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> M, N, count = <span class="number">0</span>; <span class="comment">// M和N分别表示行数和列数，count用于记录场地数量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环读取输入，直到输入不符合条件</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;M, &amp;N) == <span class="number">2</span> &amp;&amp; M &amp;&amp; N)</span><br><span class="line">    &#123;</span><br><span class="line">        count++; <span class="comment">// 场地数量加一</span></span><br><span class="line">    </span><br><span class="line">        <span class="type">char</span> input[M][N + <span class="number">1</span>];            <span class="comment">// 二维字符数组用于存储输入的地雷信息</span></span><br><span class="line">        <span class="built_in">memset</span>(input, <span class="number">0</span>, <span class="built_in">sizeof</span>(input)); <span class="comment">// 将字符数组初始化为0</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 循环读取每一行地雷信息</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, input[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 增加两行两列，确保了在计算地雷周围的地雷数量时，不会出现数组越界的情况，且能够正确处理地雷场地的边缘情况</span></span><br><span class="line">        <span class="type">int</span> row = M + <span class="number">2</span>, col = N + <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> array[row][col], result[row][col]; <span class="comment">// 二维数组存储地雷信息和地雷数量</span></span><br><span class="line">        <span class="built_in">memset</span>(array, <span class="number">0</span>, <span class="built_in">sizeof</span>(array));       <span class="comment">// 将数组初始化为0</span></span><br><span class="line">        <span class="built_in">memset</span>(result, <span class="number">0</span>, <span class="built_in">sizeof</span>(result));     <span class="comment">// 将数组初始化为0</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 将地雷信息转换为二维数组，1表示有地雷</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (input[i][j] == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    array[i + <span class="number">1</span>][j + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 遍历数组，如果数组元素值为0（取反为真），则计算每个格子周围的地雷数量，即格子周围（左上方=array[i - 1][j - 1]，正上方=array[i - 1][j]，右上方=array[i - 1][j + 1]，左方=array[i][j - 1]，右方=array[i][j + 1]，左下方=array[i + 1][j - 1]，正下方=array[i + 1][j]，右下方=array[i + 1][j + 1]）和格子本身=array[i][j]（值为0）地雷的数量</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= M; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= N; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!array[i][j])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> p = i - <span class="number">1</span>; p &lt;= i + <span class="number">1</span>; p++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> q = j - <span class="number">1</span>; q &lt;= j + <span class="number">1</span>; q++)</span><br><span class="line">                        &#123;</span><br><span class="line">                            result[i][j] += array[p][q];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Field #%d:\n&quot;</span>, count);</span><br><span class="line">        <span class="comment">// 输出每个格子的地雷数量或者 &#x27;*&#x27; 表示有地雷</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= M; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= N; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[i][j])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, result[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果：</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span> <span class="number">4</span></span><br><span class="line">*...</span><br><span class="line">....</span><br><span class="line">.*..</span><br><span class="line">....</span><br><span class="line">Field <span class="selector-id">#1</span>:</span><br><span class="line">*<span class="number">100</span></span><br><span class="line"><span class="number">2210</span></span><br><span class="line"><span class="number">1</span>*<span class="number">10</span></span><br><span class="line"><span class="number">1110</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span> <span class="number">5</span></span><br><span class="line">**...</span><br><span class="line">.....</span><br><span class="line">.*...</span><br><span class="line">Field #<span class="number">2</span>:</span><br><span class="line">**<span class="number">100</span></span><br><span class="line"><span class="number">33200</span></span><br><span class="line"><span class="number">1</span>*<span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span> <span class="number">0</span></span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><h1 id="li-ti-14-a-href-https-www-dotcpp-com-oj-problem-1115-html-dna-a">例题 14. <a href="https://www.dotcpp.com/oj/problem1115.html">DNA</a></h1><p><code>题目描述：</code>小强从小就喜欢生命科学，他总是好奇花草鸟兽从哪里来的。终于，小强上中学了，接触到了神圣的名词–<code>DNA</code>. 它有一个双螺旋的结构。这让一根筋的小强抓破头皮，“要是能画出来就好了” 小强喊道。现在就请你帮助他吧。</p><p>解题思路：</p><ul class="lvl-0"><li class="lvl-2"><p>使用嵌套循环遍历每个测试用例。</p></li><li class="lvl-2"><p>在每个测试用例中，使用两层循环分别控制图案的行和列。</p></li><li class="lvl-2"><p>判断当前位置是否应该打印 <code>X</code> 或空格，根据条件确定输出。</p></li></ul><p><code>示例图解：</code></p><p>通过阅读题目可知，<code>DNA</code> 中 <code>X</code> 刚好出现在对角线上，如果用 <code>a</code> 表示一个单位的 <code>DNA</code> 串的行数，用 <code>i</code> 表示行，用 <code>j</code> 表示列，则是在 <code>j==i</code> 或者 <code>j == a - i - 1</code> 时需要绘制 <code>X</code>。假如生成 3 行重复 1 次，具体如下图所示：</p><p><img src="https://bu.dusays.com/2024/12/08/675520d16908d.png" alt=""></p><p><code>注意事项：</code></p><ul class="lvl-0"><li class="lvl-2"><p>确保输入的测试用例数量在有效范围内。</p></li><li class="lvl-2"><p>注意循环的边界条件，防止数组越界。</p></li><li class="lvl-2"><p>在进行 1 次以上重复绘制的时候，从第二次开始数组索引是从 <code>array[1][1]</code> 开始遍历的。</p></li><li class="lvl-2"><p>在每个测试用例之间用换行符分隔。</p></li></ul><p><code>参考代码：</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// N: 测试用例数量</span></span><br><span class="line">    <span class="type">int</span> N;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N) == <span class="number">1</span> &amp;&amp; N &gt; <span class="number">0</span> &amp;&amp; N &lt;= <span class="number">15</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 遍历每个测试用例</span></span><br><span class="line">        <span class="keyword">while</span> (N-- &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> a, b;</span><br><span class="line">            <span class="comment">// a: 图案宽度, b: 图案高度</span></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">            <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 循环打印图案的每一行</span></span><br><span class="line">            <span class="keyword">while</span> (b-- &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = flag; i &lt; a; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 循环打印图案的每一列</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; a; j++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 如果 j 等于 i 或者等于 a - i - 1，则打印 &quot;X&quot;，否则打印空格</span></span><br><span class="line">                        <span class="keyword">if</span> (j == i || j == a - i - <span class="number">1</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">&quot;X&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 在每个测试用例之间用换行符分隔</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果：</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="attribute">X</span> <span class="attribute">X</span></span><br><span class="line"> <span class="attribute">X</span></span><br><span class="line"><span class="attribute">X</span> <span class="attribute">X</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span> <span class="number">4</span></span><br><span class="line"><span class="attribute">X</span>   <span class="attribute">X</span></span><br><span class="line"> <span class="attribute">X</span> <span class="attribute">X</span></span><br><span class="line">  <span class="attribute">X</span></span><br><span class="line"> <span class="attribute">X</span> <span class="attribute">X</span></span><br><span class="line"><span class="attribute">X</span>   <span class="attribute">X</span></span><br><span class="line"> <span class="attribute">X</span> <span class="attribute">X</span></span><br><span class="line">  <span class="attribute">X</span></span><br><span class="line"> <span class="attribute">X</span> <span class="attribute">X</span></span><br><span class="line"><span class="attribute">X</span>   <span class="attribute">X</span></span><br><span class="line"> <span class="attribute">X</span> <span class="attribute">X</span></span><br><span class="line">  <span class="attribute">X</span></span><br><span class="line"> <span class="attribute">X</span> <span class="attribute">X</span></span><br><span class="line"><span class="attribute">X</span>   <span class="attribute">X</span></span><br><span class="line"> <span class="attribute">X</span> <span class="attribute">X</span></span><br><span class="line">  <span class="attribute">X</span></span><br><span class="line"> <span class="attribute">X</span> <span class="attribute">X</span></span><br><span class="line"><span class="attribute">X</span>   <span class="attribute">X</span></span><br></pre></td></tr></table></figure><h1 id="li-ti-15-a-href-https-www-dotcpp-com-oj-problem-1144-html-zi-shou-shu-wen-ti-a">例题 15. <a href="https://www.dotcpp.com/oj/problem1144.html">自守数问题</a></h1><p><code>题目描述：</code>自守数是指一个数的平方的尾数等于该数自身的自然数。例如：25^2=625， 76^2=5776， 9376^2=87909376。请求出 200000 以内的自守数？</p><p><code>解题思路：</code></p><p>从 0 开始遍历到 200000，然后设计一个判断自守数函数 <code>IsAutomorphicNumber</code> ，将遍历的每个数字 <code>num</code> 作为参数输入，在函数内部进行判断，将判断结果返回一个整型值，1 表示是自守数，0 表示不是自守数。函数内部具体实现：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>初始化标志 <code>flag</code> 为 1：</strong> 表示一开始默认是自守数。</p></li><li class="lvl-2"><p><strong>计算传入数字的平方：</strong> 将输入数字 <code>num</code> 的平方存储在 <code>square</code> 中。</p></li><li class="lvl-2"><p>循环判断每一位数字：</p><ul class="lvl-2"><li class="lvl-4">通过 <code>while (num)</code> 循环，用 <code>t_num = num % 10</code> 取数字的末位，用 <code>t_square = square % 10</code> 取平方的末位</li><li class="lvl-4">如果 <code>t_num</code> 不等于 <code>t_square</code>，将标志 <code>flag</code> 设为 <code>0</code>，表示不是自守数，然后跳出循环。</li><li class="lvl-4">如果未跳出循环，继续将 <code>num</code> 和 <code>square</code> 向右移动一位（通过 <code>num /= 10</code> 和 <code>square /= 10</code> 实现），以处理下一位数字。</li><li class="lvl-4">如果循环一直进行，直到传入的数字 <code>num</code> 为 <code>0</code> 时，循环停止，此时 <code>flag</code> 仍然为 <code>1</code>，则表示 <code>num</code> 为自守数。</li></ul></li><li class="lvl-2"><p><strong>返回标志 <code>flag</code>：</strong> 标志最终表示是否为自守数。</p></li></ul><p>注意事项：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>数据类型：</strong> 使用 <code>long long int</code> 数据类型，因为计算数字平方可能会导致溢出，尤其是对于较大的数字。</p></li><li class="lvl-2"><p><strong>循环范围：</strong> 注意循环的范围，确保在合适的范围内检查自守数。</p></li></ul><p><code>参考代码：</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数：判断是否为自守数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">IsAutomorphicNumber</span><span class="params">(<span class="type">long</span> <span class="type">long</span> <span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">1</span>;                     <span class="comment">// 初始化标志为1，表示是自守数</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> square = num * num; <span class="comment">// 计算数字的平方</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环判断每一位数字</span></span><br><span class="line">    <span class="keyword">while</span> (num)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> t_num = num % <span class="number">10</span>;       <span class="comment">// 取数字的个位</span></span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> t_square = square % <span class="number">10</span>; <span class="comment">// 取平方的个位</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 判断个位数字是否相同</span></span><br><span class="line">        <span class="keyword">if</span> (t_num != t_square)</span><br><span class="line">        &#123;</span><br><span class="line">            flag = <span class="number">0</span>; <span class="comment">// 如果个位数字不同，将标志设置为0，表示不是自守数</span></span><br><span class="line">            <span class="keyword">break</span>;    <span class="comment">// 跳出循环</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 缩小范围，处理下一位数字</span></span><br><span class="line">        num /= <span class="number">10</span>;</span><br><span class="line">        square /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag; <span class="comment">// 返回判断结果</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 循环检查0到200000之间的数字</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">200000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 调用自守数判断函数，如果是自守数则输出</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">IsAutomorphicNumber</span>(i))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld  &quot;</span>, i); <span class="comment">// 输出自守数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果：</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">25</span>  <span class="number">76</span>  <span class="number">376</span>  <span class="number">625</span>  <span class="number">9376</span>  <span class="number">90625</span>  <span class="number">109376</span>  请按任意键继续. . .</span><br></pre></td></tr></table></figure><h1 id="li-ti-16-a-href-https-www-dotcpp-com-oj-problem-1138-html-qiu-ju-zhen-de-liang-dui-jiao-xian-shang-de-yuan-su-zhi-he-a">例题 16. <a href="https://www.dotcpp.com/oj/problem1138.html">求矩阵的两对角线上的元素之和</a></h1><p><code>题目描述：</code>求矩阵的两对角线上的元素之和</p><p><code>解题思路：</code></p><ol><li class="lvl-3"><p>首先需要理解对角线的定义：</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>主对角线（mainDiagonal）是从矩阵的左上角到右下角的一条线。</p></li><li class="lvl-2"><p>副对角线（antiDiagonal）是从矩阵的右上角到左下角的一条线。</p></li></ul><ol start="2"><li class="lvl-3"><p>其次就是求对角线之和</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>主对角线之和（mainDiagonalSum），就是二维数组索引值相等的对应元素之和。</p></li><li class="lvl-2"><p>副对角线之和（antiDiagonalSum）相对复杂，二维数组列索引<code>j</code> 和<code>i</code>、<code>N</code>之间存在如下关系：</p></li></ul><blockquote><p>j = N - 1 - i</p></blockquote><ol start="3"><li class="lvl-3"><p>最后求矩阵的对角线和。</p></li></ol><p>注意事项：</p><ul class="lvl-0"><li class="lvl-2"><p>如果矩阵的维度是 <strong>奇数</strong>，那么 <strong>主对角线</strong> 和 <strong>副对角线</strong> 会在中心元素上重叠一次。在这种情况下，代码中计算对角线和时，中心元素会被重复加一次。</p></li><li class="lvl-2"><p>在计算完副对角线的和之后，如果是<strong>奇数</strong>矩阵，我们从 <strong>主对角线</strong> 或 <strong>副对角线</strong> 两者之一的和中减去中心元素，防止重复计算。</p></li></ul><p><code>参考代码：</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> N;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入矩阵的大小 N: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> matrix[N][N];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入矩阵的元素:\n&quot;</span>);</span><br><span class="line">    <span class="comment">// 输入矩阵元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;matrix[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> mainDiagonalSum = <span class="number">0</span>; <span class="comment">// 主对角线和</span></span><br><span class="line">    <span class="type">int</span> antiDiagonalSum = <span class="number">0</span>; <span class="comment">// 副对角线和</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算主对角线和和副对角线和</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        mainDiagonalSum += matrix[i][i];         <span class="comment">// 主对角线元素</span></span><br><span class="line">        antiDiagonalSum += matrix[i][N - <span class="number">1</span> - i]; <span class="comment">// 副对角线元素</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果矩阵的维度是奇数，中心元素重复计算了，减去它</span></span><br><span class="line">    <span class="keyword">if</span> (N % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> centerIndex = N / <span class="number">2</span>;</span><br><span class="line">        antiDiagonalSum -= matrix[centerIndex][centerIndex]; <span class="comment">// 减去中心元素</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;主对角线的和是: %d\n&quot;</span>, mainDiagonalSum);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;副对角线的和是: %d\n&quot;</span>, antiDiagonalSum);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;对角线的总和是: %d\n&quot;</span>, mainDiagonalSum + antiDiagonalSum);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果：</code></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">请输入矩阵的大小 N: <span class="number">3</span></span><br><span class="line">请输入矩阵的元素:</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line"><span class="number">7</span> <span class="number">8</span> <span class="number">9</span></span><br><span class="line">主对角线的和是: <span class="number">15</span></span><br><span class="line">副对角线的和是: <span class="number">10</span></span><br><span class="line">对角线的总和是: <span class="number">25</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
          <category> 刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 刷题笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习--Vue安装(npm方法)🍄</title>
      <link href="/2023/02/02/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0--Vue%E5%AE%89%E8%A3%85(npm%E6%96%B9%E6%B3%95)/"/>
      <url>/2023/02/02/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0--Vue%E5%AE%89%E8%A3%85(npm%E6%96%B9%E6%B3%95)/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="qian-yan">前言</h1><p>首先，先列出我们接下来需要的东西：</p><ul class="lvl-0"><li class="lvl-2"><p>node.js环境（npm包管理器）</p></li><li class="lvl-2"><p>vue-cli 脚手架构建工具</p></li><li class="lvl-2"><p>cnpm npm的淘宝镜像</p></li></ul><h1 id="yi-an-zhuang-a-href-https-nodejs-org-zh-cn-node-js-a">一、安装<a href="https://nodejs.org/zh-cn/">node.js</a></h1><p>从node.js官网下载并安装node，安装过程很简单，一直点下一步就ok了，安装完之后,输入<code>node -v</code> 命令，查看node的版本，若出现相应的版本号，则说明你安装成功了。安装成功后，运行代码结果如下（示例）：</p><p><img src="https://bu.dusays.com/2024/12/29/6770cbf207968.png" alt="图1"></p><p>npm包管理器，是集成在node中的，所以安装了node也就有了npm,直接输入 <code>npm -v</code> 命令，显示npm的版本信息。安装成功后，运行代码结果如下（示例）：</p><p><img src="https://bu.dusays.com/2024/12/29/6770cbf32668b.png" alt="图2"></p><p>到目前为止，node的环境已经安装完成，npm 包管理器也有了，由于有些npm资源被屏蔽或者是国外资源的原因，经常会导致npm安装依赖包的时候失败，所以我们还需要npm的国内镜像----cnpm。</p><h1 id="er-an-zhuang-cnpm">二、安装cnpm</h1><p>在命令行中输入 <code>npm install -g cnpm --registry=http://registry.npm.taobao.org</code> ，然后等待，没报错表示安装成功。安装成功后，运行代码结果如下（示例）：</p><p><img src="https://bu.dusays.com/2024/12/29/6770cbf45880c.png" alt="图3"></p><p>完成之后，我们就可以用cnpm代替npm来安装依赖包了。如果想进一步了解cnpm的，查看淘宝npm镜像官网。</p><h1 id="san-an-zhuang-vue-jiao-shou-jia-gou-jian-gong-ju">三、安装vue 脚手架构建工具</h1><p>在命令行中运行命令，最新稳定版 <code>npm install -g @vue/cli</code>，然后等待安装完成。</p><p>是否安装成功：<code>vue -V</code>，安装成功后，运行代码结果如下（示例）：</p><p><img src="https://bu.dusays.com/2024/12/29/6770cbf5781b2.png" alt="图4"></p><h1 id="si-chuang-jian-vue-gong-cheng-xiang-mu">四、创建vue工程项目</h1><h3 id="yi-ji-yu-ming-ling-xing-de-fang-shi-chuang-jian-vue-xiang-mu" id="（一）基于命令行的方式创建vue项目">（一）基于命令行的方式创建vue项目</h3><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue caeate project-name</span><br></pre></td></tr></table></figure><h3 id="er-ji-yu-tu-xing-hua-jie-mian-de-fang-shi-chuang-jian-vue-xiang-mu" id="（二）基于图形化界面的方式创建vue项目">（二）基于图形化界面的方式创建vue项目</h3><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></table></figure><h3 id="san-kai-shi-chuang-jian-xiang-mu" id="（三）开始创建项目">（三）开始创建项目</h3><p>1.在终端中输入<code>vue create vue_project_01</code>，按下回车开始创建项目；</p><p>2.此时会出现两个选项询问你需要安装哪些功能：</p><p>第一项是默认方式创建vue项目，第二项是手动选择功能创建vue项目；</p><p>按键盘↑或↓来选择；</p><p>选择手动模式；</p><p>3.此时让你手动选择需要安装的功能 按空格键选择 选中的功能前面会带有*号 选择完毕之后按回车进入下一步操作；</p><p>4.如果选择了vue-router的话会弹出一个选项，问你是否需要安装历史模式的路由，我选否因为要用哈希模式的路由；</p><p>5.又弹出一个提示让你选择Eslint的语法版本，选择标准版本就行；</p><p>6.又又弹出一个提示框问你什么时候进行es的语法校验，选择lint on save；</p><p>7.又又又弹出一个提示问你这些工具的配置文件怎么创建，第一个选项是创建单独的配置文件，第二个选项是把这些配置文件都放到package.json中；</p><p>8.又又又又弹出一个提示问你要不要把刚才所做的那些设置保存为一个模板供后续创建其他项目的时候使用；</p><p>9.漫长的等待。。。</p><p>正在初始化项目的基本结构、创建一些模板，下载一些包。。。。</p><p>10.创建完成后提示我们进入到项目的根目录中，并且运行<code>npm run serve</code> 把项目运行起来；</p><p>11.在浏览器中输入<a href="http://localhost:8080/#/">http://localhost:8080/#/</a> 就可以访问到你创建的第一个vue项目了。</p><h1 id="wu-zhu-yi-shi-xiang">五、注意事项</h1><p>工程项目初始化完成后，运行<code>npm run serve</code>时，可能会提示vue无法加载文件C:\Users\Administrator\AppData\Roaming\npm\vue.project-name，因为在此系统上禁止运行脚本。</p><p>这是因为在此系统上禁止运行脚本……解决办法如下：</p><p>1.管理员身份运行PowerShell（命令提示符，来源于Linux的命令提示符也叫Shell）：</p><p><img src="https://bu.dusays.com/2024/12/29/6770cbf6c1c0c.png" alt="图5"></p><p>2、执行：set-ExecutionPolicy RemoteSigned （签名或运行这些脚本）：</p><p><img src="https://bu.dusays.com/2024/12/29/6770cbf7cb244.png" alt="图6"></p><p>3.重新运行<code>npm run serve</code>，会成功运行。</p><p>4.vue打包命令</p><p>对当前vue项目进行打包的命令如下: <code>npm run build</code>，打包完成,会输出Build complete并且在vue项目中会生成一个名字为dist的打包文件。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言基础知识备忘清单📜</title>
      <link href="/2023/01/26/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%87%E5%BF%98%E6%B8%85%E5%8D%95/"/>
      <url>/2023/01/26/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%87%E5%BF%98%E6%B8%85%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="yi-shu-ju-lei-xing">一、数据类型</h1><table><thead><tr><th style="text-align:center">数据关键字</th><th style="text-align:center">占用大小</th><th style="text-align:center">数据范围</th><th style="text-align:center">存储类型</th></tr></thead><tbody><tr><td style="text-align:center"><code>char</code></td><td style="text-align:center">1 字节</td><td style="text-align:center"><code>−128</code> ~ <code>127</code></td><td style="text-align:center">单个字符 / 字母 / 数字 / ASCII</td></tr><tr><td style="text-align:center"><code>signed char</code></td><td style="text-align:center">1 字节</td><td style="text-align:center"><code>−128</code> ~ <code>127</code></td><td style="text-align:center">-</td></tr><tr><td style="text-align:center"><code>unsigned char</code></td><td style="text-align:center">1 字节</td><td style="text-align:center"><code>0</code> ~ <code>255</code></td><td style="text-align:center">-</td></tr><tr><td style="text-align:center"><code>int</code></td><td style="text-align:center">4 字节</td><td style="text-align:center"><code>-2,147,483,648</code> ~ <code>2,147,483,647</code></td><td style="text-align:center">存储整数</td></tr><tr><td style="text-align:center"><code>signed int</code></td><td style="text-align:center">4 字节</td><td style="text-align:center"><code>-2,147,483,648</code> ~ <code>2,147,483,647</code></td><td style="text-align:center">存储整数</td></tr><tr><td style="text-align:center"><code>unsigned int</code></td><td style="text-align:center">4 字节</td><td style="text-align:center"><code>0</code> ~ <code>4,294,967,295</code></td><td style="text-align:center">存储整数</td></tr><tr><td style="text-align:center"><code>short int</code></td><td style="text-align:center">2 字节</td><td style="text-align:center"><code>−32,768</code> ~ <code>32,767</code></td><td style="text-align:center">存储整数</td></tr><tr><td style="text-align:center"><code>signed short int</code></td><td style="text-align:center">2 字节</td><td style="text-align:center"><code>−32,768</code> ~ <code>32,767</code></td><td style="text-align:center">存储整数</td></tr><tr><td style="text-align:center"><code>unsigned short int</code></td><td style="text-align:center">2 字节</td><td style="text-align:center"><code>0</code> ~ <code>65,535</code></td><td style="text-align:center">存储整数</td></tr><tr><td style="text-align:center"><code>long int</code></td><td style="text-align:center">4 字节</td><td style="text-align:center"><code>-2,147,483,648</code> ~ <code>2,147,483,647</code></td><td style="text-align:center">存储整数</td></tr><tr><td style="text-align:center"><code>signed long int</code></td><td style="text-align:center">4 字节</td><td style="text-align:center"><code>-2,147,483,648</code> ~ <code>2,147,483,647</code></td><td style="text-align:center">存储整数</td></tr><tr><td style="text-align:center"><code>unsigned long int</code></td><td style="text-align:center">4 字节</td><td style="text-align:center"><code>0</code> ~ <code>4,294,967,295</code></td><td style="text-align:center">存储整数</td></tr><tr><td style="text-align:center"><code>float</code></td><td style="text-align:center">4 字节</td><td style="text-align:center">可精确表示至少 6 位有效数字</td><td style="text-align:center">存储浮点数</td></tr><tr><td style="text-align:center"><code>double</code></td><td style="text-align:center">8 字节</td><td style="text-align:center">可精确表示至少 10 位有效数字</td><td style="text-align:center">存储浮点数</td></tr><tr><td style="text-align:center"><code>long double</code></td><td style="text-align:center">16 字节</td><td style="text-align:center">至少比 double 更大</td><td style="text-align:center">存储浮点数</td></tr></tbody></table><blockquote><p>Tip：数据占用大小和范围因不同系统各有不同，具体大小可用 <code>size of (数据关键字)</code> 输出查看。如下：</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Type short has a size of %zd bytes.\n&quot;</span>, <span class="built_in">sizeof</span>(<span class="type">short</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Type int has a size of %zd bytes.\n&quot;</span>, <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Type char has a size of %zd bytes.\n&quot;</span>, <span class="built_in">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Type long has a size of %zd bytes.\n&quot;</span>, <span class="built_in">sizeof</span>(<span class="type">long</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Type long long has a size of %zd bytes.\n&quot;</span>, <span class="built_in">sizeof</span>(<span class="type">long</span> <span class="type">long</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Type float has a size of %zd bytes.\n&quot;</span>, <span class="built_in">sizeof</span>(<span class="type">float</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Type double has a size of %zd bytes.\n&quot;</span>, <span class="built_in">sizeof</span>(<span class="type">double</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Type long double has a size of %zd bytes.\n&quot;</span>, <span class="built_in">sizeof</span>(<span class="type">long</span> <span class="type">double</span>));</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Tip：C99 和 C11 提供 <code>%zd</code> 转换说明符以匹配 <code>sizeof</code> 的返回类型，一些不支持 C99 和 C11 的编译器可用 <code>%u</code> 或 <code>%lu</code> 代替 <code>%zd</code>。运行输出结果如下：</p></blockquote><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Type short has a size of <span class="number">2</span> bytes.</span><br><span class="line">Type <span class="keyword">int</span> has a size of <span class="number">4</span> bytes.</span><br><span class="line">Type char has a size of <span class="number">1</span> bytes.</span><br><span class="line">Type long has a size of <span class="number">4</span> bytes.</span><br><span class="line">Type long long has a size of <span class="number">8</span> bytes.</span><br><span class="line">Type float has a size of <span class="number">4</span> bytes.</span><br><span class="line">Type double has a size of <span class="number">8</span> bytes.</span><br><span class="line">Type long double has a size of <span class="number">16</span> bytes.</span><br></pre></td></tr></table></figure><h1 id="er-ji-ben-ge-shi-shuo-ming-fu">二、基本格式说明符</h1><table><thead><tr><th>格式说明符类型</th><th style="text-align:center">对应数据类型</th></tr></thead><tbody><tr><td><code>%d</code> 或 <code>%i</code></td><td style="text-align:center"><code>int</code> 整数</td></tr><tr><td><code>%ld</code> 和 <code>%lld</code></td><td style="text-align:center"><code>long int</code> 整数和 <code>long long int</code> 整数</td></tr><tr><td><code>%u</code></td><td style="text-align:center"><code>unsigned int</code> 整数</td></tr><tr><td><code>%lu</code> 和 <code>%llu</code></td><td style="text-align:center"><code>unsigned long int</code> 整数和 <code>unsigned long long int</code> 整数</td></tr><tr><td><code>%f</code></td><td style="text-align:center"><code>float</code> 单精度的十进制类型</td></tr><tr><td><code>%lf</code></td><td style="text-align:center"><code>double</code> 高精度浮点数据或数字</td></tr><tr><td><code>%c</code></td><td style="text-align:center"><code>char</code> 字符</td></tr><tr><td><code>%s</code></td><td style="text-align:center">用于 <code>strings</code> 字符串</td></tr></tbody></table><table><thead><tr><th style="text-align:center">进制类型</th><th style="text-align:center">short 类型说明符</th><th style="text-align:center">基础型说明符</th><th style="text-align:center">long 类型说明符</th></tr></thead><tbody><tr><td style="text-align:center">8 进制</td><td style="text-align:center"><code>%ho</code></td><td style="text-align:center"><code>%o</code></td><td style="text-align:center"><code>%lo</code></td></tr><tr><td style="text-align:center">10 进制</td><td style="text-align:center"><code>%hd</code></td><td style="text-align:center"><code>%d</code></td><td style="text-align:center"><code>%ld</code></td></tr><tr><td style="text-align:center">16 进制</td><td style="text-align:center"><code>%hx</code> / <code>%hX</code></td><td style="text-align:center"><code>%x</code> / <code>%X</code></td><td style="text-align:center"><code>%lx</code> / <code>%lX</code></td></tr></tbody></table><h1 id="san-zhuan-yi-xu-lie">三、转义序列</h1><table><thead><tr><th style="text-align:center">转义序列</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center"><code>\a</code></td><td style="text-align:center">警报（ANSI C）</td></tr><tr><td style="text-align:center"><code>\b</code></td><td style="text-align:center">退格</td></tr><tr><td style="text-align:center"><code>\f</code></td><td style="text-align:center">换页</td></tr><tr><td style="text-align:center"><code>\n</code></td><td style="text-align:center">换行</td></tr><tr><td style="text-align:center"><code>\r</code></td><td style="text-align:center">回车</td></tr><tr><td style="text-align:center"><code>\t</code></td><td style="text-align:center">水平制表符</td></tr><tr><td style="text-align:center"><code>\v</code></td><td style="text-align:center">垂直制表符</td></tr><tr><td style="text-align:center"><code>\\</code></td><td style="text-align:center">反斜杠（\）</td></tr><tr><td style="text-align:center"><code>\'</code></td><td style="text-align:center">单引号</td></tr><tr><td style="text-align:center"><code>\&quot;</code></td><td style="text-align:center">双引号</td></tr><tr><td style="text-align:center"><code>\?</code></td><td style="text-align:center">问号</td></tr><tr><td style="text-align:center"><code>\0oo</code></td><td style="text-align:center">八进制值（oo 必须是有效的八进制数，即每个 o 可表示 0 ～ 7 中的一个数）</td></tr><tr><td style="text-align:center"><code>\xhh</code></td><td style="text-align:center">十六进制值（hh 必须是有效的十六进制数，即每个 h 可表示 0 ～ f 中的一个数）</td></tr></tbody></table><blockquote><p>应用实例如下：</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">float</span> salary;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\aEnter your desired monthly salary:&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; $_______\b\b\b\b\b\b\b&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;salary);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n\t$%.2f a month is $%.2f a year.&quot;</span>,salary,salary*<span class="number">12.0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\rGee!\n&quot;</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果为：</p></blockquote><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//初始状态是这样</span><br><span class="line">Enter your desired monthly salary: <span class="variable">$_______</span></span><br><span class="line">//输入数据按回车键后显示如下</span><br><span class="line">Enter your desired monthly salary: <span class="variable">$4</span>00<span class="number">0.00</span></span><br><span class="line"></span><br><span class="line">Gee!    <span class="variable">$4</span>00<span class="number">0.00</span> a month is <span class="variable">$4</span>800<span class="number">0.00</span> a year.</span><br></pre></td></tr></table></figure><h1 id="si-suan-zhu-yun-suan-fu">四、算术运算符</h1><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">符号</th><th style="text-align:center">功能</th><th style="text-align:center">示例</th></tr></thead><tbody><tr><td style="text-align:center">单目运算符</td><td style="text-align:center"><code>+</code></td><td style="text-align:center">取正数 (一般不需要写 “+” 号)</td><td style="text-align:center"><code>+m</code></td></tr><tr><td style="text-align:center">单目运算符</td><td style="text-align:center"><code>-</code></td><td style="text-align:center">取负数</td><td style="text-align:center"><code>-m</code></td></tr><tr><td style="text-align:center">双目运算符</td><td style="text-align:center"><code>+</code></td><td style="text-align:center">加法</td><td style="text-align:center"><code>m+n</code></td></tr><tr><td style="text-align:center">双目运算符</td><td style="text-align:center"><code>-</code></td><td style="text-align:center">减法</td><td style="text-align:center"><code>m-n</code></td></tr><tr><td style="text-align:center">双目运算符</td><td style="text-align:center"><code>*</code></td><td style="text-align:center">乘法</td><td style="text-align:center"><code>m*n</code></td></tr><tr><td style="text-align:center">双目运算符</td><td style="text-align:center"><code>/</code></td><td style="text-align:center">除法 (在取值时，只取整数，不取余数)</td><td style="text-align:center"><code>m/n</code></td></tr><tr><td style="text-align:center">双目运算符</td><td style="text-align:center"><code>%</code></td><td style="text-align:center">取余（求模）(两个操作数必须是整数数据)</td><td style="text-align:center"><code>m%n</code></td></tr></tbody></table><h1 id="wu-zi-zeng-zi-jian-yun-suan-fu">五、自增、自减运算符</h1><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">符号</th><th style="text-align:center">运算规则</th><th style="text-align:center">示例</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">自增运算符 (后缀)</td><td style="text-align:center"><code>++</code></td><td style="text-align:center">先赋值后加 1</td><td style="text-align:center"><code>n=m++;</code></td><td style="text-align:center">①:<code>n=m</code>; ②:<code>m=m+1</code></td></tr><tr><td style="text-align:center">自增运算符 (前缀)</td><td style="text-align:center"><code>++</code></td><td style="text-align:center">先加 1 后赋值</td><td style="text-align:center"><code>n=++m;</code></td><td style="text-align:center">①:<code>m=m+1</code>; ②:<code>n=m</code></td></tr><tr><td style="text-align:center">自减运算符 (后缀)</td><td style="text-align:center"><code>--</code></td><td style="text-align:center">先赋值后减 1</td><td style="text-align:center"><code>n=m--;</code></td><td style="text-align:center">①:<code>n=m</code>; ②:<code>m=m-1</code></td></tr><tr><td style="text-align:center">自减运算符 (前缀)</td><td style="text-align:center"><code>--</code></td><td style="text-align:center">先减 1 后赋值</td><td style="text-align:center"><code>n=--m;</code></td><td style="text-align:center">①:<code>m=m-1</code>; ②:<code>n=m</code></td></tr></tbody></table><blockquote><p>注意：自增和自减运算符的运算对象只能是变量，不能是常量或表达式，如：代码写成 <code>++5</code> 或 <code>(i+j)--</code> 是不合法的，编译不会通过。应用实例如下：</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d %d\n&quot;</span>, i--, --i, i++, ++i);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为：<code>6 5 6 5</code>。</p><p>之所以输出上述结果，是因为涉及到 <code>printf</code> 函数压栈和出栈的知识，这里粗略说明一下，在处理 <code>printf</code> 时，压栈顺序为从右往左，也就是说从右往左的计算（“计算” 不等于 “输出”）。在计算时，遇到 <code>x++</code> 会记录此时的 <code>x</code> 的值作为最后的输出结果。遇到 <code>x</code> 和 <code>++x</code> 的时候则不会将此时的计算结果作为最终的输出，只会修改 <code>x</code> 的值，在最终输出的时候都输出 <code>x</code> 的值（所以 <code>++x</code> 和 <code>x</code> 的结果总是一样的）。自减运算同理。</p><h1 id="liu-guan-xi-yun-suan-fu">六、关系运算符</h1><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">符号</th><th style="text-align:center">示例</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">等于</td><td style="text-align:center"><code>==</code></td><td style="text-align:center"><code>7==5</code></td><td style="text-align:center">因为 7 不等于 5，所以该关系不成立，表达式的结果为假值 (即 <code>false</code> 或 <code>0</code>)</td></tr><tr><td style="text-align:center">大于</td><td style="text-align:center"><code>&gt;</code></td><td style="text-align:center"><code>7&gt;5</code></td><td style="text-align:center">因为 7 大于 5，所以该关系成立，表达式的结果为真值 (即 <code>true</code> 或 <code>1</code>)</td></tr><tr><td style="text-align:center">大于或等于</td><td style="text-align:center"><code>&gt;=</code></td><td style="text-align:center"><code>7&gt;=5</code></td><td style="text-align:center">因为 7 大于 5，所以该关系成立，表达式的结果为真值 (即 <code>true</code> 或 <code>1</code>)</td></tr><tr><td style="text-align:center">小于</td><td style="text-align:center"><code>&lt;</code></td><td style="text-align:center"><code>7&lt;5</code></td><td style="text-align:center">因为 7 大于 5，所以该关系不成立，表达式的结果为假值 (即 <code>false</code> 或 <code>0</code>)</td></tr><tr><td style="text-align:center">小于或等于</td><td style="text-align:center"><code>&lt;=</code></td><td style="text-align:center"><code>7&lt;=5</code></td><td style="text-align:center">因为 7 大于 5，所以该关系不成立，表达式的结果为假值 (即 <code>false</code> 或 <code>0</code>)</td></tr><tr><td style="text-align:center">不等于</td><td style="text-align:center"><code>!=</code></td><td style="text-align:center"><code>7!=5</code></td><td style="text-align:center">因为 7 不等于 5，所以该关系成立，表达式的结果为真值 (即 <code>true</code> 或 <code>1</code>)</td></tr></tbody></table><blockquote><p>Tip：在 C 语言中，<code>1</code> 为真，<code>0</code> 为假，也就是 <code>1</code> 是 <code>true</code>，<code>0</code> 是 <code>false</code>。</p></blockquote><h1 id="qi-luo-ji-yun-suan-fu">七、逻辑运算符</h1><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">功能</th><th style="text-align:center">示例</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">&amp;&amp;</td><td style="text-align:center">逻辑与 (且)</td><td style="text-align:center">A&amp;&amp;B</td><td style="text-align:center">双目运算符</td></tr><tr><td style="text-align:center">||</td><td style="text-align:center">逻辑或</td><td style="text-align:center">A||B</td><td style="text-align:center">双目运算符</td></tr><tr><td style="text-align:center">!</td><td style="text-align:center">逻辑非</td><td style="text-align:center">!A</td><td style="text-align:center">单目运算符</td></tr></tbody></table><blockquote><p>假设有两个变量 <code>m</code> 和 <code>n</code>，<code>m</code> 和 <code>n</code> 可以进行如下表所示的 <strong>3</strong> 种逻辑运算。其中 <code>1</code> 表示 <code>true</code>(真)，<code>0</code> 表示 <code>false</code>(假)。</p></blockquote><table><thead><tr><th style="text-align:center">m</th><th style="text-align:center">n</th><th style="text-align:center">m&amp;&amp;n</th><th style="text-align:center">m||n</th><th style="text-align:center">!m</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr></tbody></table><blockquote><p>Tip：对于 “逻辑与” 来说，两个操作数中有一个为 0，结果即为 0；对于 “逻辑或” 来说，两个操作数中有 1 个为 1，结果即为 1；对于 “逻辑非” 来说，结果与操作数总是相反。</p></blockquote><h1 id="ba-wei-yun-suan-fu">八、位运算符</h1><table><thead><tr><th style="text-align:center">位运算符</th><th style="text-align:center">功能</th><th></th></tr></thead><tbody><tr><td style="text-align:center">&amp;</td><td style="text-align:center">按位与</td><td></td></tr><tr><td style="text-align:center">|</td><td style="text-align:center">按位或</td><td></td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">按位异或</td><td></td></tr><tr><td style="text-align:center">~</td><td style="text-align:center">取反</td><td></td></tr><tr><td style="text-align:center">&lt;&lt;</td><td style="text-align:center">左移</td><td></td></tr><tr><td style="text-align:center">&gt;&gt;</td><td style="text-align:center">右移</td><td></td></tr></tbody></table><blockquote><p>假设有两个变量 <code>m</code> 和 <code>n</code>，<code>m</code> 和 <code>n</code> 可以进行如下表所示的 <strong>4</strong> 种位运算。其中 <code>1</code> 表示 <code>true</code>（真），<code>0</code> 表示 <code>false</code>（假）。</p></blockquote><table><thead><tr><th style="text-align:center">m</th><th style="text-align:center">n</th><th style="text-align:center">m&amp;n</th><th style="text-align:center">m|n</th><th style="text-align:center">~m</th><th style="text-align:center">m^n</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr></tbody></table><blockquote><p>Tip：按位与，遇 0 则 0；按位或，遇 1 则 1；按位异或，相同为 0，不同为 1。巧妙运用位运算的实例如下：</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//用位运算符实现交换a和b的值</span></span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;你输入的a=%d, b=%d\n&quot;</span>, a, b);</span><br><span class="line">    a = a ^ b;</span><br><span class="line">    b = a ^ b; <span class="comment">// =&gt; b = a^b^b = a^0 = a</span></span><br><span class="line">    a = a ^ b; <span class="comment">// =&gt; a = a^b^b(等于最开始的a) = a^b^a = a^a^b = 0^b = b</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换后的a=%d, b=%d\n&quot;</span>, a, b);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>从上表和实例可以，我们得出如下结论：（1）两个相同的十进制数异或的结果一定为零。（2）任何一个数和 0 的异或结果一定是它本身。（3）异或运算满足结合律和交换律。</p></blockquote><h1 id="jiu-fu-he-fu-zhi-yun-suan-fu">九、复合赋值运算符</h1><table><thead><tr><th style="text-align:center">复合赋值运算符</th><th style="text-align:center">功能</th><th style="text-align:center">示例</th></tr></thead><tbody><tr><td style="text-align:center">+=</td><td style="text-align:center">加赋值</td><td style="text-align:center">m+=n 等价于 m=m+n</td></tr><tr><td style="text-align:center">-=</td><td style="text-align:center">减赋值</td><td style="text-align:center">m-=n 等价于 m=m-n</td></tr><tr><td style="text-align:center">*=</td><td style="text-align:center">乘赋值</td><td style="text-align:center">m*=n 等价于 m=m*n</td></tr><tr><td style="text-align:center">/=</td><td style="text-align:center">除赋值</td><td style="text-align:center">m/=n 等价于 m=m/n</td></tr><tr><td style="text-align:center">%=</td><td style="text-align:center">取余赋值</td><td style="text-align:center">m%=n 等价于 m=m% n</td></tr><tr><td style="text-align:center">&amp;=</td><td style="text-align:center">位与赋值</td><td style="text-align:center">m&amp;=n 等价于 m=m&amp;n</td></tr><tr><td style="text-align:center">|=</td><td style="text-align:center">位或赋值</td><td style="text-align:center">m|=n 等价于 m=m|n</td></tr><tr><td style="text-align:center">^=</td><td style="text-align:center">位异或赋值</td><td style="text-align:center">m^=n 等价于 m=m^n</td></tr><tr><td style="text-align:center">&lt;&lt;=</td><td style="text-align:center">位左移赋值</td><td style="text-align:center">m&lt;&lt;=n 等价于 m=m&lt;&lt;n</td></tr><tr><td style="text-align:center">&gt;&gt;=</td><td style="text-align:center">位右移赋值</td><td style="text-align:center">m&gt;&gt;=n 等价于 m=m&gt;&gt;n</td></tr></tbody></table><blockquote><p>Tip：复合赋值运算符都是由 2 个运算符组成，计算的顺序为从右向左，具体示例如下：</p></blockquote><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a += a *= a /= a - <span class="number">5</span> (假如a取<span class="number">7</span>)，则计算步骤如下：</span><br><span class="line">          a = a/(a - <span class="number">5</span>) = a / <span class="number">2</span> = <span class="number">7</span> / <span class="number">2</span> = <span class="number">3</span>   ①</span><br><span class="line"> a = a * a = <span class="number">3</span> * <span class="number">3</span> = <span class="number">9</span>  ②</span><br><span class="line">a = a + a = <span class="number">9</span> + <span class="number">9</span> = <span class="number">18</span>  ③</span><br></pre></td></tr></table></figure><h1 id="shi-za-xiang-yun-suan-fu-sizeof-amp-san-yuan">十、杂项运算符 ↦ sizeof &amp; 三元</h1><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th><th style="text-align:center">实例</th></tr></thead><tbody><tr><td style="text-align:center"><code>sizeof()</code></td><td style="text-align:center">返回变量的大小</td><td style="text-align:center">sizeof (a) 将返回 4，其中 a 是整数</td></tr><tr><td style="text-align:center"><code>&amp;</code></td><td style="text-align:center">返回变量的地址</td><td style="text-align:center">&amp;a; 将给出变量的实际地址</td></tr><tr><td style="text-align:center"><code>*</code></td><td style="text-align:center">指向一个变量</td><td style="text-align:center">*a; 将指向一个变量</td></tr><tr><td style="text-align:center"><code>? :</code></td><td style="text-align:center">条件表达式</td><td style="text-align:center">如果条件为真？则值为 X : 否则值为 Y</td></tr></tbody></table><h1 id="shi-yi-xuan-ze-liu-cheng-kong-zhi">十一、选择流程控制</h1><h2 id="11-1-if-yu-ju-kong-zhi-liu-cheng" id="11-1-if-语句控制流程">11.1 if 语句控制流程</h2><p><code>语法格式</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(表达式)</span><br><span class="line"> &#123;</span><br><span class="line"> 语句或语句块;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><code>流程图</code>：</p><p><img src="https://bu.dusays.com/2024/12/08/6755843b07f16.jpg" alt="if 语句控制流程图_看图王"></p><h2 id="11-2-if-else-yu-ju-kong-zhi-liu-cheng" id="11-2-if…else-语句控制流程">11.2 if…else 语句控制流程</h2><p><code>语法格式</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(表达式)</span><br><span class="line"> &#123;</span><br><span class="line"> 语句<span class="number">1</span>或语句块<span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line"> 语句<span class="number">2</span>或语句块<span class="number">2</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><code>流程图</code>：</p><p><img src="https://bu.dusays.com/2024/12/08/6755846f69194.jpg" alt="if...else 语句控制流程图_看图王"></p><blockquote><p>Tip:<code>if...else</code> 语句可以用 “三目运算符” 进行简化，语法格式为：<code>返回值=表达式1?表达式2:表达式3;</code> 例如 <code>b=a&gt;2?2:3;</code> 转换成 <code>if...else</code>，等价于：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">if</span>(a&gt;<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"> b=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"> b=<span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="11-3-if-else-if-yu-ju-kong-zhi-liu-cheng" id="11-3-if…else-if-语句控制流程">11.3 if…else if 语句控制流程</h2><p><code>语法格式</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(表达式<span class="number">1</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> 语句<span class="number">1</span>或语句块<span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span>(表达式<span class="number">2</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> 语句<span class="number">2</span>或语句块<span class="number">2</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> ...</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span>(表达式m)</span><br><span class="line"> &#123;</span><br><span class="line"> 语句m或语句块m;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line"> 语句n或语句块n;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><code>流程图</code>：</p><p><img src="https://bu.dusays.com/2024/12/08/675585c999044.jpg" alt="if...else if 语句控制流程图_看图王"></p><blockquote><p>Tip：<code>else if</code> 前必须要有 <code>if</code> 语句</p></blockquote><h2 id="11-4-switch-fen-zhi-yu-ju-kong-zhi-liu-cheng" id="11-4-switch-分支语句控制流程">11.4 switch 分支语句控制流程</h2><p><code>语法格式</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> 情况<span class="number">1</span>:</span><br><span class="line">        语句块<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">case</span> 情况<span class="number">2</span>:</span><br><span class="line">        语句块<span class="number">2</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">case</span> 情况n:</span><br><span class="line">        语句块n;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        默认情况语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>流程图</code>：</p><p><img src="https://bu.dusays.com/2024/12/08/675586152b4b3.jpg" alt="switch 分支语句控制流程图-1678884001896-2_看图王"></p><blockquote><p>Tip：<code>switch</code> 关键字后面的表达式必须是整数，不能是实数；<code>case</code> 语句后面的情况通常可以使常量或常量表达式，但是不能有变量，同时要注意每个 <code>case</code> 语句后必须有一个冒号 <code>(:)</code>。<code>default</code> 分支可以省略，如果省略的话，在所有常量表达式与 <code>switch</code> 后面括号内的表达式的值不相等时，<code>switch</code> 结构将没有语句执行。应用实例如下：</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> chooseNumber;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;***********************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;**    可选择的商品： **\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;**     1. 巧克力     **\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;**     2. 小面包     **\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;**     3. 可口可乐   **\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;***********************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请您从序号1~3中选择：&quot;</span>);</span><br><span class="line">input:</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;chooseNumber);</span><br><span class="line">    <span class="keyword">switch</span> (chooseNumber)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;您选择了巧克力。\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;您选择了小面包。\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;您选择了可口可乐。\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;您输入错误，请重新输入：&quot;</span>);</span><br><span class="line">        <span class="keyword">goto</span> input;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>输出结果</code>：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">***********************</span><br><span class="line">**    可选择的商品：  **</span><br><span class="line">**     <span class="number">1</span>. 巧克力     **</span><br><span class="line">**     <span class="number">2</span>. 小面包     **</span><br><span class="line">**     <span class="number">3</span>. 可口可乐   **</span><br><span class="line">***********************</span><br><span class="line">请您从序号<span class="number">1</span>~<span class="number">3</span>中选择：<span class="number">4</span></span><br><span class="line">您输入错误，请重新输入：<span class="number">3</span></span><br><span class="line">您选择了可口可乐。</span><br></pre></td></tr></table></figure><h2 id="11-5-switch-duo-lu-kai-guan-mo-shi-kong-zhi-liu-cheng" id="11-5-switch-多路开关模式控制流程">11.5 switch 多路开关模式控制流程</h2><p><code>语法格式</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> 情况<span class="number">1</span>:</span><br><span class="line">        语句块<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">case</span> 情况<span class="number">2</span>:</span><br><span class="line">    <span class="keyword">case</span> 情况<span class="number">3</span>:</span><br><span class="line">        语句块<span class="number">2</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        默认情况语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>流程图</code>：</p><p><img src="https://bu.dusays.com/2024/12/08/6755865a90cdf.jpg" alt="switch 多路开关模式控制流程图_看图王"></p><p><code>应用实例</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> month;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入现在的月份：&quot;</span>);</span><br><span class="line">input:</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;month);</span><br><span class="line">    <span class="keyword">switch</span> (month)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d月是第一季度。\n&quot;</span>, month);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d月是第二季度。\n&quot;</span>, month);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d月是第三季度。\n&quot;</span>, month);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d月是第四季度。\n&quot;</span>, month);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;您输入错误，请重新输入：&quot;</span>);</span><br><span class="line">        <span class="keyword">goto</span> input;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>输出结果</code>：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">请输入现在的月份：<span class="number">9</span></span><br><span class="line"><span class="number">9</span>月是第三季度。</span><br></pre></td></tr></table></figure><h1 id="shi-er-xun-huan-kong-zhi-yu-ju">十二、循环控制语句</h1><h2 id="12-1-dang-xing-xun-huan-while-yu-ju" id="12-1-当型循环：while-语句">12.1 当型循环：while 语句</h2><p><code>语法格式</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(循环条件)</span><br><span class="line">&#123;</span><br><span class="line">    循环体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>流程图</code>：</p><p><img src="https://bu.dusays.com/2024/12/08/675586a9a00c0.jpg" alt="while 语句控制流程图_看图王"></p><blockquote><p>注意: while 语句后面的循环条件可以是各种表达式，既可以是关系表达式，也可以是逻辑表达式。只要表达式的返回值为非 0，就认为循环条件为真；表达式的返回值为 0，就认为循环条件为假，循环就会结束。如果循环条件一直为真，那么循环就会一直执行下去，这种情况称为无限循环（又称死循环）。</p></blockquote><p><code>应用实例</code>：</p><p>农夫一共有 1020 个西瓜，第一天卖掉一半多 2 个，第二天卖掉剩下的一半多 2 个，如此循环下去，总共需要几天就可以卖完所有西瓜，示例代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> total_melon = <span class="number">1020</span>, day = <span class="number">0</span>, remaining; <span class="comment">// 声明西瓜总数、天数和西瓜剩余数</span></span><br><span class="line">    <span class="keyword">while</span> (total_melon)                         <span class="comment">// 当西瓜总数不为0时，执行循环</span></span><br><span class="line">    &#123;</span><br><span class="line">        remaining = total_melon / <span class="number">2</span> - <span class="number">2</span>; <span class="comment">// 西瓜剩余数为原来数量的一半少2个</span></span><br><span class="line">        total_melon = remaining;         <span class="comment">// 将剩余数赋值给总数</span></span><br><span class="line">        day++;                           <span class="comment">// 每循环一次天数加1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;总共需要%d天就可以卖完了\n&quot;</span>, day);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果</code>：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">总共需要<span class="number">8</span>天就可以卖完了</span><br></pre></td></tr></table></figure><h2 id="12-2-zhi-dao-xing-xun-huan-dowhile-yu-ju" id="12-2-直到型循环：do・・・while-语句">12.2 直到型循环：do・・・while 语句</h2><p><code>语法格式</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    循环体;</span><br><span class="line">&#125;<span class="keyword">while</span>(循环条件);</span><br></pre></td></tr></table></figure><p><code>流程图</code>：</p><p><img src="https://bu.dusays.com/2024/12/08/675586e899d71.jpg" alt="do…while 语句控制流程图_看图王"></p><blockquote><p>注意：do・・・while 语句是先执行后判断，也就是说第一次循环无论是否满足条件都会执行循环体中的内容，然后再进行判断是否继续执行循环。while 循环条件后面必须有一个分号。</p><p>Tip：while 和 do・・・while 的循环体如果是一条语句，大括号 “{}” 可以省略，但如果是多条语句，大括号 “{}” 就不能省略。因此，无论循环体是否是一条语句，建议不要省略大括号，以便于其他人阅读代码内容，同时养成良好的书写代码习惯。</p></blockquote><p><code>应用实例</code>：</p><p>利用 do・・・while 语句计算 1~100 之和，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> number = <span class="number">1</span>, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        sum = sum + number;</span><br><span class="line">        number++;</span><br><span class="line">    &#125; <span class="keyword">while</span> (number &lt;= <span class="number">100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1~100的和 sum 为 %d\n&quot;</span>, sum);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果</code>：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>~<span class="number">100</span> 的和 sum 为 <span class="number">5050</span></span><br></pre></td></tr></table></figure><h1 id="shi-san-c-yu-chu-li-qi">十三、C 预处理器</h1><p><code>预处理指令</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">line</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">error</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span></span></span><br></pre></td></tr></table></figure><h2 id="13-1-hong-ding-yi-define" id="13-1-宏定义-define">13.1 宏定义 #define</h2>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
          <category> 备忘清单 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 备忘清单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法学习笔记🐌</title>
      <link href="/2023/01/26/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/01/26/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<hr><p><span style="color:#FF3333;">算法</span>一词代指解决问题的方法，换句话说，算法提供了一整套解决问题的方案或者思路，即先做什么，再做什么，最后做什么。学习算法，可以短时间内快速提升我们“遇到问题，解决问题”的能力。</p><blockquote><p>笔记大部分内容和图例转载自<a href="http://c.biancheng.net/">C语言中文网</a>，感谢站长的付出。</p></blockquote><h1 id="yi-ji-chu-suan-fa">一、基础算法</h1><h2 id="yi-er-fen-cha-zhao" id="（一）二分查找">（一）二分查找</h2><ul class="lvl-0"><li class="lvl-2"><p><code>定义</code>：二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。但是，折半查找要求线性表必须采用<a href="https://baike.baidu.com/item/%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/1347176?fromModule=lemma_inlink">顺序存储结构</a>，而且表中元素按索引有序排列。</p></li><li class="lvl-2"><p><code>局限性</code>：1. Sorted（单调递增或者递减）；2. Bounded（存在上下边界）；3. Accessible by index（能够通过索引访问）。</p></li><li class="lvl-2"><p><code>算法复杂度</code>：二分查找的基本思想是将n个元素分成大致相等的两部分，取a[n/2]与x(目标值)做比较，如果x=a[n/2],则找到x,算法中止；如果x&lt;a[n/2],则只要在数组a的左半部分继续搜索x,如果x&gt;a[n/2],则只要在数组a的右半部搜索x。</p></li><li class="lvl-2"><p><code>伪代码</code>：如下用给大家展示了二分查找算法的具体实现过程：</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入 arr<span class="punctuation">[</span><span class="punctuation">]</span>                                    <span class="comment">// 输入有序序列</span></span><br><span class="line">binary_search( arr <span class="punctuation">,</span> begin <span class="punctuation">,</span> end <span class="punctuation">,</span> target)<span class="punctuation">:</span>  <span class="comment">// [begin,end]指定搜索区域，target为要搜索的目标元素</span></span><br><span class="line">    if begin &gt; end<span class="punctuation">:</span>                          <span class="comment">// [begin,end]不存在时，返回一个错误值（比如-1）</span></span><br><span class="line">        return <span class="number">-1</span></span><br><span class="line">    mid &lt;- ⌊ begin+(end-begin)/<span class="number">2</span> ⌋           <span class="comment">// 找到[begin,end]区域内中间元素所在位置的下标</span></span><br><span class="line">    if target == arr<span class="punctuation">[</span>mid<span class="punctuation">]</span><span class="punctuation">:</span>                   <span class="comment">// 递归的出口，即target和中间元素的值相等</span></span><br><span class="line">        return mid</span><br><span class="line">    if target ＜ arr<span class="punctuation">[</span>mid<span class="punctuation">]</span><span class="punctuation">:</span>                   <span class="comment">// 比较target和中间元素的值，进一步缩小搜索区域</span></span><br><span class="line">        return binary_search(arr <span class="punctuation">,</span> begin <span class="punctuation">,</span> mid<span class="number">-1</span> <span class="punctuation">,</span> target)</span><br><span class="line">    else<span class="punctuation">:</span></span><br><span class="line">        return binary_search(arr <span class="punctuation">,</span> mid+<span class="number">1</span> <span class="punctuation">,</span> end <span class="punctuation">,</span> target)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>示例代码</code>:C语言用二分查找算法找出目标值索引的示例代码如下：</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">binary_search</span><span class="params">(<span class="type">int</span> *arr, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> mid = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (left &gt; right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 如果[left,right] 不存在，返回 -1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 找到中间元素所在的位置,使用(left+right)/2会有整数溢出的问题问题会出现在当left+right的结果大于表达式结果类型所能表示的最大值时，这样，产生溢出后再除2是不会产生正确结果的，而left + (right - left) / 2不存在这个问题 */</span></span><br><span class="line">mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (target == arr[mid])  <span class="comment">// 递归的出口</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (target &lt; arr[mid])  <span class="comment">// 比较 target 和 arr[mid] 的值，缩小 target 可能存在的区域</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">binary_search</span>(arr, left, mid - <span class="number">1</span>, target);  <span class="comment">// 新的搜索区域为 [left,mid-1]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">binary_search</span>(arr, mid + <span class="number">1</span>, right, target);  <span class="comment">// 新的搜索区域为 [mid+1,right]</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">binary_search</span><span class="params">(<span class="type">int</span> *arr, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> target)</span></span>;</span><br><span class="line"><span class="type">int</span> Array[<span class="number">10</span>] = &#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">19</span>&#125;;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">sizeof</span>(Array) / <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line"><span class="type">int</span> left = <span class="number">0</span>, right = len - <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> target;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Array[10] = &#123;1, 4, 7, 8, 9, 12, 13, 16, 18, 19&#125;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;在上面数组中挑一个数输入按回车键，可查找其索引值：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;target);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;索引值为%d\n&quot;</span>, <span class="built_in">binary_search</span>(Array, left, right, target));</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="er-fen-zhi-suan-fa" id="（二）分治算法">（二）分治算法</h2><ul class="lvl-0"><li class="lvl-2"><p><code>定义</code>：“分治”即“分而治之”的意思。分治算法解决问题的思路是：先将整个问题拆分成多个相互独立且数据量更少的小问题，通过逐一解决这些简单的小问题，最终找到解决整个问题的方案。</p><blockquote><p>所谓问题间相互独立，简单理解就是每个问题都可以单独处理，不存在“谁先处理，谁后处理”的次序问题。</p></blockquote></li><li class="lvl-2"><p><code>局限性</code>:使用分治算法解决的问题都具备这样的特征，当需要处理的数据量很少时，问题很容易就能解决，随着数据量增多，问题的解决难度也随之增大。</p><p>分治算法的弊端也很明显，该算法经常和递归算法搭配使用，整个解决问题的过程会耗费较多的时间和内存空间，严重时还可能导致程序运行崩溃。</p></li><li class="lvl-2"><p><code>示例图</code>：分治算法找数组的最大值和最小值：不断地等分数组中的元素，直至各个分组中元素的个数 ≤2。由于每个分组内的元素最多有 2 个，很容易就可以找出其中的最值（最大值或最小值），然后这些最值再进行两两比较，最终找到的最值就是整个数组中的最值。下图展示了用分治算法查找 {3, 7, 2, 1} 中最大值的实现过程：</p><p><img src="https://bu.dusays.com/2024/12/08/67552150043ae.gif" alt=""></p></li><li class="lvl-2"><p><code>伪代码</code>：如下是分治算法求数组中最大值的:</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入 arr<span class="punctuation">[</span><span class="number">1.</span>..n<span class="punctuation">]</span>            <span class="comment">// 输入n个数字</span></span><br><span class="line">arr_max(x <span class="punctuation">,</span> y) <span class="punctuation">:</span>          <span class="comment">// 设计一个递归函数，[x,y] 用来限定查找最大数的范围</span></span><br><span class="line">    if y-x ≤ <span class="number">1</span> <span class="punctuation">:</span>          <span class="comment">// 如果y-x的值小于等于1，则比较 arr[x]和arr[y]的值，大的就是最大值 </span></span><br><span class="line">        return max(arr<span class="punctuation">[</span>x<span class="punctuation">]</span> <span class="punctuation">,</span> arr<span class="punctuation">[</span>y<span class="punctuation">]</span>)</span><br><span class="line">    else <span class="punctuation">:</span></span><br><span class="line">    <span class="comment">// 将[x,y]区域划分为[x,⌊(x+y)/2⌋ ]和[⌊(x+y)/2+1⌋,y] 两个区域，求出两个区域内各自的最大值</span></span><br><span class="line">        max1 = arr_max(x <span class="punctuation">,</span> ⌊(x+y)/<span class="number">2</span>⌋ )  </span><br><span class="line">        max2 = arr_max( ⌊(x+y)/<span class="number">2</span>+<span class="number">1</span>⌋ <span class="punctuation">,</span> y)</span><br><span class="line">    return max(max1 <span class="punctuation">,</span> max2)   <span class="comment">// 比较两个区域的最大值，最终找出[x,y] 中的最大值</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>示例代码</code>：C语言用分治算法实现“求数组中最大值”的代码如下：</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_max</span><span class="params">(<span class="type">int</span> *arr, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> max_left = <span class="number">0</span>, max_right = <span class="number">0</span>, middle = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 如果数组不存在</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (right - left == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> arr[left];  <span class="comment">// 如果查找范围中仅有一个数字</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (right - left &lt;= <span class="number">1</span>)  <span class="comment">// 如果查找范围中有 2 个数字，直接比较即可</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[left] &gt;= arr[right])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> arr[left];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr[right];</span><br><span class="line">    &#125;</span><br><span class="line">    middle = (right - left) / <span class="number">2</span> + left;  <span class="comment">// 等量划分成 2 个区域</span></span><br><span class="line">    max_left = <span class="built_in">get_max</span>(arr, left, middle);  <span class="comment">// 得到左侧区域中的最大值</span></span><br><span class="line">    max_right = <span class="built_in">get_max</span>(arr, middle + <span class="number">1</span>, right);  <span class="comment">// 得到右侧区域中的最大值</span></span><br><span class="line">    <span class="keyword">if</span> (max_left &gt;= max_right)    <span class="comment">// 比较左、右两侧的最大值，找到 [left,right] 整个区域的最大值</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> max_left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> max_right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get_max</span><span class="params">(<span class="type">int</span> *arr, <span class="type">int</span> left, <span class="type">int</span> right)</span></span>;</span><br><span class="line">    <span class="type">int</span> Arr[<span class="number">6</span>] = &#123;<span class="number">3</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="type">int</span> result = <span class="built_in">get_max</span>(Arr, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, result);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="san-pai-xu-suan-fa" id="（三）排序算法">（三）排序算法</h2><h3 id="tong-pai-xu" id="◆-桶排序">◆ 桶排序</h3><ul class="lvl-0"><li class="lvl-2"><p><code>定义</code>：桶排序（又称箱排序）是一种基于分治思想、效率很高的排序算法。</p></li><li class="lvl-2"><p><code>思路</code>：假设一种场景，对 {5, 2, 1, 4, 3} 进行升序排序，桶排序算法的实现思路是：</p><p>1.准备5个桶，从1~5对它们进行编号；</p><p>2.将待排序序列的各个元素放置到相同编号的桶中；</p><p>3.从1号桶开始，依次获取桶中放置的元素，得到的就是一个升序序列。</p></li><li class="lvl-2"><p><code>时间复杂度</code>：理想情况下对应的时间复杂度为O(n)。</p></li><li class="lvl-2"><p><code>示例代码</code>：只有一种元素的情况下，C语言桶排序示例代码如下：</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUM 101 <span class="comment">// 0~100内的整数，则需要101个桶</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i, j, t;</span><br><span class="line">    <span class="type">int</span> mark[NUM];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= NUM - <span class="number">1</span>; i++) <span class="comment">// 0~100号标记桶，初始化为0</span></span><br><span class="line">    &#123;</span><br><span class="line">        mark[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入需要排序的个数：&quot;</span>); <span class="comment">// 表示接下来有n个数排序</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入%d个0~100的整数：\n&quot;</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t); <span class="comment">// 此处是关键，对输入的数，找到对应的桶进行标记和计数</span></span><br><span class="line">        mark[t]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;从小到大排序结果为：\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= NUM - <span class="number">1</span>; i++) <span class="comment">// 遍历全部桶，每个桶计数为多少，就输出多少次</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= mark[i]; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%-3d&quot;</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;从大到小排序结果为：\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = NUM - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= mark[i]; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%-3d&quot;</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mou-pao-pai-xu" id="◆-冒泡排序">◆ 冒泡排序</h3><ul class="lvl-0"><li class="lvl-2"><p><code>定义</code>：冒泡排序(Bubble_sort)是所有排序算法中最简单、最易实现的算法，有时也称为<mark>起泡排序</mark>算法。使用冒泡排序算法对n个数据进行排序。</p></li><li class="lvl-2"><p><code>思路</code>：从待排序序列中找出一个最大值或最小值，这样的操作执行n-1次，最终就可以得到一个有序序列。</p></li><li class="lvl-2"><p><code>时间复杂度</code>:（n-1）<sup>2</sup>，记为O(n<sup>2</sup>)。</p></li><li class="lvl-2"><p><code>伪代码</code>：如下是冒泡排序算法实现升序排序：</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Bubble_sort(list)<span class="punctuation">:</span>                <span class="comment">//list表示待排序序列</span></span><br><span class="line">    for i &lt;- <span class="number">0</span> to length(list)<span class="number">-1</span><span class="punctuation">:</span> <span class="comment">//对元素个数为n的list序列，需遍历n-1次，这里用[0,length(list)-1)表示</span></span><br><span class="line">        for j &lt;- <span class="number">1</span> to length(list) - i<span class="punctuation">:</span>    <span class="comment">// 从第1个元素开始遍历，遍历区间为[1,length(list)-i)</span></span><br><span class="line">            if list<span class="punctuation">[</span>j<span class="punctuation">]</span> &gt; list<span class="punctuation">[</span>j+<span class="number">1</span><span class="punctuation">]</span><span class="punctuation">:</span>        <span class="comment">// 若进行降序排序，则改成&lt;小于号</span></span><br><span class="line">                 swap(list<span class="punctuation">[</span>j<span class="punctuation">]</span> <span class="punctuation">,</span> list<span class="punctuation">[</span>j+<span class="number">1</span><span class="punctuation">]</span>) <span class="comment">// 交换2个相邻元素的位置</span></span><br><span class="line">    return list                            <span class="comment">// 返回排好序的序列</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>示例代码</code>：C语言冒泡排序降序示例代码如下：</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Bubble_sort</span><span class="params">(<span class="type">int</span> *array, <span class="type">int</span> n)</span> <span class="comment">//实现冒泡降序排序算法的函数，array为待排序数组，n为数组元素个数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i, j, temp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) <span class="comment">//n个元素，遍历n-1次，相邻两数两两向后遍历，n个数只需遍历n-1次就行</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++)  <span class="comment">// 从第1个元素开始遍历，遍历至n-1-i</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[j] &lt; array[j + <span class="number">1</span>]) <span class="comment">//比较相邻两数的大小，进行元素位置交换</span></span><br><span class="line">            &#123;</span><br><span class="line">                temp = array[j];</span><br><span class="line">                array[j] = array[j + <span class="number">1</span>];</span><br><span class="line">                array[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Bubble_sort</span><span class="params">(<span class="type">int</span> *array, <span class="type">int</span> n)</span></span>;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入排序的元素个数：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="type">int</span> *array = (<span class="type">int</span> *)<span class="built_in">malloc</span>(n * <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入%d个数进行排序：&quot;</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;array[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Bubble_sort</span>(array, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%-3d&quot;</span>, array[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(array);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="si-di-gui-suan-fa" id="（四）递归算法">（四）递归算法</h2><ul class="lvl-0"><li class="lvl-2"><p><code>定义</code>：将函数（方法）调用自身的过程称为递归，调用自身的函数称为递归函数，用递归方式解决问题的算法称为递归算法。涉及<mark>栈</mark>的知识，即“先进后出”。下图展示了函数递归调用的底层实现过程：</p></li></ul><p><img src="https://bu.dusays.com/2024/12/08/67552155f1dee.gif" alt=""></p><ul class="lvl-0"><li class="lvl-2"><p><code>局限性</code>：设计递归函数时，我们必须为它设置一个结束递归的“出口”，否则函数会一直调用自身（死循环），直至运行崩溃。</p></li><li class="lvl-2"><p><code>伪代码</code>：分两种情况<mark>直接调用</mark>和<mark>间接调用</mark>：</p></li></ul><blockquote><p>直接调用自身</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int funciton(<span class="comment">/*...*/</span>) <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">    <span class="comment">//调用自身</span></span><br><span class="line">    function(<span class="comment">/*...*/</span>);</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>间接调用自身</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int funciton1(<span class="comment">/*...*/</span>) <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">    <span class="comment">//调用另一个函数</span></span><br><span class="line">    function2(<span class="comment">/*...*/</span>);</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">int function2(<span class="comment">/*...*/</span>) <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">    <span class="comment">//调用function1()函数</span></span><br><span class="line">    funciton1(<span class="comment">/*...*/</span>);</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>示例代码</code>：C语言递归算法求 <code>n!</code>示例代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">factorial</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">0</span>) <span class="comment">// 递归的出口</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n * <span class="built_in">factorial</span>(n - <span class="number">1</span>); <span class="comment">// 函数调用自身</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入一个数，求阶乘值：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d! = %d\n&quot;</span>, n, <span class="built_in">factorial</span>(n));</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="wu-tan-xin-suan-fa" id="（五）贪心算法">（五）贪心算法</h2><ul class="lvl-0"><li class="lvl-2"><p><code>定义</code>：每一步都力求最大限度地解决问题，每一步都选择的是当前最优的解决方案，这种解决问题的算法就是贪心算法。</p></li><li class="lvl-2"><p><code>局限性</code>：虽然贪心算法每一步都是最优的解决方案，但整个算法并不一定是最优的。总的来讲，贪心算法注重的是每一步选择最优的解决方案（又称“局部最优解”），并不关心整个解决方案是否最优。</p></li><li class="lvl-2"><p><code>示例代码</code>：C语言谈心算法求<mark>小孩分糖</mark>问题示例代码如下：</p></li></ul><blockquote><p>题目引用自LeetCode<a href="https://leetcode.cn/problems/assign-cookies/">第455题</a></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Bubble_sort</span><span class="params">(<span class="type">int</span> *array, <span class="type">int</span> lenth)</span> <span class="comment">// 排序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i, j, temp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; lenth - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; lenth - i - <span class="number">1</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[j] &gt; array[j + <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                temp = array[j];</span><br><span class="line">                array[j] = array[j + <span class="number">1</span>];</span><br><span class="line">                array[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find_target</span><span class="params">(<span class="type">int</span> *child, <span class="type">int</span> child_len, <span class="type">int</span> *candy, <span class="type">int</span> candy_len)</span> <span class="comment">// 计算满足小孩需求的最大数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Bubble_sort</span>(child, child_len);  <span class="comment">// 小孩需求从小到大排序</span></span><br><span class="line">    <span class="built_in">Bubble_sort</span>(candy, candy_len);  <span class="comment">// 糖果大小从小到大排序</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;                      <span class="comment">// 小孩需求索引</span></span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;                      <span class="comment">// 糖果索引</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; child_len &amp;&amp; j &lt; candy_len) <span class="comment">// 糖果和小孩都没有完成尝试时，循环进行</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (candy[j] &gt;= child[i]) <span class="comment">// 小孩需求被满足时剔除，让下一个小孩继续尝试</span></span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        j++;  <span class="comment">// 糖果无论小孩需求满足与否，糖果都要逐个剔除</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Bubble_sort</span><span class="params">(<span class="type">int</span> *array, <span class="type">int</span> lenth)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find_target</span><span class="params">(<span class="type">int</span> *child, <span class="type">int</span> child_len, <span class="type">int</span> *candy, <span class="type">int</span> candy_len)</span></span>;</span><br><span class="line">    <span class="type">int</span> child[<span class="number">6</span>] = &#123;<span class="number">6</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">16</span>, <span class="number">10</span>&#125;;     <span class="comment">// 小孩需求大小</span></span><br><span class="line">    <span class="type">int</span> candy[<span class="number">5</span>] = &#123;<span class="number">7</span>, <span class="number">2</span>, <span class="number">21</span>, <span class="number">4</span>, <span class="number">9</span>&#125;;           <span class="comment">// 糖果大小</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最大可满足%d个小孩的需求\n&quot;</span>, <span class="built_in">find_target</span>(child, <span class="number">6</span>, candy, <span class="number">5</span>));</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode在Windows系统配置C和C++环境💻</title>
      <link href="/2023/01/20/VSCode%E5%9C%A8Windows%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AEC%E5%92%8CC++%E7%8E%AF%E5%A2%83/"/>
      <url>/2023/01/20/VSCode%E5%9C%A8Windows%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AEC%E5%92%8CC++%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>注：博主电脑系统为Win10（X64）</p></blockquote><h1 id="yi-xia-zai-an-zhuang-ji-pei-zhi-zhong-wen-jie-mian">一、下载安装及配置中文界面</h1><p>1.首先，我们直接去<a href="https://code.visualstudio.com/">VSCode官网</a>或在<a href="http://vscode.bianjiqi.net/">中文网</a>下载对应操作系统版本的安装包即可。</p><p>2.安装路径按自己需求更改，安转完成后配置中文界面：</p><ul class="lvl-0"><li class="lvl-2"><p>可在自动弹出界面直接安装；</p></li><li class="lvl-2"><p>如未自动弹出语言设置界面，可点击扩展→输入Chinese→选择中文简体安装。</p></li></ul><h1 id="er-xia-zai-c-c-cha-jian">二、下载c/c++ 插件</h1><blockquote><p>1.C/C++</p><p>2.C/C++ Bulid Task</p><p>3.C/C++ Extension Pack</p><p>4.C/C++ Runner</p><p>5.code runner.</p></blockquote><h1 id="san-an-zhuang-min-gw-diao-shi-qi">三、安装MinGW调试器</h1><h2 id="yi-xia-zai-fang-fa" id="（一）下载方法">（一）下载方法</h2><p>1.可在<a href="https://sourceforge.net/projects/mingw-w64/files/">MinGW官网</a>下载MinGW调试器，但是下载的版本比较旧（一般是8.1.0），而且用在线安装包安装的话，下载会很慢甚至报错。</p><p>2.也可在<a href="https://github.com/niXman/mingw-builds-binaries/releases">https://github.com/niXman/mingw-builds-binaries/releases</a> 下载最新版本，根据自己电脑配置选择32位或64位下载解压包后进行解压。</p><p>3.可在题主的百度网盘下载，链接: <a href="https://pan.baidu.com/s/1CBZjPMdwP0uO2TyVkI_HZg?pwd=r7bi">https://pan.baidu.com/s/1CBZjPMdwP0uO2TyVkI_HZg?pwd=r7bi</a> 提取码: r7bi。版本为12.2.0，其中msvcrt版本对旧系统兼容性比较好，ucrt版本更好地支持win10等较新系统。</p><h2 id="er-an-zhuang-pei-zhi-fang-fa" id="（二）安装配置方法">（二）安装配置方法</h2><p>安装参照教程：<a href="http://c.biancheng.net/view/8077.html">http://c.biancheng.net/view/8077.html</a></p><p>1.在安装完成的基础上，我们需要手动配置 PATH 环境变量。依次右击计算机（我的电脑） -&gt; 属性 -&gt; 高级系统设置 -&gt; 环境变量，建议读者在当前用户的 PATH 环境变量中增加 MinGW 的安装路径，例如我将其安装到了C:\MinGW文件夹中，因此 PATH 环境变量的设置为：C:\MinGW\bin。</p><p>2.由此，打开命令行窗口（通过在搜索栏中执行 cmd 指令即可），输入gcc -v指令，如果输出 GCC编译器的具体信息，则表示安装成功。</p><h1 id="si-pei-zhi-c-ins-huan-jing-zhi-pei-zhi-c-de-hua-zai-xuan-ze-g-ins-de-shi-hou-huan-cheng-gcc-jiu-xing">四、配置C<ins>环境（只配置C的话，在选择g</ins>的时候换成gcc就行）</h1><p>1.在自己电脑硬盘分区新建类似“CPP”文件夹，在此文件夹下新建一个“exe”文件夹（目的是将编译生成的exe文件全部放在这个文件夹，便于管理）。</p><p>2.在vscode点击文件打开建的文件夹（快捷键 Ctrl+k Ctrl+O）。</p><p>3.接下来配置编译器路径，按快捷键Ctrl+Shift+P调出命令面板，输入C/C++，选择“Edit Configurations(UI)”进入配置编译器路径：<code>C:/MinGW/bin/g++.exe</code>，IntelliSense 模式选择：<code>Windows-gcc-x64</code>。</p><p>4.新建一个<code>cpp</code>文件，会自动生成<code>.vscode</code>文件夹,此文件夹包含：<code>c_cpp_properties.json</code>，可稍作修改如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;windows-gcc-x64&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;includePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;defines&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;_DEBUG&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;UNICODE&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;_UNICODE&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;compilerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:/MinGW/bin/gcc.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;intelliSenseMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;windows-gcc-x64&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;browse&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;limitSymbolsToIncludedHeaders&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;cStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c17&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;cppStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c++17&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>5.配置完成后点击键盘F5或者运行→启动调试：选择<code>C++(GDB/LLDB)</code>，出现错误提示，点击中止，会生成一个<code>tasks.json</code>。然后修改<code>tasks.json</code>，这样做的目的是将编译生成的exe文件单独放在之前新建的exe文件夹中，修改代码参考如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppbuild&quot;</span><span class="punctuation">,</span> <span class="comment">// cppbuild是把预定义变量和转义解析后直接全部传给command；shell相当于先打开shell再输入命令，所以args还会经过shell再解析一遍</span></span><br><span class="line"><span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;g++&quot;</span><span class="punctuation">,</span> <span class="comment">// 任务名称，与launch.json的preLaunchTask相对应</span></span><br><span class="line"><span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;g++&quot;</span><span class="punctuation">,</span> <span class="comment">// 要使用的编译器，C++用g++</span></span><br><span class="line"><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;-fexec-charset=gbk&quot;</span><span class="punctuation">,</span> <span class="comment">// 生成的程序使用GBK编码，不加这条会导致Win下输出中文乱码；繁体系统改成BIG5</span></span><br><span class="line"><span class="string">&quot;-D__USE_MINGW_ANSI_STDIO=1&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;-g&quot;</span><span class="punctuation">,</span> <span class="comment">// 生成和调试有关的信息</span></span><br><span class="line"><span class="string">&quot;-m64&quot;</span><span class="punctuation">,</span> <span class="comment">// 不知为何有时会生成16位应用而无法运行，加上此条可强制生成64位的</span></span><br><span class="line"><span class="string">&quot;-Wall&quot;</span><span class="punctuation">,</span> <span class="comment">// 开启额外警告</span></span><br><span class="line"><span class="string">&quot;-static-libgcc&quot;</span><span class="punctuation">,</span> <span class="comment">// 静态链接libgcc，一般都会加上</span></span><br><span class="line"><span class="string">&quot;-o&quot;</span><span class="punctuation">,</span> <span class="comment">// 指定输出文件名，不加该参数则默认输出a.exe，Linux下默认a.out</span></span><br><span class="line"><span class="string">&quot;$&#123;workspaceFolder&#125;/exe/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span><span class="comment">//编译输出exe文件到exe文件夹</span></span><br><span class="line"><span class="comment">// &quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;,</span></span><br><span class="line"><span class="string">&quot;-fdiagnostics-color=always&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;owner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;fileLocation&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;relative&quot;</span><span class="punctuation">,</span> <span class="string">&quot;\\&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;pattern&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;regexp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;line&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;column&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;severity&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="comment">// 不为true时ctrl shift B就要手动选择了</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:/MinGW/bin&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;presentation&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;echo&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;reveal&quot;</span><span class="punctuation">:</span> <span class="string">&quot;always&quot;</span><span class="punctuation">,</span> <span class="comment">// 执行任务时是否跳转到终端面板，可以为always，silent，never。具体参见VSC的文档</span></span><br><span class="line"><span class="attr">&quot;focus&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// 设为true后可以使执行task时焦点聚集在终端，但对编译C/C++来说，设为true没有意义</span></span><br><span class="line"><span class="attr">&quot;panel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shared&quot;</span> <span class="comment">// 不同的文件的编译信息共享一个终端面板</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span> <span class="string">&quot;编译器: C:/MinGW/bin/g++.exe&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>6.修改<code>launch.json</code>，注意修改<code>&quot;miDebuggerPath&quot;: &quot;C:/MinGW/bin/gdb.exe&quot;</code>, // miDebugger的路径，注意这里要与MinGw的路径对应 ：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(gdb) 启动&quot;</span><span class="punctuation">,</span> <span class="comment">// 配置名称，将会在启动配置的下拉菜单中显示</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span> <span class="comment">// 配置类型，这里只能为cppdbg</span></span><br><span class="line"><span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span> <span class="comment">// 请求配置类型，可以为launch（启动）或attach（附加）</span></span><br><span class="line"><span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/exe/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span> <span class="comment">// 将要进行调试的程序的路径</span></span><br><span class="line"><span class="comment">// &quot;program&quot;: &quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;, // 将要进行调试的程序的路径</span></span><br><span class="line"><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 程序调试时传递给程序的命令行参数，一般设为空即可</span></span><br><span class="line"><span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// 设为true时程序将暂停在程序入口处，一般设置为false</span></span><br><span class="line"><span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span> <span class="comment">// 调试程序时的工作目录，一般为$&#123;workspaceFolder&#125;即代码所在目录</span></span><br><span class="line"><span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 环境变量</span></span><br><span class="line"><span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 调试时是否显示控制台窗口，一般设置为true显示控制台</span></span><br><span class="line"><span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:/MinGW/bin/gdb.exe&quot;</span><span class="punctuation">,</span> <span class="comment">// miDebugger的路径，注意这里要与MinGw的路径对应</span></span><br><span class="line"><span class="attr">&quot;miDebuggerArgs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-q&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;g++&quot;</span><span class="punctuation">,</span> <span class="comment">// 调试会话开始前执行的任务，一般为编译程序，c++为g++, c为gcc</span></span><br><span class="line"><span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Enable pretty-printing for gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：上述过程，每完成一步最好重启一遍vscode，以免产生不必要的错误。</p></blockquote><h1 id="wu-can-kao-he-yin-yong">五、参考和引用</h1><h2 id="xiu-gai-luan-ma" id="修改乱码：">修改乱码：</h2><p>只需要在tasks.json的args项下添加一行&quot;-fexec-charset=gbk&quot;即可，参考：<a href="https://blog.csdn.net/weixin_45653971/article/details/118908200?spm=1001.2101.3001.6650.4&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-4-118908200-blog-123590573.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-4-118908200-blog-123590573.pc_relevant_default&amp;utm_relevant_index=5">vscode终端中文乱码问题的解决方案合集c++</a></p><h2 id="an-zhuang-ji-json-wen-jian-xiu-gai-can-kao-jiao-cheng" id="安装及json文件修改参考教程：">安装及json文件修改参考教程：</h2><p><a href="https://blog.csdn.net/Zhouzi_heng/article/details/115014059">【c++】VSCode配置 c++ 环境（小白教程）</a></p><h2 id="vs-code-xiu-gai-mo-ren-sheng-cheng-html-mo-ban-de-ying-wen-lang-en-xiu-gai-wei-zhong-wen-lang-zh-cn-can-kao-jiao-cheng" id="VS-Code修改默认生成HTML模板的英文lang-en修改为中文lang-zh-CN，参考教程：">VS Code修改默认生成HTML模板的英文lang=en修改为中文lang=zh-CN，参考教程：</h2><p><a href="https://www.mainblog.cn/255.html">https://www.mainblog.cn/255.html</a></p><h1 id="liu-vs-code-xiang-guan-zhan-dian">六、VSCode相关站点</h1><h2 id="vs-code-zui-quan-bi-bei-shi-yong-cha-jian" id="VSCode最全必备实用插件">VSCode最全必备实用插件</h2><p><a href="https://www.uihtm.com/blog/18823.html">https://www.uihtm.com/blog/18823.html</a></p><h2 id="vs-codethemes-zhu-ti-wang-zhan" id="VSCodethemes主题网站">VSCodethemes主题网站</h2><p><a href="https://vscodethemes.com/">https://vscodethemes.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> VSCode </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> VSCode </tag>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode 常用快捷键和一些使用技巧💻</title>
      <link href="/2023/01/20/VSCode%20%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E4%B8%80%E4%BA%9B%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
      <url>/2023/01/20/VSCode%20%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E4%B8%80%E4%BA%9B%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="xi-tong-he-ruan-ying-jian">系统和软硬件</h1><blockquote><p>系统版本：win10</p><p>软件版本：VScode 1.74.3</p><p>硬件：台式机</p></blockquote><h1 id="yi-ru-he-zai-v-scode-zhong-qi-yong-shi-yong-shu-biao-xuan-ze-xing-lie">一、如何在VScode中启用使用鼠标选择行列</h1><p>1.首先打开VScode，进入编辑窗口。</p><p>2.之后点击上方的“文件”菜单。</p><p><img src="https://bu.dusays.com/2024/12/08/6755216ebd191.png" alt="图1"></p><p>3.在下拉子菜单中，依次点击“首选项”中的“设置”项。</p><p><img src="https://bu.dusays.com/2024/12/08/6755217353c22.png" alt="图2-1"></p><p><img src="https://bu.dusays.com/2024/12/08/675521775333d.png" alt="图2-2"></p><p>4.最后在设置页面中，搜索并勾选“<code>Column Selection</code>”栏的方框，即可启用使用鼠标选择行列。</p><p><img src="https://bu.dusays.com/2024/12/08/6755217b74bf2.png" alt="图3"></p><p>5.返回编辑界面，长按鼠标不松手向下拖动，可实现同时选择多行，有利于同时删除或者添加代码。</p><p><img src="https://bu.dusays.com/2024/12/08/6755217f2e279.png" alt="图4"></p><blockquote><p>Tips：此设置便于前端代码修改和书写，但是C语言等建议不开启，可按住Shift+Alt+按住鼠标可实现同样的效果。</p></blockquote><h1 id="er-vs-code-chang-yong-kuai-jie-jian">二、VSCode 常用快捷键</h1><h2 id="1-kuai-su-fu-zhi-yi-xing" id="1-快速复制一行">1. 快速复制一行</h2><blockquote><p>快捷键： shift+alt+ 下箭头 / 上箭头 或者 ctrl+c 然后 ctrl+v</p></blockquote><p><img src="https://bu.dusays.com/2025/01/05/677a74a5b6c23.gif" alt="图1"></p><h2 id="2-xuan-ding-duo-ge-xiang-tong-de-dan-ci" id="2-选定多个相同的单词">2. 选定多个相同的单词</h2><blockquote><p>快捷键： ctrl + d</p><p>先将光标置于选定单词后双击鼠标左键，然后按下 ctrl + d 可以往下依次选择相同的单词。 这样同时修改相同的单词就非常方便</p><p>快捷键： ctrl + shift + l</p><p>先将光标置于选定单词后双击鼠标左键，然后按下 ctrl + shift + l 可以同时选中相同的单词。 这样同时修改相同的单词就非常方便</p></blockquote><p><img src="https://bu.dusays.com/2025/01/05/677a74a5ba4d3.gif" alt="图2"></p><p><img src="https://bu.dusays.com/2025/01/05/677a74a5ec48b.gif" alt="图3"></p><h2 id="3-quan-ju-ti-huan-mou-xie-dan-ci" id="3-全局替换某写单词">3. 全局替换某写单词</h2><blockquote><p>当我们一个页面需要修改大量相同的文字的时候，我们一个的修改超级麻烦，此时我们可以使用全局替换</p><p>快捷键： ctrl + h 注意选择全部替换即可</p></blockquote><p><img src="https://bu.dusays.com/2025/01/05/677a74a8ebcc8.gif" alt="图4"></p><h2 id="4-kuai-su-ding-wei-dao-mou-yi-xing" id="4-快速定位到某一行">4. 快速定位到某一行</h2><blockquote><p>当我们页面比较长的时候，上下滚动页面布方便，其实我们可以利用快捷键，快速的调到指定的行数上。</p><p>快捷键： ctrl + g</p></blockquote><p><img src="https://bu.dusays.com/2025/01/05/677a74a6c29e4.gif" alt="图5"></p><h2 id="5-fang-da-suo-xiao-zheng-ge-bian-ji-qi-jie-mian" id="5-放大缩小整个编辑器界面">5. 放大缩小整个编辑器界面</h2><blockquote><p>快捷键： ctrl + + /-</p></blockquote><p><img src="https://bu.dusays.com/2025/01/05/677a74a844d41.gif" alt="图6"></p><h2 id="6-tian-jia-duo-ge-guang-biao" id="6-添加多个光标">6. 添加多个光标</h2><blockquote><p>快捷键： Ctrl + Alt + 上箭头 / 下箭头</p></blockquote><p><img src="https://bu.dusays.com/2025/01/05/677a74a925088.gif" alt="图7"></p><h2 id="7-xuan-ze-mou-ge-qu-kuai" id="7-选择某个区块">7. 选择某个区块</h2><blockquote><p>可以选择一个区块进行操作</p><p>快捷键： 按住 alt + shift 然后拖动鼠标</p></blockquote><p><img src="https://bu.dusays.com/2025/01/05/677a74ab27dfe.gif" alt="图8"></p><blockquote><p>也可以添加多个光标</p></blockquote><p><img src="https://bu.dusays.com/2025/01/05/677a74a98a101.gif" alt="图9"></p><h2 id="8-xuan-zhong-xing" id="8-选中行">8. 选中行</h2><blockquote><p>快捷键： 按住 alt + shift + 左箭头 / 右箭头</p></blockquote><p><img src="https://bu.dusays.com/2025/01/05/677a74aa908d5.gif" alt="图10"></p><h2 id="9-guang-biao-ding-wei-dao-dan-ci-shou-dan-ci-wei" id="9-光标定位到单词首-单词尾">9. 光标定位到单词首 / 单词尾</h2><blockquote><p>快捷键 Ctrl + 左箭头 / 右箭头</p></blockquote><p><img src="https://bu.dusays.com/2025/01/05/677a74ad090d8.gif" alt="图11"></p><h2 id="10-xuan-zhong-dan-ci" id="10-选中单词">10. 选中单词</h2><blockquote><p>快捷键 Ctrl + shift + 左箭头 / 右箭头</p></blockquote><p><img src="https://bu.dusays.com/2025/01/05/677a74ae4bd16.gif" alt="图12"></p><h2 id="11-guang-biao-ding-wei-dao-xing-shou-xing-mo" id="11-光标定位到行首-行末">11. 光标定位到行首 / 行末</h2><blockquote><p>快捷键 Home/End</p></blockquote><p><img src="https://bu.dusays.com/2025/01/05/677a74af0fa73.gif" alt="图13"></p><h2 id="12-ding-ji-cao-zuo" id="12-顶级操作">12. 顶级操作</h2><p><img src="https://bu.dusays.com/2025/01/05/677a74b172e46.gif" alt="图14"></p><h2 id="13-zi-ding-yi-kuai-jie-jian" id="13-自定义快捷键">13. 自定义快捷键</h2><blockquote><p>有些快捷键，我们使用不习惯，其实我们可以自定义快捷键的。</p><p>比如 js 的多行注释是 shift + alt + a ，我们想修改为 ctrl + shfit + /</p><p>设置方法： 管理按钮 — 键盘快捷方式 — 输入 shift + alt + a 找到这个快捷键 ----- 点击编辑按钮 ---- 直接按下 ctrl + shift + /---- 最后按下回车 修改完毕。</p></blockquote><p><img src="https://bu.dusays.com/2025/01/05/677a74b27aac0.gif" alt="图15"></p><p>直接按下<code> ctrl + shift + /</code>---- 最后按下回车 修改完毕。</p><h1 id="san-vs-code-de-yi-xie-shi-yong-ji-qiao">三、VSCode 的一些使用技巧</h1><h2 id="1-v-scode-zhong-shan-chu-kong-bai-xing" id="1-VScode-中删除空白行">1. VScode 中删除空白行</h2><blockquote><p>使用 VScode 的查找替换功能，用正则表达式 <code>^\s*(?=\r?$)\n</code> 查找出所有空白行后，使用替换功能删除所有空白行</p></blockquote><p>1-1 按快捷键 <code>Ctrl+H</code>, 召唤以下编辑面板</p><p><img src="https://bu.dusays.com/2025/01/05/677a74b022965.png" alt="图1"></p><p>1-2 在查找中粘贴以下正则表达式 <code>^\s*(?=\r?$)\n</code>, 点击右侧 <code>*</code> 号使用正则表达式查找，点击全部替换即可</p><p><img src="https://bu.dusays.com/2025/01/05/677a74b1dad57.gif" alt="图2"></p><h2 id="2-vs-code-da-kai-guan-bi-bian-ji-qu-yu-ding-bu-gu-ding-qu-yu" id="2-VSCode-打开关闭编辑区域顶部固定区域">2.VSCode 打开关闭编辑区域顶部固定区域</h2><p>VSCode升级1.86.2后，编辑区域顶部多了一块固定内容，可以快速定位。但是对应笔记本电脑小屏幕来说有点占位置，可以右击取消选中<a href="https://so.csdn.net/so/search?q=Sticky&amp;spm=1001.2101.3001.7020">Sticky</a> Scroll。</p><p><img src="https://bu.dusays.com/2025/04/16/67ff8cae746f6.png" alt="在这里插入图片描述"></p><p>想要<strong>开启</strong>，从Setting中搜索sticky scroll，找到Editor中的勾选上即可。</p><p><img src="https://bu.dusays.com/2025/04/16/67ff8cae9e0b4.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> VSCode </category>
          
          <category> 操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> VSCode </tag>
            
            <tag> 快捷键 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
